{
  "reportId": "duplication-demo-1752995948004",
  "timestamp": "2025-07-20T07:19:08.005Z",
  "roomId": "duplication-demo",
  "storyId": "US001_Calculator_BasicMath",
  "storyStatus": "WARNING",
  "narrative": "Story US001_Calculator_BasicMath: Code quality analysis In Progress. Duplication: 51.77% (exceeds 5% threshold)",
  "systemTests": [
    {
      "name": "test_US001_SD001_code_quality",
      "storyId": "US001",
      "diagramId": "SD001",
      "status": "In Progress",
      "coverage": 85,
      "duration": 150
    }
  ],
  "coverage": {
    "overall": {
      "statements": 85.5,
      "branches": 83.5,
      "functions": 88.5,
      "lines": 85.5
    }
  },
  "duplicationAnalysis": {
    "totalFiles": 37,
    "totalBlocks": 10320,
    "duplicateBlocks": 618,
    "metrics": {
      "totalLines": 12883,
      "duplicateLines": 6670,
      "percentage": 51.77,
      "duplicateInstances": 618
    },
    "duplicates": [
      {
        "hash": "0fb2659f80851e7975c0befbadac0663",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "setupWebSocketServer",
            "startLine": 35,
            "endLine": 58,
            "lines": 24,
            "text": "private setupWebSocketServer() {\n    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);\n\n      ws.on('message', ...",
            "fullText": "private setupWebSocketServer() {\n    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);\n\n      ws.on('message', (data: Buffer) => {\n        try {\n          const message: WSMessage = JSON.parse(data.toString());\n          this.handleMessage(clientId, ws, message);\n        } catch (error) {\n          console.error('[Server] Error parsing message:', error);\n          this.sendError(ws, 'Invalid message format');\n        }\n      });\n\n      ws.on('close', () => {\n        this.handleDisconnect(clientId);\n      });\n\n      ws.on('error', (error) => {\n        console.error(`[Server] WebSocket error for ${clientId}:`, error);\n      });\n    });\n  }"
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "setupWebSocketServer",
            "startLine": 98,
            "endLine": 121,
            "lines": 24,
            "text": "private setupWebSocketServer() {\n    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);\n\n      ws.on('message', ...",
            "fullText": "private setupWebSocketServer() {\n    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);\n\n      ws.on('message', (data: Buffer) => {\n        try {\n          const message: WSMessage = JSON.parse(data.toString());\n          this.handleMessage(clientId, ws, message);\n        } catch (error) {\n          console.error('[Server] Error parsing message:', error);\n          this.sendError(ws, 'Invalid message format');\n        }\n      });\n\n      ws.on('close', () => {\n        this.handleDisconnect(clientId);\n      });\n\n      ws.on('error', (error) => {\n        console.error(`[Server] WebSocket error for ${clientId}:`, error);\n      });\n    });\n  }"
          }
        ],
        "type": "function"
      },
      {
        "hash": "block_085194f0d3cc375fda04f3798bc7943f",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 633-637",
            "startLine": 633,
            "endLine": 637,
            "lines": 5,
            "text": "\n  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n    }",
            "fullText": "\n  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 634-638",
            "startLine": 634,
            "endLine": 638,
            "lines": 5,
            "text": "  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n    }\n    ",
            "fullText": "  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n    }\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 396-400",
            "startLine": 396,
            "endLine": 400,
            "lines": 5,
            "text": "\n  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n    }",
            "fullText": "\n  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 397-401",
            "startLine": 397,
            "endLine": 401,
            "lines": 5,
            "text": "  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n    }\n    ",
            "fullText": "  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n    }\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 249-253",
            "startLine": 249,
            "endLine": 253,
            "lines": 5,
            "text": "\n  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n    }",
            "fullText": "\n  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 250-254",
            "startLine": 250,
            "endLine": 254,
            "lines": 5,
            "text": "  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n    }\n    ",
            "fullText": "  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n    }\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "35749b306e92d61368dbd8094a24b300",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "broadcastToRoom",
            "startLine": 385,
            "endLine": 397,
            "lines": 13,
            "text": "private broadcastToRoom(roomId: string, message: WSMessage, excludeClientId?: string) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;\n\n    room.users.forEach(user => {\n      if (user...",
            "fullText": "private broadcastToRoom(roomId: string, message: WSMessage, excludeClientId?: string) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;\n\n    room.users.forEach(user => {\n      if (user.id !== excludeClientId) {\n        const client = this.clients.get(user.id);\n        if (client) {\n          this.sendToClient(client.ws, message);\n        }\n      }\n    });\n  }"
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "broadcastToRoom",
            "startLine": 426,
            "endLine": 438,
            "lines": 13,
            "text": "private broadcastToRoom(roomId: string, message: WSMessage, excludeClientId?: string) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;\n\n    room.users.forEach(user => {\n      if (user...",
            "fullText": "private broadcastToRoom(roomId: string, message: WSMessage, excludeClientId?: string) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;\n\n    room.users.forEach(user => {\n      if (user.id !== excludeClientId) {\n        const client = this.clients.get(user.id);\n        if (client) {\n          this.sendToClient(client.ws, message);\n        }\n      }\n    });\n  }"
          }
        ],
        "type": "function"
      },
      {
        "hash": "block_2f436793532156d092d3f3d995482903",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 157-161",
            "startLine": 157,
            "endLine": 161,
            "lines": 5,
            "text": "      }\n    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {",
            "fullText": "      }\n    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 76-80",
            "startLine": 76,
            "endLine": 80,
            "lines": 5,
            "text": "      }\n    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {",
            "fullText": "      }\n    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 81-85",
            "startLine": 81,
            "endLine": 85,
            "lines": 5,
            "text": "      }\n    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {",
            "fullText": "      }\n    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/fraud-checker.ts",
            "name": "lines 105-109",
            "startLine": 105,
            "endLine": 109,
            "lines": 5,
            "text": "      }\n    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {",
            "fullText": "      }\n    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 62-66",
            "startLine": 62,
            "endLine": 66,
            "lines": 5,
            "text": "      }\n    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {",
            "fullText": "      }\n    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_936cb361b016f36b9c34176e736a7a9a",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 603-607",
            "startLine": 603,
            "endLine": 607,
            "lines": 5,
            "text": "    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,\n      metadata: {",
            "fullText": "    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,\n      metadata: {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 623-627",
            "startLine": 623,
            "endLine": 627,
            "lines": 5,
            "text": "    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,\n      metadata: {",
            "fullText": "    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,\n      metadata: {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 245-249",
            "startLine": 245,
            "endLine": 249,
            "lines": 5,
            "text": "      \n      await this.sendMessage({\n        type: MessageType.AGENT_MESSAGE,\n        content: report,\n        metadata: {",
            "fullText": "      \n      await this.sendMessage({\n        type: MessageType.AGENT_MESSAGE,\n        content: report,\n        metadata: {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 342-346",
            "startLine": 342,
            "endLine": 346,
            "lines": 5,
            "text": "    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,\n      metadata: {",
            "fullText": "    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,\n      metadata: {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 377-381",
            "startLine": 377,
            "endLine": 381,
            "lines": 5,
            "text": "    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,\n      metadata: {",
            "fullText": "    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,\n      metadata: {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_03240b129f78af9301f4b36119c63def",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 604-608",
            "startLine": 604,
            "endLine": 608,
            "lines": 5,
            "text": "    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,\n      metadata: {\n        agent: this.agentName,",
            "fullText": "    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,\n      metadata: {\n        agent: this.agentName,",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 624-628",
            "startLine": 624,
            "endLine": 628,
            "lines": 5,
            "text": "    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,\n      metadata: {\n        agent: this.agentName,",
            "fullText": "    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,\n      metadata: {\n        agent: this.agentName,",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 246-250",
            "startLine": 246,
            "endLine": 250,
            "lines": 5,
            "text": "      await this.sendMessage({\n        type: MessageType.AGENT_MESSAGE,\n        content: report,\n        metadata: {\n          agent: this.agentName,",
            "fullText": "      await this.sendMessage({\n        type: MessageType.AGENT_MESSAGE,\n        content: report,\n        metadata: {\n          agent: this.agentName,",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 343-347",
            "startLine": 343,
            "endLine": 347,
            "lines": 5,
            "text": "    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,\n      metadata: {\n        agent: this.agentName,",
            "fullText": "    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,\n      metadata: {\n        agent: this.agentName,",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 378-382",
            "startLine": 378,
            "endLine": 382,
            "lines": 5,
            "text": "    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,\n      metadata: {\n        agent: this.agentName,",
            "fullText": "    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,\n      metadata: {\n        agent: this.agentName,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f6cf9b523799fc16952bff834db6a5d0",
        "locations": [
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 209-213",
            "startLine": 209,
            "endLine": 213,
            "lines": 5,
            "text": "    \n    // Simulate API call delay\n    await new Promise(Working on => setTimeout(Working on, 1000));\n    \n    // For demo purposes, return mock tokens",
            "fullText": "    \n    // Simulate API call delay\n    await new Promise(Working on => setTimeout(Working on, 1000));\n    \n    // For demo purposes, return mock tokens",
            "isTextBlock": true
          },
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 210-214",
            "startLine": 210,
            "endLine": 214,
            "lines": 5,
            "text": "    // Simulate API call delay\n    await new Promise(Working on => setTimeout(Working on, 1000));\n    \n    // For demo purposes, return mock tokens\n    // In real implementation, this would be an actual HTT...",
            "fullText": "    // Simulate API call delay\n    await new Promise(Working on => setTimeout(Working on, 1000));\n    \n    // For demo purposes, return mock tokens\n    // In real implementation, this would be an actual HTTP request",
            "isTextBlock": true
          },
          {
            "file": "src/auth/session-auth-manager.ts",
            "name": "lines 258-262",
            "startLine": 258,
            "endLine": 262,
            "lines": 5,
            "text": "      \n      // Simulate session validation request\n      await new Promise(Working on => setTimeout(Working on, 1000));\n      \n      // In real implementation, this would make a request to claude.ai",
            "fullText": "      \n      // Simulate session validation request\n      await new Promise(Working on => setTimeout(Working on, 1000));\n      \n      // In real implementation, this would make a request to claude.ai",
            "isTextBlock": true
          },
          {
            "file": "src/auth/session-auth-manager.ts",
            "name": "lines 259-263",
            "startLine": 259,
            "endLine": 263,
            "lines": 5,
            "text": "      // Simulate session validation request\n      await new Promise(Working on => setTimeout(Working on, 1000));\n      \n      // In real implementation, this would make a request to claude.ai\n      // usin...",
            "fullText": "      // Simulate session validation request\n      await new Promise(Working on => setTimeout(Working on, 1000));\n      \n      // In real implementation, this would make a request to claude.ai\n      // using the session cookies to verify they're still valid",
            "isTextBlock": true
          },
          {
            "file": "src/auth/session-auth-manager.ts",
            "name": "lines 260-264",
            "startLine": 260,
            "endLine": 264,
            "lines": 5,
            "text": "      await new Promise(Working on => setTimeout(Working on, 1000));\n      \n      // In real implementation, this would make a request to claude.ai\n      // using the session cookies to verify they're still...",
            "fullText": "      await new Promise(Working on => setTimeout(Working on, 1000));\n      \n      // In real implementation, this would make a request to claude.ai\n      // using the session cookies to verify they're still valid\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ceab5b4cef2079cf22f82f8010f3bcc3",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 106-110",
            "startLine": 106,
            "endLine": 110,
            "lines": 5,
            "text": "    if (this.wrappedModules.has(moduleName)) return;\n    this.wrappedModules.add(moduleName);\n\n    const self = this;\n",
            "fullText": "    if (this.wrappedModules.has(moduleName)) return;\n    this.wrappedModules.add(moduleName);\n\n    const self = this;\n",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 285-289",
            "startLine": 285,
            "endLine": 289,
            "lines": 5,
            "text": "    if (this.wrappedModules.has(moduleName)) return;\n    this.wrappedModules.add(moduleName);\n\n    const self = this;\n",
            "fullText": "    if (this.wrappedModules.has(moduleName)) return;\n    this.wrappedModules.add(moduleName);\n\n    const self = this;\n",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 361-365",
            "startLine": 361,
            "endLine": 365,
            "lines": 5,
            "text": "    if (this.wrappedModules.has(moduleName)) return;\n    this.wrappedModules.add(moduleName);\n\n    const self = this;\n",
            "fullText": "    if (this.wrappedModules.has(moduleName)) return;\n    this.wrappedModules.add(moduleName);\n\n    const self = this;\n",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 402-406",
            "startLine": 402,
            "endLine": 406,
            "lines": 5,
            "text": "    if (this.wrappedModules.has(moduleName)) return;\n    this.wrappedModules.add(moduleName);\n\n    const self = this;\n",
            "fullText": "    if (this.wrappedModules.has(moduleName)) return;\n    this.wrappedModules.add(moduleName);\n\n    const self = this;\n",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 450-454",
            "startLine": 450,
            "endLine": 454,
            "lines": 5,
            "text": "    if (this.wrappedModules.has(moduleName)) return;\n    this.wrappedModules.add(moduleName);\n\n    const self = this;\n",
            "fullText": "    if (this.wrappedModules.has(moduleName)) return;\n    this.wrappedModules.add(moduleName);\n\n    const self = this;\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_53a87a323bd66e951dfeb007965f8269",
        "locations": [
          {
            "file": "src/all-in-one.ts",
            "name": "lines 191-195",
            "startLine": 191,
            "endLine": 195,
            "lines": 5,
            "text": "}\n\n// CLI entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);",
            "fullText": "}\n\n// CLI entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 285-289",
            "startLine": 285,
            "endLine": 289,
            "lines": 5,
            "text": "}\n\n// CLI Interface\nif (require.main === module) {\n  const args = process.argv.slice(2);",
            "fullText": "}\n\n// CLI Interface\nif (require.main === module) {\n  const args = process.argv.slice(2);",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 315-319",
            "startLine": 315,
            "endLine": 319,
            "lines": 5,
            "text": "}\n\n// CLI entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);",
            "fullText": "}\n\n// CLI entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 319-323",
            "startLine": 319,
            "endLine": 323,
            "lines": 5,
            "text": "}\n\n// CLI entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);",
            "fullText": "}\n\n// CLI entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_d16b1c36b78660764672f008d15f8190",
        "locations": [
          {
            "file": "src/all-in-one.ts",
            "name": "lines 192-196",
            "startLine": 192,
            "endLine": 196,
            "lines": 5,
            "text": "\n// CLI entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  ",
            "fullText": "\n// CLI entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  ",
            "isTextBlock": true
          },
          {
            "file": "src/all-in-one.ts",
            "name": "lines 193-197",
            "startLine": 193,
            "endLine": 197,
            "lines": 5,
            "text": "// CLI entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  \n  // Parse command line arguments",
            "fullText": "// CLI entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  \n  // Parse command line arguments",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 316-320",
            "startLine": 316,
            "endLine": 320,
            "lines": 5,
            "text": "\n// CLI entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  ",
            "fullText": "\n// CLI entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  ",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 320-324",
            "startLine": 320,
            "endLine": 324,
            "lines": 5,
            "text": "\n// CLI entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  ",
            "fullText": "\n// CLI entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_e452d1670c89c19f46bb7a94ebb9fb14",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 190-194",
            "startLine": 190,
            "endLine": 194,
            "lines": 5,
            "text": "    // Keep buffer manageable\n    if (this.storyBuffer.length > 1000) {\n      this.storyBuffer = this.storyBuffer.slice(-500);\n    }\n  }",
            "fullText": "    // Keep buffer manageable\n    if (this.storyBuffer.length > 1000) {\n      this.storyBuffer = this.storyBuffer.slice(-500);\n    }\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 191-195",
            "startLine": 191,
            "endLine": 195,
            "lines": 5,
            "text": "    if (this.storyBuffer.length > 1000) {\n      this.storyBuffer = this.storyBuffer.slice(-500);\n    }\n  }\n",
            "fullText": "    if (this.storyBuffer.length > 1000) {\n      this.storyBuffer = this.storyBuffer.slice(-500);\n    }\n  }\n",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 94-98",
            "startLine": 94,
            "endLine": 98,
            "lines": 5,
            "text": "    // Keep buffer size manageable\n    if (this.storyBuffer.length > 1000) {\n      this.storyBuffer = this.storyBuffer.slice(-500);\n    }\n  }",
            "fullText": "    // Keep buffer size manageable\n    if (this.storyBuffer.length > 1000) {\n      this.storyBuffer = this.storyBuffer.slice(-500);\n    }\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 95-99",
            "startLine": 95,
            "endLine": 99,
            "lines": 5,
            "text": "    if (this.storyBuffer.length > 1000) {\n      this.storyBuffer = this.storyBuffer.slice(-500);\n    }\n  }\n",
            "fullText": "    if (this.storyBuffer.length > 1000) {\n      this.storyBuffer = this.storyBuffer.slice(-500);\n    }\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6f2d19e9117a1aa9bd09b7a37599d876",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 57-61",
            "startLine": 57,
            "endLine": 61,
            "lines": 5,
            "text": "    }\n  }\n\n  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();",
            "fullText": "    }\n  }\n\n  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 58-62",
            "startLine": 58,
            "endLine": 62,
            "lines": 5,
            "text": "    }\n  }\n\n  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();",
            "fullText": "    }\n  }\n\n  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();",
            "isTextBlock": true
          },
          {
            "file": "src/agents/fraud-checker.ts",
            "name": "lines 91-95",
            "startLine": 91,
            "endLine": 95,
            "lines": 5,
            "text": "    }\n  }\n\n  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();",
            "fullText": "    }\n  }\n\n  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 45-49",
            "startLine": 45,
            "endLine": 49,
            "lines": 5,
            "text": "    }\n  }\n\n  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();",
            "fullText": "    }\n  }\n\n  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_344abff425b475913d2db47e9af4fd72",
        "locations": [
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 19-23",
            "startLine": 19,
            "endLine": 23,
            "lines": 5,
            "text": "      temperature?: number;\n      top_p?: number;\n      top_k?: number;\n      num_predict?: number;\n      stop?: string[];",
            "fullText": "      temperature?: number;\n      top_p?: number;\n      top_k?: number;\n      num_predict?: number;\n      stop?: string[];",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 106-110",
            "startLine": 106,
            "endLine": 110,
            "lines": 5,
            "text": "    temperature?: number;\n    top_p?: number;\n    top_k?: number;\n    num_predict?: number;\n    stop?: string[];",
            "fullText": "    temperature?: number;\n    top_p?: number;\n    top_k?: number;\n    num_predict?: number;\n    stop?: string[];",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 40-44",
            "startLine": 40,
            "endLine": 44,
            "lines": 5,
            "text": "    temperature?: number;\n    top_p?: number;\n    top_k?: number;\n    num_predict?: number;\n    stop?: string[];",
            "fullText": "    temperature?: number;\n    top_p?: number;\n    top_k?: number;\n    num_predict?: number;\n    stop?: string[];",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 70-74",
            "startLine": 70,
            "endLine": 74,
            "lines": 5,
            "text": "    temperature?: number;\n    top_p?: number;\n    top_k?: number;\n    num_predict?: number;\n    stop?: string[];",
            "fullText": "    temperature?: number;\n    top_p?: number;\n    top_k?: number;\n    num_predict?: number;\n    stop?: string[];",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_41832030de34023dd4ecffeaf70f3268",
        "locations": [
          {
            "file": "src/auth/local-auth-manager.ts",
            "name": "lines 4-8",
            "startLine": 4,
            "endLine": 8,
            "lines": 5,
            "text": " */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';",
            "fullText": " */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';",
            "isTextBlock": true
          },
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 4-8",
            "startLine": 4,
            "endLine": 8,
            "lines": 5,
            "text": " */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';",
            "fullText": " */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';",
            "isTextBlock": true
          },
          {
            "file": "src/auth/session-auth-manager.ts",
            "name": "lines 4-8",
            "startLine": 4,
            "endLine": 8,
            "lines": 5,
            "text": " */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';",
            "fullText": " */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';",
            "isTextBlock": true
          },
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 4-8",
            "startLine": 4,
            "endLine": 8,
            "lines": 5,
            "text": " */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';",
            "fullText": " */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b6d0986774679e001bf52d8ce936a417",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 34-38",
            "startLine": 34,
            "endLine": 38,
            "lines": 5,
            "text": "\n  private setupWebSocketServer() {\n    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);",
            "fullText": "\n  private setupWebSocketServer() {\n    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 35-39",
            "startLine": 35,
            "endLine": 39,
            "lines": 5,
            "text": "  private setupWebSocketServer() {\n    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);\n",
            "fullText": "  private setupWebSocketServer() {\n    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 97-101",
            "startLine": 97,
            "endLine": 101,
            "lines": 5,
            "text": "\n  private setupWebSocketServer() {\n    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);",
            "fullText": "\n  private setupWebSocketServer() {\n    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 98-102",
            "startLine": 98,
            "endLine": 102,
            "lines": 5,
            "text": "  private setupWebSocketServer() {\n    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);\n",
            "fullText": "  private setupWebSocketServer() {\n    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_788c3361fbd5397f34e9229745ca7388",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 116-120",
            "startLine": 116,
            "endLine": 120,
            "lines": 5,
            "text": "    // Store client connection\n    this.clients.set(clientId, { ws, user, roomId });\n\n    // Add user to room\n    room.users.push(user);",
            "fullText": "    // Store client connection\n    this.clients.set(clientId, { ws, user, roomId });\n\n    // Add user to room\n    room.users.push(user);",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 117-121",
            "startLine": 117,
            "endLine": 121,
            "lines": 5,
            "text": "    this.clients.set(clientId, { ws, user, roomId });\n\n    // Add user to room\n    room.users.push(user);\n",
            "fullText": "    this.clients.set(clientId, { ws, user, roomId });\n\n    // Add user to room\n    room.users.push(user);\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 179-183",
            "startLine": 179,
            "endLine": 183,
            "lines": 5,
            "text": "    // Store client connection\n    this.clients.set(clientId, { ws, user, roomId });\n\n    // Add user to room\n    room.users.push(user);",
            "fullText": "    // Store client connection\n    this.clients.set(clientId, { ws, user, roomId });\n\n    // Add user to room\n    room.users.push(user);",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 180-184",
            "startLine": 180,
            "endLine": 184,
            "lines": 5,
            "text": "    this.clients.set(clientId, { ws, user, roomId });\n\n    // Add user to room\n    room.users.push(user);\n",
            "fullText": "    this.clients.set(clientId, { ws, user, roomId });\n\n    // Add user to room\n    room.users.push(user);\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_58a0abeb641b8f8820c999166e8fa355",
        "locations": [
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 114-118",
            "startLine": 114,
            "endLine": 118,
            "lines": 5,
            "text": "\n      // Step 1: Start the server\n      console.log(chalk.cyan('\\n📡 Starting enhanced chat server...'));\n      this.server.start();\n      console.log(chalk.green(`🔄 Server running on ws://localhost:...",
            "fullText": "\n      // Step 1: Start the server\n      console.log(chalk.cyan('\\n📡 Starting enhanced chat server...'));\n      this.server.start();\n      console.log(chalk.green(`🔄 Server running on ws://localhost:${this.config.serverPort}`));",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 115-119",
            "startLine": 115,
            "endLine": 119,
            "lines": 5,
            "text": "      // Step 1: Start the server\n      console.log(chalk.cyan('\\n📡 Starting enhanced chat server...'));\n      this.server.start();\n      console.log(chalk.green(`🔄 Server running on ws://localhost:$...",
            "fullText": "      // Step 1: Start the server\n      console.log(chalk.cyan('\\n📡 Starting enhanced chat server...'));\n      this.server.start();\n      console.log(chalk.green(`🔄 Server running on ws://localhost:${this.config.serverPort}`));\n      ",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 116-120",
            "startLine": 116,
            "endLine": 120,
            "lines": 5,
            "text": "      console.log(chalk.cyan('\\n📡 Starting enhanced chat server...'));\n      this.server.start();\n      console.log(chalk.green(`🔄 Server running on ws://localhost:${this.config.serverPort}`));\n     ...",
            "fullText": "      console.log(chalk.cyan('\\n📡 Starting enhanced chat server...'));\n      this.server.start();\n      console.log(chalk.green(`🔄 Server running on ws://localhost:${this.config.serverPort}`));\n      \n      // Wait for server to stabilize",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_5d53c0eb08e5fdb13c453525a30f382d",
        "locations": [
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 286-290",
            "startLine": 286,
            "endLine": 290,
            "lines": 5,
            "text": "\n// CLI Interface\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  let config: EnhancedAllInOneConfig = {};",
            "fullText": "\n// CLI Interface\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  let config: EnhancedAllInOneConfig = {};",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 287-291",
            "startLine": 287,
            "endLine": 291,
            "lines": 5,
            "text": "// CLI Interface\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  let config: EnhancedAllInOneConfig = {};\n  ",
            "fullText": "// CLI Interface\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  let config: EnhancedAllInOneConfig = {};\n  ",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 288-292",
            "startLine": 288,
            "endLine": 292,
            "lines": 5,
            "text": "if (require.main === module) {\n  const args = process.argv.slice(2);\n  let config: EnhancedAllInOneConfig = {};\n  \n  // Parse command line arguments",
            "fullText": "if (require.main === module) {\n  const args = process.argv.slice(2);\n  let config: EnhancedAllInOneConfig = {};\n  \n  // Parse command line arguments",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8a0552e57205f84c2c56e5ba59be5e13",
        "locations": [
          {
            "file": "src/server.ts",
            "name": "lines 15-19",
            "startLine": 15,
            "endLine": 19,
            "lines": 5,
            "text": "\n// Ensure config directory exists\nif (!fs.existsSync(CONFIG_DIR)) {\n  fs.mkdirSync(CONFIG_DIR, { recursive: true });\n}",
            "fullText": "\n// Ensure config directory exists\nif (!fs.existsSync(CONFIG_DIR)) {\n  fs.mkdirSync(CONFIG_DIR, { recursive: true });\n}",
            "isTextBlock": true
          },
          {
            "file": "src/server.ts",
            "name": "lines 16-20",
            "startLine": 16,
            "endLine": 20,
            "lines": 5,
            "text": "// Ensure config directory exists\nif (!fs.existsSync(CONFIG_DIR)) {\n  fs.mkdirSync(CONFIG_DIR, { recursive: true });\n}\n",
            "fullText": "// Ensure config directory exists\nif (!fs.existsSync(CONFIG_DIR)) {\n  fs.mkdirSync(CONFIG_DIR, { recursive: true });\n}\n",
            "isTextBlock": true
          },
          {
            "file": "src/server.ts",
            "name": "lines 17-21",
            "startLine": 17,
            "endLine": 21,
            "lines": 5,
            "text": "if (!fs.existsSync(CONFIG_DIR)) {\n  fs.mkdirSync(CONFIG_DIR, { recursive: true });\n}\n\n// Create default room configuration if it doesn't exist",
            "fullText": "if (!fs.existsSync(CONFIG_DIR)) {\n  fs.mkdirSync(CONFIG_DIR, { recursive: true });\n}\n\n// Create default room configuration if it doesn't exist",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_41344737145ad6f6bf6b3c018e43b27e",
        "locations": [
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 206-210",
            "startLine": 206,
            "endLine": 210,
            "lines": 5,
            "text": "    // Moved hello check to later to avoid overriding specific questions\n\n    if (lowerMessage.includes('thank')) {\n      return 'You\\'re welcome! Happy to help! 😊';\n    }",
            "fullText": "    // Moved hello check to later to avoid overriding specific questions\n\n    if (lowerMessage.includes('thank')) {\n      return 'You\\'re welcome! Happy to help! 😊';\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 207-211",
            "startLine": 207,
            "endLine": 211,
            "lines": 5,
            "text": "\n    if (lowerMessage.includes('thank')) {\n      return 'You\\'re welcome! Happy to help! 😊';\n    }\n",
            "fullText": "\n    if (lowerMessage.includes('thank')) {\n      return 'You\\'re welcome! Happy to help! 😊';\n    }\n",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 208-212",
            "startLine": 208,
            "endLine": 212,
            "lines": 5,
            "text": "    if (lowerMessage.includes('thank')) {\n      return 'You\\'re welcome! Happy to help! 😊';\n    }\n\n    // Programming questions",
            "fullText": "    if (lowerMessage.includes('thank')) {\n      return 'You\\'re welcome! Happy to help! 😊';\n    }\n\n    // Programming questions",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f7f1c23fca4b973c566e545c2e9fa41d",
        "locations": [
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 224-228",
            "startLine": 224,
            "endLine": 228,
            "lines": 5,
            "text": "\n    // Generic greetings (after specific checks)\n    if (lowerMessage.includes('hello') || lowerMessage.includes('hi')) {\n      return `Hello! 👋 How can I assist you today?`;\n    }",
            "fullText": "\n    // Generic greetings (after specific checks)\n    if (lowerMessage.includes('hello') || lowerMessage.includes('hi')) {\n      return `Hello! 👋 How can I assist you today?`;\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 225-229",
            "startLine": 225,
            "endLine": 229,
            "lines": 5,
            "text": "    // Generic greetings (after specific checks)\n    if (lowerMessage.includes('hello') || lowerMessage.includes('hi')) {\n      return `Hello! 👋 How can I assist you today?`;\n    }\n",
            "fullText": "    // Generic greetings (after specific checks)\n    if (lowerMessage.includes('hello') || lowerMessage.includes('hi')) {\n      return `Hello! 👋 How can I assist you today?`;\n    }\n",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 226-230",
            "startLine": 226,
            "endLine": 230,
            "lines": 5,
            "text": "    if (lowerMessage.includes('hello') || lowerMessage.includes('hi')) {\n      return `Hello! 👋 How can I assist you today?`;\n    }\n\n    // Default response",
            "fullText": "    if (lowerMessage.includes('hello') || lowerMessage.includes('hi')) {\n      return `Hello! 👋 How can I assist you today?`;\n    }\n\n    // Default response",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_632487b16ff3524d8446abc80ee98748",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 187-191",
            "startLine": 187,
            "endLine": 191,
            "lines": 5,
            "text": "    \n    // Show typing indicator if enabled\n    if (this.config.responseConfig?.showTypingIndicator) {\n      await this.showTypingIndicator();\n    }",
            "fullText": "    \n    // Show typing indicator if enabled\n    if (this.config.responseConfig?.showTypingIndicator) {\n      await this.showTypingIndicator();\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 188-192",
            "startLine": 188,
            "endLine": 192,
            "lines": 5,
            "text": "    // Show typing indicator if enabled\n    if (this.config.responseConfig?.showTypingIndicator) {\n      await this.showTypingIndicator();\n    }\n    ",
            "fullText": "    // Show typing indicator if enabled\n    if (this.config.responseConfig?.showTypingIndicator) {\n      await this.showTypingIndicator();\n    }\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 189-193",
            "startLine": 189,
            "endLine": 193,
            "lines": 5,
            "text": "    if (this.config.responseConfig?.showTypingIndicator) {\n      await this.showTypingIndicator();\n    }\n    \n    // Apply response delay if configured",
            "fullText": "    if (this.config.responseConfig?.showTypingIndicator) {\n      await this.showTypingIndicator();\n    }\n    \n    // Apply response delay if configured",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "bea3a7d7b1d3ab1f188c146b726d0d77",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "startReporting",
            "startLine": 223,
            "endLine": 227,
            "lines": 5,
            "text": "private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }",
            "fullText": "private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }"
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "startReporting",
            "startLine": 208,
            "endLine": 212,
            "lines": 5,
            "text": "private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }",
            "fullText": "private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }"
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "startReporting",
            "startLine": 126,
            "endLine": 130,
            "lines": 5,
            "text": "private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }",
            "fullText": "private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }"
          }
        ],
        "type": "function"
      },
      {
        "hash": "block_de0fba6afc22595ad5a332bd0cbac053",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 83-87",
            "startLine": 83,
            "endLine": 87,
            "lines": 5,
            "text": "  ) {\n    super(serverUrl, roomId, agentName);\n    \n    this.config = {\n      reportInterval: config.reportInterval || 60000,",
            "fullText": "  ) {\n    super(serverUrl, roomId, agentName);\n    \n    this.config = {\n      reportInterval: config.reportInterval || 60000,",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 41-45",
            "startLine": 41,
            "endLine": 45,
            "lines": 5,
            "text": "  ) {\n    super(serverUrl, roomId, agentName);\n    \n    this.config = {\n      reportInterval: config.reportInterval || 60000, // 1 minute",
            "fullText": "  ) {\n    super(serverUrl, roomId, agentName);\n    \n    this.config = {\n      reportInterval: config.reportInterval || 60000, // 1 minute",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 29-33",
            "startLine": 29,
            "endLine": 33,
            "lines": 5,
            "text": "  ) {\n    super(serverUrl, roomId, agentName);\n    \n    this.config = {\n      reportInterval: config.reportInterval || 60000, // 1 minute default",
            "fullText": "  ) {\n    super(serverUrl, roomId, agentName);\n    \n    this.config = {\n      reportInterval: config.reportInterval || 60000, // 1 minute default",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_1176eccaf2e1de68f07b786de9a23df1",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 158-162",
            "startLine": 158,
            "endLine": 162,
            "lines": 5,
            "text": "    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    // Track all messages",
            "fullText": "    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    // Track all messages",
            "isTextBlock": true
          },
          {
            "file": "src/agents/fraud-checker.ts",
            "name": "lines 106-110",
            "startLine": 106,
            "endLine": 110,
            "lines": 5,
            "text": "    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    // Skip system messages and own messages",
            "fullText": "    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    // Skip system messages and own messages",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 63-67",
            "startLine": 63,
            "endLine": 67,
            "lines": 5,
            "text": "    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    // Track all messages for story analysis",
            "fullText": "    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    // Track all messages for story analysis",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_803b5fb104779ba0c41b0a24752eb590",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 160-164",
            "startLine": 160,
            "endLine": 164,
            "lines": 5,
            "text": "\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    // Track all messages\n    this.trackEvent(message);\n    ",
            "fullText": "\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    // Track all messages\n    this.trackEvent(message);\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 65-69",
            "startLine": 65,
            "endLine": 69,
            "lines": 5,
            "text": "\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    // Track all messages for story analysis\n    this.trackEvent(message);\n    ",
            "fullText": "\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    // Track all messages for story analysis\n    this.trackEvent(message);\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 66-70",
            "startLine": 66,
            "endLine": 70,
            "lines": 5,
            "text": "  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    // Track all messages for story analysis\n    this.trackEvent(message);\n    \n    // Check for story requests",
            "fullText": "  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    // Track all messages for story analysis\n    this.trackEvent(message);\n    \n    // Check for story requests",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_e5bc66dab775eab98ec4fd64f2a31307",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 162-166",
            "startLine": 162,
            "endLine": 166,
            "lines": 5,
            "text": "    // Track all messages\n    this.trackEvent(message);\n    \n    if (message.type === MessageType.USER_MESSAGE) {\n      const content = message.content.toLowerCase();",
            "fullText": "    // Track all messages\n    this.trackEvent(message);\n    \n    if (message.type === MessageType.USER_MESSAGE) {\n      const content = message.content.toLowerCase();",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 163-167",
            "startLine": 163,
            "endLine": 167,
            "lines": 5,
            "text": "    this.trackEvent(message);\n    \n    if (message.type === MessageType.USER_MESSAGE) {\n      const content = message.content.toLowerCase();\n      ",
            "fullText": "    this.trackEvent(message);\n    \n    if (message.type === MessageType.USER_MESSAGE) {\n      const content = message.content.toLowerCase();\n      ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 68-72",
            "startLine": 68,
            "endLine": 72,
            "lines": 5,
            "text": "    this.trackEvent(message);\n    \n    // Check for story requests\n    if (message.type === MessageType.USER_MESSAGE) {\n      const content = message.content.toLowerCase();",
            "fullText": "    this.trackEvent(message);\n    \n    // Check for story requests\n    if (message.type === MessageType.USER_MESSAGE) {\n      const content = message.content.toLowerCase();",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_4b8c7b7f888f931db1a9c26e477fbf2f",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 221-225",
            "startLine": 221,
            "endLine": 225,
            "lines": 5,
            "text": "  }\n\n  private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();",
            "fullText": "  }\n\n  private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 206-210",
            "startLine": 206,
            "endLine": 210,
            "lines": 5,
            "text": "  }\n\n  private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();",
            "fullText": "  }\n\n  private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 124-128",
            "startLine": 124,
            "endLine": 128,
            "lines": 5,
            "text": "  }\n\n  private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();",
            "fullText": "  }\n\n  private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_597bc65acb0c201c89aae991ba9368fc",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 222-226",
            "startLine": 222,
            "endLine": 226,
            "lines": 5,
            "text": "\n  private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);",
            "fullText": "\n  private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 207-211",
            "startLine": 207,
            "endLine": 211,
            "lines": 5,
            "text": "\n  private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);",
            "fullText": "\n  private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 125-129",
            "startLine": 125,
            "endLine": 129,
            "lines": 5,
            "text": "\n  private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);",
            "fullText": "\n  private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_bea3a7d7b1d3ab1f188c146b726d0d77",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 223-227",
            "startLine": 223,
            "endLine": 227,
            "lines": 5,
            "text": "  private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }",
            "fullText": "  private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 208-212",
            "startLine": 208,
            "endLine": 212,
            "lines": 5,
            "text": "  private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }",
            "fullText": "  private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 126-130",
            "startLine": 126,
            "endLine": 130,
            "lines": 5,
            "text": "  private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }",
            "fullText": "  private startReporting(): void {\n    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_983488e02ea9e7e718ee54f5f2779922",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 224-228",
            "startLine": 224,
            "endLine": 228,
            "lines": 5,
            "text": "    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }\n",
            "fullText": "    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }\n",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 209-213",
            "startLine": 209,
            "endLine": 213,
            "lines": 5,
            "text": "    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }\n",
            "fullText": "    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }\n",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 127-131",
            "startLine": 127,
            "endLine": 131,
            "lines": 5,
            "text": "    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }\n",
            "fullText": "    this.reportTimer = setInterval(() => {\n      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b0142819f0c48eb76a5a9fe7dfb913bb",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 225-229",
            "startLine": 225,
            "endLine": 229,
            "lines": 5,
            "text": "      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }\n\n  private async generatePeriodicReport(): Promise<void> {",
            "fullText": "      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }\n\n  private async generatePeriodicReport(): Promise<void> {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 210-214",
            "startLine": 210,
            "endLine": 214,
            "lines": 5,
            "text": "      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }\n\n  private async generatePeriodicReport(): Promise<void> {",
            "fullText": "      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }\n\n  private async generatePeriodicReport(): Promise<void> {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 128-132",
            "startLine": 128,
            "endLine": 132,
            "lines": 5,
            "text": "      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }\n\n  private async generatePeriodicReport(): Promise<void> {",
            "fullText": "      this.generatePeriodicReport();\n    }, this.config.reportInterval!);\n  }\n\n  private async generatePeriodicReport(): Promise<void> {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0f459444fa29652a54bcab7a9cad6991",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 309-313",
            "startLine": 309,
            "endLine": 313,
            "lines": 5,
            "text": "    \n    // Check naming convention\n    if (!this.testsFollowNamingConvention(tests)) {\n      failureReasons.push('Tests do not follow naming convention');\n    }",
            "fullText": "    \n    // Check naming convention\n    if (!this.testsFollowNamingConvention(tests)) {\n      failureReasons.push('Tests do not follow naming convention');\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 310-314",
            "startLine": 310,
            "endLine": 314,
            "lines": 5,
            "text": "    // Check naming convention\n    if (!this.testsFollowNamingConvention(tests)) {\n      failureReasons.push('Tests do not follow naming convention');\n    }\n    ",
            "fullText": "    // Check naming convention\n    if (!this.testsFollowNamingConvention(tests)) {\n      failureReasons.push('Tests do not follow naming convention');\n    }\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 311-315",
            "startLine": 311,
            "endLine": 315,
            "lines": 5,
            "text": "    if (!this.testsFollowNamingConvention(tests)) {\n      failureReasons.push('Tests do not follow naming convention');\n    }\n    \n    // Check test count",
            "fullText": "    if (!this.testsFollowNamingConvention(tests)) {\n      failureReasons.push('Tests do not follow naming convention');\n    }\n    \n    // Check test count",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_5ec855ca959f0aeab713d7435760ab8e",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 314-318",
            "startLine": 314,
            "endLine": 318,
            "lines": 5,
            "text": "    \n    // Check test count\n    if (tests.length < MIN_TESTS) {\n      failureReasons.push(`Insufficient tests (found: ${tests.length}, required: ${MIN_TESTS})`);\n    }",
            "fullText": "    \n    // Check test count\n    if (tests.length < MIN_TESTS) {\n      failureReasons.push(`Insufficient tests (found: ${tests.length}, required: ${MIN_TESTS})`);\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 315-319",
            "startLine": 315,
            "endLine": 319,
            "lines": 5,
            "text": "    // Check test count\n    if (tests.length < MIN_TESTS) {\n      failureReasons.push(`Insufficient tests (found: ${tests.length}, required: ${MIN_TESTS})`);\n    }\n    ",
            "fullText": "    // Check test count\n    if (tests.length < MIN_TESTS) {\n      failureReasons.push(`Insufficient tests (found: ${tests.length}, required: ${MIN_TESTS})`);\n    }\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 316-320",
            "startLine": 316,
            "endLine": 320,
            "lines": 5,
            "text": "    if (tests.length < MIN_TESTS) {\n      failureReasons.push(`Insufficient tests (found: ${tests.length}, required: ${MIN_TESTS})`);\n    }\n    \n    // Check coverage",
            "fullText": "    if (tests.length < MIN_TESTS) {\n      failureReasons.push(`Insufficient tests (found: ${tests.length}, required: ${MIN_TESTS})`);\n    }\n    \n    // Check coverage",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a58f3330c2c26918edda52b8e2304844",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 319-323",
            "startLine": 319,
            "endLine": 323,
            "lines": 5,
            "text": "    \n    // Check coverage\n    if (coverage.overall.statements < MIN_COVERAGE) {\n      failureReasons.push(`Coverage too low (${coverage.overall.statements.toFixed(1)}% < ${MIN_COVERAGE}%)`);\n    }",
            "fullText": "    \n    // Check coverage\n    if (coverage.overall.statements < MIN_COVERAGE) {\n      failureReasons.push(`Coverage too low (${coverage.overall.statements.toFixed(1)}% < ${MIN_COVERAGE}%)`);\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 320-324",
            "startLine": 320,
            "endLine": 324,
            "lines": 5,
            "text": "    // Check coverage\n    if (coverage.overall.statements < MIN_COVERAGE) {\n      failureReasons.push(`Coverage too low (${coverage.overall.statements.toFixed(1)}% < ${MIN_COVERAGE}%)`);\n    }\n    ",
            "fullText": "    // Check coverage\n    if (coverage.overall.statements < MIN_COVERAGE) {\n      failureReasons.push(`Coverage too low (${coverage.overall.statements.toFixed(1)}% < ${MIN_COVERAGE}%)`);\n    }\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 321-325",
            "startLine": 321,
            "endLine": 325,
            "lines": 5,
            "text": "    if (coverage.overall.statements < MIN_COVERAGE) {\n      failureReasons.push(`Coverage too low (${coverage.overall.statements.toFixed(1)}% < ${MIN_COVERAGE}%)`);\n    }\n    \n    // Check failed test...",
            "fullText": "    if (coverage.overall.statements < MIN_COVERAGE) {\n      failureReasons.push(`Coverage too low (${coverage.overall.statements.toFixed(1)}% < ${MIN_COVERAGE}%)`);\n    }\n    \n    // Check failed tests",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_03e2edd21d4d822b694fadc205f595ad",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 373-377",
            "startLine": 373,
            "endLine": 377,
            "lines": 5,
            "text": "    \n    // Validate each diagram\n    testsByDiagram.forEach((diagTests, diagramId) => {\n      const diagram = this.sequenceDiagrams.get(diagramId);\n      if (!diagram) return;",
            "fullText": "    \n    // Validate each diagram\n    testsByDiagram.forEach((diagTests, diagramId) => {\n      const diagram = this.sequenceDiagrams.get(diagramId);\n      if (!diagram) return;",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 374-378",
            "startLine": 374,
            "endLine": 378,
            "lines": 5,
            "text": "    // Validate each diagram\n    testsByDiagram.forEach((diagTests, diagramId) => {\n      const diagram = this.sequenceDiagrams.get(diagramId);\n      if (!diagram) return;\n      ",
            "fullText": "    // Validate each diagram\n    testsByDiagram.forEach((diagTests, diagramId) => {\n      const diagram = this.sequenceDiagrams.get(diagramId);\n      if (!diagram) return;\n      ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 375-379",
            "startLine": 375,
            "endLine": 379,
            "lines": 5,
            "text": "    testsByDiagram.forEach((diagTests, diagramId) => {\n      const diagram = this.sequenceDiagrams.get(diagramId);\n      if (!diagram) return;\n      \n      // Collect all external calls from tests",
            "fullText": "    testsByDiagram.forEach((diagTests, diagramId) => {\n      const diagram = this.sequenceDiagrams.get(diagramId);\n      if (!diagram) return;\n      \n      // Collect all external calls from tests",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a5660c184695caa20c660bedcd01844d",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 632-636",
            "startLine": 632,
            "endLine": 636,
            "lines": 5,
            "text": "  }\n\n  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);",
            "fullText": "  }\n\n  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 395-399",
            "startLine": 395,
            "endLine": 399,
            "lines": 5,
            "text": "  }\n\n  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);",
            "fullText": "  }\n\n  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 248-252",
            "startLine": 248,
            "endLine": 252,
            "lines": 5,
            "text": "  }\n\n  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);",
            "fullText": "  }\n\n  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_737b42358d91c787e723a589de806f1e",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 635-639",
            "startLine": 635,
            "endLine": 639,
            "lines": 5,
            "text": "    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n    }\n    \n    // Generate final report",
            "fullText": "    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n    }\n    \n    // Generate final report",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 398-402",
            "startLine": 398,
            "endLine": 402,
            "lines": 5,
            "text": "    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n    }\n    \n    // Generate final report",
            "fullText": "    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n    }\n    \n    // Generate final report",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 251-255",
            "startLine": 251,
            "endLine": 255,
            "lines": 5,
            "text": "    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n    }\n    \n    // Generate final report",
            "fullText": "    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n    }\n    \n    // Generate final report",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9ee243fd9fa45624c952585701a52427",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 636-640",
            "startLine": 636,
            "endLine": 640,
            "lines": 5,
            "text": "      clearInterval(this.reportTimer);\n    }\n    \n    // Generate final report\n    await this.generatePeriodicReport();",
            "fullText": "      clearInterval(this.reportTimer);\n    }\n    \n    // Generate final report\n    await this.generatePeriodicReport();",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 399-403",
            "startLine": 399,
            "endLine": 403,
            "lines": 5,
            "text": "      clearInterval(this.reportTimer);\n    }\n    \n    // Generate final report\n    await this.generatePeriodicReport();",
            "fullText": "      clearInterval(this.reportTimer);\n    }\n    \n    // Generate final report\n    await this.generatePeriodicReport();",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 252-256",
            "startLine": 252,
            "endLine": 256,
            "lines": 5,
            "text": "      clearInterval(this.reportTimer);\n    }\n    \n    // Generate final report\n    await this.generatePeriodicReport();",
            "fullText": "      clearInterval(this.reportTimer);\n    }\n    \n    // Generate final report\n    await this.generatePeriodicReport();",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "b3c7b3e7ad14d3f0ca2fc00a811963e4",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "ensureLogDir",
            "startLine": 54,
            "endLine": 58,
            "lines": 5,
            "text": "private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }",
            "fullText": "private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }"
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "ensureLogDir",
            "startLine": 55,
            "endLine": 59,
            "lines": 5,
            "text": "private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }",
            "fullText": "private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }"
          },
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "ensureLogDir",
            "startLine": 59,
            "endLine": 63,
            "lines": 5,
            "text": "private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }",
            "fullText": "private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }"
          }
        ],
        "type": "function"
      },
      {
        "hash": "block_6440b522b719fdb67a3774f81854a9b5",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 52-56",
            "startLine": 52,
            "endLine": 56,
            "lines": 5,
            "text": "  }\n\n  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });",
            "fullText": "  }\n\n  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 53-57",
            "startLine": 53,
            "endLine": 57,
            "lines": 5,
            "text": "  }\n\n  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });",
            "fullText": "  }\n\n  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 57-61",
            "startLine": 57,
            "endLine": 61,
            "lines": 5,
            "text": "  }\n\n  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });",
            "fullText": "  }\n\n  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ab4e8bd041f64616f1afd5c86cd7ffe9",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 53-57",
            "startLine": 53,
            "endLine": 57,
            "lines": 5,
            "text": "\n  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }",
            "fullText": "\n  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 54-58",
            "startLine": 54,
            "endLine": 58,
            "lines": 5,
            "text": "\n  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }",
            "fullText": "\n  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 58-62",
            "startLine": 58,
            "endLine": 62,
            "lines": 5,
            "text": "\n  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }",
            "fullText": "\n  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b3c7b3e7ad14d3f0ca2fc00a811963e4",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 54-58",
            "startLine": 54,
            "endLine": 58,
            "lines": 5,
            "text": "  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }",
            "fullText": "  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 55-59",
            "startLine": 55,
            "endLine": 59,
            "lines": 5,
            "text": "  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }",
            "fullText": "  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 59-63",
            "startLine": 59,
            "endLine": 63,
            "lines": 5,
            "text": "  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }",
            "fullText": "  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_cefc0a2a9cf3f155638c45fbc0beaa47",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 55-59",
            "startLine": 55,
            "endLine": 59,
            "lines": 5,
            "text": "    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }\n",
            "fullText": "    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }\n",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 56-60",
            "startLine": 56,
            "endLine": 60,
            "lines": 5,
            "text": "    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }\n",
            "fullText": "    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }\n",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 60-64",
            "startLine": 60,
            "endLine": 64,
            "lines": 5,
            "text": "    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }\n",
            "fullText": "    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {\n      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8d5ed591ea5d017352a593599168ed15",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 136-140",
            "startLine": 136,
            "endLine": 140,
            "lines": 5,
            "text": "    \n    // Keep history manageable\n    if (this.metricsHistory.length > 100) {\n      this.metricsHistory = this.metricsHistory.slice(-50);\n    }",
            "fullText": "    \n    // Keep history manageable\n    if (this.metricsHistory.length > 100) {\n      this.metricsHistory = this.metricsHistory.slice(-50);\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 137-141",
            "startLine": 137,
            "endLine": 141,
            "lines": 5,
            "text": "    // Keep history manageable\n    if (this.metricsHistory.length > 100) {\n      this.metricsHistory = this.metricsHistory.slice(-50);\n    }\n    ",
            "fullText": "    // Keep history manageable\n    if (this.metricsHistory.length > 100) {\n      this.metricsHistory = this.metricsHistory.slice(-50);\n    }\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 138-142",
            "startLine": 138,
            "endLine": 142,
            "lines": 5,
            "text": "    if (this.metricsHistory.length > 100) {\n      this.metricsHistory = this.metricsHistory.slice(-50);\n    }\n    \n    // Check for alerts",
            "fullText": "    if (this.metricsHistory.length > 100) {\n      this.metricsHistory = this.metricsHistory.slice(-50);\n    }\n    \n    // Check for alerts",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_bc99d14dc0012ace2752d9ba6613dbf8",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 153-157",
            "startLine": 153,
            "endLine": 157,
            "lines": 5,
            "text": "    \n    // CPU usage alert\n    if (metrics.cpu.usage > this.config.alertThresholds!.cpuUsage!) {\n      alerts.push(`CPU usage high: ${metrics.cpu.usage.toFixed(1)}%`);\n    }",
            "fullText": "    \n    // CPU usage alert\n    if (metrics.cpu.usage > this.config.alertThresholds!.cpuUsage!) {\n      alerts.push(`CPU usage high: ${metrics.cpu.usage.toFixed(1)}%`);\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 154-158",
            "startLine": 154,
            "endLine": 158,
            "lines": 5,
            "text": "    // CPU usage alert\n    if (metrics.cpu.usage > this.config.alertThresholds!.cpuUsage!) {\n      alerts.push(`CPU usage high: ${metrics.cpu.usage.toFixed(1)}%`);\n    }\n    ",
            "fullText": "    // CPU usage alert\n    if (metrics.cpu.usage > this.config.alertThresholds!.cpuUsage!) {\n      alerts.push(`CPU usage high: ${metrics.cpu.usage.toFixed(1)}%`);\n    }\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 155-159",
            "startLine": 155,
            "endLine": 159,
            "lines": 5,
            "text": "    if (metrics.cpu.usage > this.config.alertThresholds!.cpuUsage!) {\n      alerts.push(`CPU usage high: ${metrics.cpu.usage.toFixed(1)}%`);\n    }\n    \n    // Memory usage alert",
            "fullText": "    if (metrics.cpu.usage > this.config.alertThresholds!.cpuUsage!) {\n      alerts.push(`CPU usage high: ${metrics.cpu.usage.toFixed(1)}%`);\n    }\n    \n    // Memory usage alert",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ea93fb45c3d4591c248c25752affc146",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 164-168",
            "startLine": 164,
            "endLine": 168,
            "lines": 5,
            "text": "    \n    // Temperature alert\n    if (metrics.cpu.temperature && metrics.cpu.temperature > this.config.alertThresholds!.temperature!) {\n      alerts.push(`CPU temperature high: ${metrics.cpu.temperatu...",
            "fullText": "    \n    // Temperature alert\n    if (metrics.cpu.temperature && metrics.cpu.temperature > this.config.alertThresholds!.temperature!) {\n      alerts.push(`CPU temperature high: ${metrics.cpu.temperature}°C`);\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 165-169",
            "startLine": 165,
            "endLine": 169,
            "lines": 5,
            "text": "    // Temperature alert\n    if (metrics.cpu.temperature && metrics.cpu.temperature > this.config.alertThresholds!.temperature!) {\n      alerts.push(`CPU temperature high: ${metrics.cpu.temperature}°C...",
            "fullText": "    // Temperature alert\n    if (metrics.cpu.temperature && metrics.cpu.temperature > this.config.alertThresholds!.temperature!) {\n      alerts.push(`CPU temperature high: ${metrics.cpu.temperature}°C`);\n    }\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 166-170",
            "startLine": 166,
            "endLine": 170,
            "lines": 5,
            "text": "    if (metrics.cpu.temperature && metrics.cpu.temperature > this.config.alertThresholds!.temperature!) {\n      alerts.push(`CPU temperature high: ${metrics.cpu.temperature}°C`);\n    }\n    \n    // GPU...",
            "fullText": "    if (metrics.cpu.temperature && metrics.cpu.temperature > this.config.alertThresholds!.temperature!) {\n      alerts.push(`CPU temperature high: ${metrics.cpu.temperature}°C`);\n    }\n    \n    // GPU alerts",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6ccc20d4e2229250d5f86d5e5292bc54",
        "locations": [
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 64-68",
            "startLine": 64,
            "endLine": 68,
            "lines": 5,
            "text": "    \n    // Setup interceptors if enabled\n    if (this.config.enableInterception) {\n      this.setupInterceptors();\n    }",
            "fullText": "    \n    // Setup interceptors if enabled\n    if (this.config.enableInterception) {\n      this.setupInterceptors();\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 65-69",
            "startLine": 65,
            "endLine": 69,
            "lines": 5,
            "text": "    // Setup interceptors if enabled\n    if (this.config.enableInterception) {\n      this.setupInterceptors();\n    }\n    ",
            "fullText": "    // Setup interceptors if enabled\n    if (this.config.enableInterception) {\n      this.setupInterceptors();\n    }\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 66-70",
            "startLine": 66,
            "endLine": 70,
            "lines": 5,
            "text": "    if (this.config.enableInterception) {\n      this.setupInterceptors();\n    }\n    \n    // Start periodic reporting",
            "fullText": "    if (this.config.enableInterception) {\n      this.setupInterceptors();\n    }\n    \n    // Start periodic reporting",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b714f906d7f3f342ae697666d546e5ea",
        "locations": [
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 104-108",
            "startLine": 104,
            "endLine": 108,
            "lines": 5,
            "text": "    \n    // Listen for network events\n    networkInterceptor.on('network', (log) => {\n      this.trackAPICall(log);\n    });",
            "fullText": "    \n    // Listen for network events\n    networkInterceptor.on('network', (log) => {\n      this.trackAPICall(log);\n    });",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 105-109",
            "startLine": 105,
            "endLine": 109,
            "lines": 5,
            "text": "    // Listen for network events\n    networkInterceptor.on('network', (log) => {\n      this.trackAPICall(log);\n    });\n    ",
            "fullText": "    // Listen for network events\n    networkInterceptor.on('network', (log) => {\n      this.trackAPICall(log);\n    });\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 106-110",
            "startLine": 106,
            "endLine": 110,
            "lines": 5,
            "text": "    networkInterceptor.on('network', (log) => {\n      this.trackAPICall(log);\n    });\n    \n    // Enable database interception for external databases",
            "fullText": "    networkInterceptor.on('network', (log) => {\n      this.trackAPICall(log);\n    });\n    \n    // Enable database interception for external databases",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_facaf801afb10908a23bc441c93fd013",
        "locations": [
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 244-248",
            "startLine": 244,
            "endLine": 248,
            "lines": 5,
            "text": "      });\n      \n      await this.sendMessage({\n        type: MessageType.AGENT_MESSAGE,\n        content: report,",
            "fullText": "      });\n      \n      await this.sendMessage({\n        type: MessageType.AGENT_MESSAGE,\n        content: report,",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 341-345",
            "startLine": 341,
            "endLine": 345,
            "lines": 5,
            "text": "    });\n    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,",
            "fullText": "    });\n    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 376-380",
            "startLine": 376,
            "endLine": 380,
            "lines": 5,
            "text": "    });\n    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,",
            "fullText": "    });\n    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: report,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_bcccc5b4783632877923bdf63c50723c",
        "locations": [
          {
            "file": "src/agents/fraud-checker.ts",
            "name": "lines 172-176",
            "startLine": 172,
            "endLine": 176,
            "lines": 5,
            "text": "    \n    // Log to file if enabled\n    if (this.config.logSuspiciousActivity) {\n      this.logActivity(activity);\n    }",
            "fullText": "    \n    // Log to file if enabled\n    if (this.config.logSuspiciousActivity) {\n      this.logActivity(activity);\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/fraud-checker.ts",
            "name": "lines 173-177",
            "startLine": 173,
            "endLine": 177,
            "lines": 5,
            "text": "    // Log to file if enabled\n    if (this.config.logSuspiciousActivity) {\n      this.logActivity(activity);\n    }\n    ",
            "fullText": "    // Log to file if enabled\n    if (this.config.logSuspiciousActivity) {\n      this.logActivity(activity);\n    }\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/fraud-checker.ts",
            "name": "lines 174-178",
            "startLine": 174,
            "endLine": 178,
            "lines": 5,
            "text": "    if (this.config.logSuspiciousActivity) {\n      this.logActivity(activity);\n    }\n    \n    // Alert if threshold exceeded",
            "fullText": "    if (this.config.logSuspiciousActivity) {\n      this.logActivity(activity);\n    }\n    \n    // Alert if threshold exceeded",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3215e4c2818844d2f2e9fd34aeccfa8d",
        "locations": [
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 331-335",
            "startLine": 331,
            "endLine": 335,
            "lines": 5,
            "text": "    const sizes = ['B', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 +...",
            "fullText": "    const sizes = ['B', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 479-483",
            "startLine": 479,
            "endLine": 483,
            "lines": 5,
            "text": "    const sizes = ['B', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 +...",
            "fullText": "    const sizes = ['B', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 428-432",
            "startLine": 428,
            "endLine": 432,
            "lines": 5,
            "text": "    const sizes = ['B', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 +...",
            "fullText": "    const sizes = ['B', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n  }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a415c8c84925a3d05c9d3631a95a640f",
        "locations": [
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 102-106",
            "startLine": 102,
            "endLine": 106,
            "lines": 5,
            "text": "    \n    // Technical theme detection\n    if (lowerContent.match(/code|program|bug|error|api|database|server|client/)) {\n      return 'technical';\n    }",
            "fullText": "    \n    // Technical theme detection\n    if (lowerContent.match(/code|program|bug|error|api|database|server|client/)) {\n      return 'technical';\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 103-107",
            "startLine": 103,
            "endLine": 107,
            "lines": 5,
            "text": "    // Technical theme detection\n    if (lowerContent.match(/code|program|bug|error|api|database|server|client/)) {\n      return 'technical';\n    }\n    ",
            "fullText": "    // Technical theme detection\n    if (lowerContent.match(/code|program|bug|error|api|database|server|client/)) {\n      return 'technical';\n    }\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 104-108",
            "startLine": 104,
            "endLine": 108,
            "lines": 5,
            "text": "    if (lowerContent.match(/code|program|bug|error|api|database|server|client/)) {\n      return 'technical';\n    }\n    \n    // Social theme detection",
            "fullText": "    if (lowerContent.match(/code|program|bug|error|api|database|server|client/)) {\n      return 'technical';\n    }\n    \n    // Social theme detection",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_d2e903200a054fa8fff8a7eaef4678df",
        "locations": [
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 107-111",
            "startLine": 107,
            "endLine": 111,
            "lines": 5,
            "text": "    \n    // Social theme detection\n    if (lowerContent.match(/hello|hi|bye|thanks|please|sorry|welcome/)) {\n      return 'social';\n    }",
            "fullText": "    \n    // Social theme detection\n    if (lowerContent.match(/hello|hi|bye|thanks|please|sorry|welcome/)) {\n      return 'social';\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 108-112",
            "startLine": 108,
            "endLine": 112,
            "lines": 5,
            "text": "    // Social theme detection\n    if (lowerContent.match(/hello|hi|bye|thanks|please|sorry|welcome/)) {\n      return 'social';\n    }\n    ",
            "fullText": "    // Social theme detection\n    if (lowerContent.match(/hello|hi|bye|thanks|please|sorry|welcome/)) {\n      return 'social';\n    }\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 109-113",
            "startLine": 109,
            "endLine": 113,
            "lines": 5,
            "text": "    if (lowerContent.match(/hello|hi|bye|thanks|please|sorry|welcome/)) {\n      return 'social';\n    }\n    \n    // System theme detection",
            "fullText": "    if (lowerContent.match(/hello|hi|bye|thanks|please|sorry|welcome/)) {\n      return 'social';\n    }\n    \n    // System theme detection",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_eaac7267de93199d6af5a46cc6436f40",
        "locations": [
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 112-116",
            "startLine": 112,
            "endLine": 116,
            "lines": 5,
            "text": "    \n    // System theme detection\n    if (lowerContent.match(/joined|left|connected|disconnected|system/)) {\n      return 'system';\n    }",
            "fullText": "    \n    // System theme detection\n    if (lowerContent.match(/joined|left|connected|disconnected|system/)) {\n      return 'system';\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 113-117",
            "startLine": 113,
            "endLine": 117,
            "lines": 5,
            "text": "    // System theme detection\n    if (lowerContent.match(/joined|left|connected|disconnected|system/)) {\n      return 'system';\n    }\n    ",
            "fullText": "    // System theme detection\n    if (lowerContent.match(/joined|left|connected|disconnected|system/)) {\n      return 'system';\n    }\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 114-118",
            "startLine": 114,
            "endLine": 118,
            "lines": 5,
            "text": "    if (lowerContent.match(/joined|left|connected|disconnected|system/)) {\n      return 'system';\n    }\n    \n    // External theme detection",
            "fullText": "    if (lowerContent.match(/joined|left|connected|disconnected|system/)) {\n      return 'system';\n    }\n    \n    // External theme detection",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_7e9c21b84faf99ef1804b39a7cfedbee",
        "locations": [
          {
            "file": "src/auth/local-auth-manager.ts",
            "name": "lines 5-9",
            "startLine": 5,
            "endLine": 9,
            "lines": 5,
            "text": "\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport chalk from 'chalk';",
            "fullText": "\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport chalk from 'chalk';",
            "isTextBlock": true
          },
          {
            "file": "src/auth/session-auth-manager.ts",
            "name": "lines 5-9",
            "startLine": 5,
            "endLine": 9,
            "lines": 5,
            "text": "\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport chalk from 'chalk';",
            "fullText": "\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport chalk from 'chalk';",
            "isTextBlock": true
          },
          {
            "file": "src/auth/session-auth-manager.ts",
            "name": "lines 6-10",
            "startLine": 6,
            "endLine": 10,
            "lines": 5,
            "text": "import * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport chalk from 'chalk';\n",
            "fullText": "import * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport chalk from 'chalk';\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_23665c61fd37312dd23e506fbcaf5d97",
        "locations": [
          {
            "file": "src/auth/local-auth-manager.ts",
            "name": "lines 68-72",
            "startLine": 68,
            "endLine": 72,
            "lines": 5,
            "text": "    try {\n      // Ensure directory exists\n      if (!fs.existsSync(this.authDir)) {\n        fs.mkdirSync(this.authDir, { recursive: true });\n      }",
            "fullText": "    try {\n      // Ensure directory exists\n      if (!fs.existsSync(this.authDir)) {\n        fs.mkdirSync(this.authDir, { recursive: true });\n      }",
            "isTextBlock": true
          },
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 78-82",
            "startLine": 78,
            "endLine": 82,
            "lines": 5,
            "text": "    try {\n      if (!fs.existsSync(this.authDir)) {\n        fs.mkdirSync(this.authDir, { recursive: true });\n      }\n",
            "fullText": "    try {\n      if (!fs.existsSync(this.authDir)) {\n        fs.mkdirSync(this.authDir, { recursive: true });\n      }\n",
            "isTextBlock": true
          },
          {
            "file": "src/auth/session-auth-manager.ts",
            "name": "lines 63-67",
            "startLine": 63,
            "endLine": 67,
            "lines": 5,
            "text": "    try {\n      if (!fs.existsSync(this.authDir)) {\n        fs.mkdirSync(this.authDir, { recursive: true });\n      }\n",
            "fullText": "    try {\n      if (!fs.existsSync(this.authDir)) {\n        fs.mkdirSync(this.authDir, { recursive: true });\n      }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_55032dee9eb4569248b93259b80cdf60",
        "locations": [
          {
            "file": "src/auth/local-auth-manager.ts",
            "name": "lines 69-73",
            "startLine": 69,
            "endLine": 73,
            "lines": 5,
            "text": "      // Ensure directory exists\n      if (!fs.existsSync(this.authDir)) {\n        fs.mkdirSync(this.authDir, { recursive: true });\n      }\n",
            "fullText": "      // Ensure directory exists\n      if (!fs.existsSync(this.authDir)) {\n        fs.mkdirSync(this.authDir, { recursive: true });\n      }\n",
            "isTextBlock": true
          },
          {
            "file": "src/auth/local-auth-manager.ts",
            "name": "lines 70-74",
            "startLine": 70,
            "endLine": 74,
            "lines": 5,
            "text": "      if (!fs.existsSync(this.authDir)) {\n        fs.mkdirSync(this.authDir, { recursive: true });\n      }\n\n      // Merge with existing credentials",
            "fullText": "      if (!fs.existsSync(this.authDir)) {\n        fs.mkdirSync(this.authDir, { recursive: true });\n      }\n\n      // Merge with existing credentials",
            "isTextBlock": true
          },
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 79-83",
            "startLine": 79,
            "endLine": 83,
            "lines": 5,
            "text": "      if (!fs.existsSync(this.authDir)) {\n        fs.mkdirSync(this.authDir, { recursive: true });\n      }\n\n      // Calculate expiration timestamp",
            "fullText": "      if (!fs.existsSync(this.authDir)) {\n        fs.mkdirSync(this.authDir, { recursive: true });\n      }\n\n      // Calculate expiration timestamp",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_58473fbb15c22c02eb4621e6d780c376",
        "locations": [
          {
            "file": "src/auth/local-auth-manager.ts",
            "name": "lines 247-251",
            "startLine": 247,
            "endLine": 251,
            "lines": 5,
            "text": "    const readline = require('readline').createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });\n",
            "fullText": "    const readline = require('readline').createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });\n",
            "isTextBlock": true
          },
          {
            "file": "src/auth/session-auth-manager.ts",
            "name": "lines 189-193",
            "startLine": 189,
            "endLine": 193,
            "lines": 5,
            "text": "\n    const readline = require('readline').createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });",
            "fullText": "\n    const readline = require('readline').createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });",
            "isTextBlock": true
          },
          {
            "file": "src/auth/session-auth-manager.ts",
            "name": "lines 190-194",
            "startLine": 190,
            "endLine": 194,
            "lines": 5,
            "text": "    const readline = require('readline').createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });\n",
            "fullText": "    const readline = require('readline').createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9166f88859f3531b6e19b84f67b1a781",
        "locations": [
          {
            "file": "src/auth/session-auth-manager.ts",
            "name": "lines 156-160",
            "startLine": 156,
            "endLine": 160,
            "lines": 5,
            "text": "    // 3. Extract sessionKey, anthropicSession, etc.\n    \n    // For demo purposes, simulate finding cookies\n    console.log(chalk.yellow('🔄 Extracting cookies from browser...'));\n    await new Promi...",
            "fullText": "    // 3. Extract sessionKey, anthropicSession, etc.\n    \n    // For demo purposes, simulate finding cookies\n    console.log(chalk.yellow('🔄 Extracting cookies from browser...'));\n    await new Promise(Working on => setTimeout(Working on, 1500));",
            "isTextBlock": true
          },
          {
            "file": "src/auth/session-auth-manager.ts",
            "name": "lines 157-161",
            "startLine": 157,
            "endLine": 161,
            "lines": 5,
            "text": "    \n    // For demo purposes, simulate finding cookies\n    console.log(chalk.yellow('🔄 Extracting cookies from browser...'));\n    await new Promise(Working on => setTimeout(Working on, 1500));\n",
            "fullText": "    \n    // For demo purposes, simulate finding cookies\n    console.log(chalk.yellow('🔄 Extracting cookies from browser...'));\n    await new Promise(Working on => setTimeout(Working on, 1500));\n",
            "isTextBlock": true
          },
          {
            "file": "src/auth/session-auth-manager.ts",
            "name": "lines 158-162",
            "startLine": 158,
            "endLine": 162,
            "lines": 5,
            "text": "    // For demo purposes, simulate finding cookies\n    console.log(chalk.yellow('🔄 Extracting cookies from browser...'));\n    await new Promise(Working on => setTimeout(Working on, 1500));\n\n    // Simulate...",
            "fullText": "    // For demo purposes, simulate finding cookies\n    console.log(chalk.yellow('🔄 Extracting cookies from browser...'));\n    await new Promise(Working on => setTimeout(Working on, 1500));\n\n    // Simulate extracted cookies",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ef5ff07a462ec1b4d225e563e2064b69",
        "locations": [
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 193-197",
            "startLine": 193,
            "endLine": 197,
            "lines": 5,
            "text": "    \n    // Capture main query if provided\n    if (options.query) {\n      states.main = await this.executeQuery(connection, options.query);\n    }",
            "fullText": "    \n    // Capture main query if provided\n    if (options.query) {\n      states.main = await this.executeQuery(connection, options.query);\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 194-198",
            "startLine": 194,
            "endLine": 198,
            "lines": 5,
            "text": "    // Capture main query if provided\n    if (options.query) {\n      states.main = await this.executeQuery(connection, options.query);\n    }\n    ",
            "fullText": "    // Capture main query if provided\n    if (options.query) {\n      states.main = await this.executeQuery(connection, options.query);\n    }\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 195-199",
            "startLine": 195,
            "endLine": 199,
            "lines": 5,
            "text": "    if (options.query) {\n      states.main = await this.executeQuery(connection, options.query);\n    }\n    \n    // Capture additional queries",
            "fullText": "    if (options.query) {\n      states.main = await this.executeQuery(connection, options.query);\n    }\n    \n    // Capture additional queries",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_58f72dafa0c954cde81ee0b9d565631e",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 107-111",
            "startLine": 107,
            "endLine": 111,
            "lines": 5,
            "text": "    this.wrappedModules.add(moduleName);\n\n    const self = this;\n\n    // Wrap Client",
            "fullText": "    this.wrappedModules.add(moduleName);\n\n    const self = this;\n\n    // Wrap Client",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 286-290",
            "startLine": 286,
            "endLine": 290,
            "lines": 5,
            "text": "    this.wrappedModules.add(moduleName);\n\n    const self = this;\n\n    // Wrap createConnection",
            "fullText": "    this.wrappedModules.add(moduleName);\n\n    const self = this;\n\n    // Wrap createConnection",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 403-407",
            "startLine": 403,
            "endLine": 407,
            "lines": 5,
            "text": "    this.wrappedModules.add(moduleName);\n\n    const self = this;\n\n    // For node-redis",
            "fullText": "    this.wrappedModules.add(moduleName);\n\n    const self = this;\n\n    // For node-redis",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9db6b3c4fa3c1c6eab5411f3e249953c",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 161-165",
            "startLine": 161,
            "endLine": 165,
            "lines": 5,
            "text": "            };\n\n            // Parse query arguments\n            if (typeof queryArgs[0] === 'string') {\n              queryLog.query = queryArgs[0];",
            "fullText": "            };\n\n            // Parse query arguments\n            if (typeof queryArgs[0] === 'string') {\n              queryLog.query = queryArgs[0];",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 500-504",
            "startLine": 500,
            "endLine": 504,
            "lines": 5,
            "text": "    };\n\n    // Parse query\n    if (typeof queryArgs[0] === 'string') {\n      queryLog.query = queryArgs[0];",
            "fullText": "    };\n\n    // Parse query\n    if (typeof queryArgs[0] === 'string') {\n      queryLog.query = queryArgs[0];",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 545-549",
            "startLine": 545,
            "endLine": 549,
            "lines": 5,
            "text": "    };\n\n    // Parse query\n    if (typeof queryArgs[0] === 'string') {\n      queryLog.query = queryArgs[0];",
            "fullText": "    };\n\n    // Parse query\n    if (typeof queryArgs[0] === 'string') {\n      queryLog.query = queryArgs[0];",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b1a172512d4a6cc9bc1b18b21d8ba6b6",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 162-166",
            "startLine": 162,
            "endLine": 166,
            "lines": 5,
            "text": "\n            // Parse query arguments\n            if (typeof queryArgs[0] === 'string') {\n              queryLog.query = queryArgs[0];\n              queryLog.params = queryArgs[1];",
            "fullText": "\n            // Parse query arguments\n            if (typeof queryArgs[0] === 'string') {\n              queryLog.query = queryArgs[0];\n              queryLog.params = queryArgs[1];",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 501-505",
            "startLine": 501,
            "endLine": 505,
            "lines": 5,
            "text": "\n    // Parse query\n    if (typeof queryArgs[0] === 'string') {\n      queryLog.query = queryArgs[0];\n      queryLog.params = queryArgs[1];",
            "fullText": "\n    // Parse query\n    if (typeof queryArgs[0] === 'string') {\n      queryLog.query = queryArgs[0];\n      queryLog.params = queryArgs[1];",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 546-550",
            "startLine": 546,
            "endLine": 550,
            "lines": 5,
            "text": "\n    // Parse query\n    if (typeof queryArgs[0] === 'string') {\n      queryLog.query = queryArgs[0];\n      queryLog.params = queryArgs[1];",
            "fullText": "\n    // Parse query\n    if (typeof queryArgs[0] === 'string') {\n      queryLog.query = queryArgs[0];\n      queryLog.params = queryArgs[1];",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_20d92410081b26db74dda07c76f8cc55",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 163-167",
            "startLine": 163,
            "endLine": 167,
            "lines": 5,
            "text": "            // Parse query arguments\n            if (typeof queryArgs[0] === 'string') {\n              queryLog.query = queryArgs[0];\n              queryLog.params = queryArgs[1];\n            } else i...",
            "fullText": "            // Parse query arguments\n            if (typeof queryArgs[0] === 'string') {\n              queryLog.query = queryArgs[0];\n              queryLog.params = queryArgs[1];\n            } else if (typeof queryArgs[0] === 'object') {",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 502-506",
            "startLine": 502,
            "endLine": 506,
            "lines": 5,
            "text": "    // Parse query\n    if (typeof queryArgs[0] === 'string') {\n      queryLog.query = queryArgs[0];\n      queryLog.params = queryArgs[1];\n    } else if (typeof queryArgs[0] === 'object') {",
            "fullText": "    // Parse query\n    if (typeof queryArgs[0] === 'string') {\n      queryLog.query = queryArgs[0];\n      queryLog.params = queryArgs[1];\n    } else if (typeof queryArgs[0] === 'object') {",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 547-551",
            "startLine": 547,
            "endLine": 551,
            "lines": 5,
            "text": "    // Parse query\n    if (typeof queryArgs[0] === 'string') {\n      queryLog.query = queryArgs[0];\n      queryLog.params = queryArgs[1];\n    } else if (typeof queryArgs[0] === 'object') {",
            "fullText": "    // Parse query\n    if (typeof queryArgs[0] === 'string') {\n      queryLog.query = queryArgs[0];\n      queryLog.params = queryArgs[1];\n    } else if (typeof queryArgs[0] === 'object') {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_4b1d2734492300b148842cfd4fd5270c",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 197-201",
            "startLine": 197,
            "endLine": 201,
            "lines": 5,
            "text": "                queryLog.duration = Date.now() - startTime;\n                queryLog.error = err.message;\n                self.emit('database', queryLog);\n                self.logs.push(queryLog);\n   ...",
            "fullText": "                queryLog.duration = Date.now() - startTime;\n                queryLog.error = err.message;\n                self.emit('database', queryLog);\n                self.logs.push(queryLog);\n                throw err;",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 231-235",
            "startLine": 231,
            "endLine": 235,
            "lines": 5,
            "text": "                  queryLog.duration = Date.now() - startTime;\n                  queryLog.error = err.message;\n                  self.emit('database', queryLog);\n                  self.logs.push(queryL...",
            "fullText": "                  queryLog.duration = Date.now() - startTime;\n                  queryLog.error = err.message;\n                  self.emit('database', queryLog);\n                  self.logs.push(queryLog);\n                  throw err;",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 523-527",
            "startLine": 523,
            "endLine": 527,
            "lines": 5,
            "text": "          queryLog.duration = Date.now() - startTime;\n          queryLog.error = err.message;\n          self.emit('database', queryLog);\n          self.logs.push(queryLog);\n          throw err;",
            "fullText": "          queryLog.duration = Date.now() - startTime;\n          queryLog.error = err.message;\n          self.emit('database', queryLog);\n          self.logs.push(queryLog);\n          throw err;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_4ed4f7378bbb3edeea348701a19fc588",
        "locations": [
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 202-206",
            "startLine": 202,
            "endLine": 206,
            "lines": 5,
            "text": "    \n    // Instrument database clients\n    this.instrumentModule('pg', ['query']);\n    this.instrumentModule('mysql', ['query']);\n    this.instrumentModule('mongodb', ['find', 'insert', 'update', 'de...",
            "fullText": "    \n    // Instrument database clients\n    this.instrumentModule('pg', ['query']);\n    this.instrumentModule('mysql', ['query']);\n    this.instrumentModule('mongodb', ['find', 'insert', 'update', 'delete']);",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 203-207",
            "startLine": 203,
            "endLine": 207,
            "lines": 5,
            "text": "    // Instrument database clients\n    this.instrumentModule('pg', ['query']);\n    this.instrumentModule('mysql', ['query']);\n    this.instrumentModule('mongodb', ['find', 'insert', 'update', 'delete'...",
            "fullText": "    // Instrument database clients\n    this.instrumentModule('pg', ['query']);\n    this.instrumentModule('mysql', ['query']);\n    this.instrumentModule('mongodb', ['find', 'insert', 'update', 'delete']);\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 204-208",
            "startLine": 204,
            "endLine": 208,
            "lines": 5,
            "text": "    this.instrumentModule('pg', ['query']);\n    this.instrumentModule('mysql', ['query']);\n    this.instrumentModule('mongodb', ['find', 'insert', 'update', 'delete']);\n    \n    // Instrument file sys...",
            "fullText": "    this.instrumentModule('pg', ['query']);\n    this.instrumentModule('mysql', ['query']);\n    this.instrumentModule('mongodb', ['find', 'insert', 'update', 'delete']);\n    \n    // Instrument file system",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_bd0c67f78c3f933f074664a359ac9c3a",
        "locations": [
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 34-38",
            "startLine": 34,
            "endLine": 38,
            "lines": 5,
            "text": "\n// Ensure log directory exists\nif (!fs.existsSync(config.logDir)) {\n  fs.mkdirSync(config.logDir, { recursive: true });\n}",
            "fullText": "\n// Ensure log directory exists\nif (!fs.existsSync(config.logDir)) {\n  fs.mkdirSync(config.logDir, { recursive: true });\n}",
            "isTextBlock": true
          },
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 35-39",
            "startLine": 35,
            "endLine": 39,
            "lines": 5,
            "text": "// Ensure log directory exists\nif (!fs.existsSync(config.logDir)) {\n  fs.mkdirSync(config.logDir, { recursive: true });\n}\n",
            "fullText": "// Ensure log directory exists\nif (!fs.existsSync(config.logDir)) {\n  fs.mkdirSync(config.logDir, { recursive: true });\n}\n",
            "isTextBlock": true
          },
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 36-40",
            "startLine": 36,
            "endLine": 40,
            "lines": 5,
            "text": "if (!fs.existsSync(config.logDir)) {\n  fs.mkdirSync(config.logDir, { recursive: true });\n}\n\n// Create log streams",
            "fullText": "if (!fs.existsSync(config.logDir)) {\n  fs.mkdirSync(config.logDir, { recursive: true });\n}\n\n// Create log streams",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f99deba5d958061e5dd09fa099f4f200",
        "locations": [
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 192-196",
            "startLine": 192,
            "endLine": 196,
            "lines": 5,
            "text": "  \n  // Handle database diffs\n  if (config.enableDatabaseDiff) {\n    databaseInterceptor.on('database-diff', (diff) => {\n      stats.database.diffs++;",
            "fullText": "  \n  // Handle database diffs\n  if (config.enableDatabaseDiff) {\n    databaseInterceptor.on('database-diff', (diff) => {\n      stats.database.diffs++;",
            "isTextBlock": true
          },
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 193-197",
            "startLine": 193,
            "endLine": 197,
            "lines": 5,
            "text": "  // Handle database diffs\n  if (config.enableDatabaseDiff) {\n    databaseInterceptor.on('database-diff', (diff) => {\n      stats.database.diffs++;\n      ",
            "fullText": "  // Handle database diffs\n  if (config.enableDatabaseDiff) {\n    databaseInterceptor.on('database-diff', (diff) => {\n      stats.database.diffs++;\n      ",
            "isTextBlock": true
          },
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 194-198",
            "startLine": 194,
            "endLine": 198,
            "lines": 5,
            "text": "  if (config.enableDatabaseDiff) {\n    databaseInterceptor.on('database-diff', (diff) => {\n      stats.database.diffs++;\n      \n      // Log diff in easily parseable format",
            "fullText": "  if (config.enableDatabaseDiff) {\n    databaseInterceptor.on('database-diff', (diff) => {\n      stats.database.diffs++;\n      \n      // Log diff in easily parseable format",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_2f737ded2bdef13f5e322fa9303a7909",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 191-195",
            "startLine": 191,
            "endLine": 195,
            "lines": 5,
            "text": "\n    const room = this.rooms.get(client.roomId);\n    if (!room) return;\n\n    // Process commands",
            "fullText": "\n    const room = this.rooms.get(client.roomId);\n    if (!room) return;\n\n    // Process commands",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 260-264",
            "startLine": 260,
            "endLine": 264,
            "lines": 5,
            "text": "\n    const room = this.rooms.get(client.roomId);\n    if (!room) return;\n\n    // Process agent actions",
            "fullText": "\n    const room = this.rooms.get(client.roomId);\n    if (!room) return;\n\n    // Process agent actions",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 330-334",
            "startLine": 330,
            "endLine": 334,
            "lines": 5,
            "text": "\n    const room = this.rooms.get(client.roomId);\n    if (!room) return;\n\n    // Remove user from room",
            "fullText": "\n    const room = this.rooms.get(client.roomId);\n    if (!room) return;\n\n    // Remove user from room",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3ecdadc4fcc8c17116fca9b04bb9b263",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 198-202",
            "startLine": 198,
            "endLine": 202,
            "lines": 5,
            "text": "        this.sendToClient(client.ws, {\n          type: WSEventType.NEW_MESSAGE,\n          payload: {\n            id: uuidv4(),\n            userId: 'system',",
            "fullText": "        this.sendToClient(client.ws, {\n          type: WSEventType.NEW_MESSAGE,\n          payload: {\n            id: uuidv4(),\n            userId: 'system',",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 213-217",
            "startLine": 213,
            "endLine": 217,
            "lines": 5,
            "text": "        this.sendToClient(client.ws, {\n          type: WSEventType.NEW_MESSAGE,\n          payload: {\n            id: uuidv4(),\n            userId: 'system',",
            "fullText": "        this.sendToClient(client.ws, {\n          type: WSEventType.NEW_MESSAGE,\n          payload: {\n            id: uuidv4(),\n            userId: 'system',",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 228-232",
            "startLine": 228,
            "endLine": 232,
            "lines": 5,
            "text": "        this.sendToClient(client.ws, {\n          type: WSEventType.NEW_MESSAGE,\n          payload: {\n            id: uuidv4(),\n            userId: 'system',",
            "fullText": "        this.sendToClient(client.ws, {\n          type: WSEventType.NEW_MESSAGE,\n          payload: {\n            id: uuidv4(),\n            userId: 'system',",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b175c17973b6ea3a0c9de0f2c9f3d3fc",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 199-203",
            "startLine": 199,
            "endLine": 203,
            "lines": 5,
            "text": "          type: WSEventType.NEW_MESSAGE,\n          payload: {\n            id: uuidv4(),\n            userId: 'system',\n            username: 'System',",
            "fullText": "          type: WSEventType.NEW_MESSAGE,\n          payload: {\n            id: uuidv4(),\n            userId: 'system',\n            username: 'System',",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 214-218",
            "startLine": 214,
            "endLine": 218,
            "lines": 5,
            "text": "          type: WSEventType.NEW_MESSAGE,\n          payload: {\n            id: uuidv4(),\n            userId: 'system',\n            username: 'System',",
            "fullText": "          type: WSEventType.NEW_MESSAGE,\n          payload: {\n            id: uuidv4(),\n            userId: 'system',\n            username: 'System',",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 229-233",
            "startLine": 229,
            "endLine": 233,
            "lines": 5,
            "text": "          type: WSEventType.NEW_MESSAGE,\n          payload: {\n            id: uuidv4(),\n            userId: 'system',\n            username: 'System',",
            "fullText": "          type: WSEventType.NEW_MESSAGE,\n          payload: {\n            id: uuidv4(),\n            userId: 'system',\n            username: 'System',",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_add7523fee110777e12e406d5798fe71",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 205-209",
            "startLine": 205,
            "endLine": 209,
            "lines": 5,
            "text": "            timestamp: new Date(),\n            type: MessageType.SYSTEM_MESSAGE\n          },\n          timestamp: new Date()\n        });",
            "fullText": "            timestamp: new Date(),\n            type: MessageType.SYSTEM_MESSAGE\n          },\n          timestamp: new Date()\n        });",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 220-224",
            "startLine": 220,
            "endLine": 224,
            "lines": 5,
            "text": "            timestamp: new Date(),\n            type: MessageType.SYSTEM_MESSAGE\n          },\n          timestamp: new Date()\n        });",
            "fullText": "            timestamp: new Date(),\n            type: MessageType.SYSTEM_MESSAGE\n          },\n          timestamp: new Date()\n        });",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 235-239",
            "startLine": 235,
            "endLine": 239,
            "lines": 5,
            "text": "            timestamp: new Date(),\n            type: MessageType.SYSTEM_MESSAGE\n          },\n          timestamp: new Date()\n        });",
            "fullText": "            timestamp: new Date(),\n            type: MessageType.SYSTEM_MESSAGE\n          },\n          timestamp: new Date()\n        });",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_28e83417d2a98063fa9ddb7c5fe09876",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 206-210",
            "startLine": 206,
            "endLine": 210,
            "lines": 5,
            "text": "            type: MessageType.SYSTEM_MESSAGE\n          },\n          timestamp: new Date()\n        });\n        break;",
            "fullText": "            type: MessageType.SYSTEM_MESSAGE\n          },\n          timestamp: new Date()\n        });\n        break;",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 221-225",
            "startLine": 221,
            "endLine": 225,
            "lines": 5,
            "text": "            type: MessageType.SYSTEM_MESSAGE\n          },\n          timestamp: new Date()\n        });\n        break;",
            "fullText": "            type: MessageType.SYSTEM_MESSAGE\n          },\n          timestamp: new Date()\n        });\n        break;",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 236-240",
            "startLine": 236,
            "endLine": 240,
            "lines": 5,
            "text": "            type: MessageType.SYSTEM_MESSAGE\n          },\n          timestamp: new Date()\n        });\n        break;",
            "fullText": "            type: MessageType.SYSTEM_MESSAGE\n          },\n          timestamp: new Date()\n        });\n        break;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_2ba7fc72285154184c59ca3a2f23ce4e",
        "locations": [
          {
            "file": "src/utils/mermaid-parser.ts",
            "name": "lines 133-137",
            "startLine": 133,
            "endLine": 137,
            "lines": 5,
            "text": "\n    // Get external participants\n    const externalParticipants = participants\n      .filter(p => p.isExternal)\n      .map(p => p.name);",
            "fullText": "\n    // Get external participants\n    const externalParticipants = participants\n      .filter(p => p.isExternal)\n      .map(p => p.name);",
            "isTextBlock": true
          },
          {
            "file": "src/utils/mermaid-parser.ts",
            "name": "lines 134-138",
            "startLine": 134,
            "endLine": 138,
            "lines": 5,
            "text": "    // Get external participants\n    const externalParticipants = participants\n      .filter(p => p.isExternal)\n      .map(p => p.name);\n",
            "fullText": "    // Get external participants\n    const externalParticipants = participants\n      .filter(p => p.isExternal)\n      .map(p => p.name);\n",
            "isTextBlock": true
          },
          {
            "file": "src/utils/mermaid-parser.ts",
            "name": "lines 135-139",
            "startLine": 135,
            "endLine": 139,
            "lines": 5,
            "text": "    const externalParticipants = participants\n      .filter(p => p.isExternal)\n      .map(p => p.name);\n\n    // Find messages to external participants",
            "fullText": "    const externalParticipants = participants\n      .filter(p => p.isExternal)\n      .map(p => p.name);\n\n    // Find messages to external participants",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "e1607977ff17424a15772e0fc90b883f",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "sendError",
            "startLine": 413,
            "endLine": 419,
            "lines": 7,
            "text": "private sendError(ws: WebSocket, error: string) {\n    this.sendToClient(ws, {\n      type: WSEventType.ERROR,\n      payload: { error },\n      timestamp: new Date()\n    });\n  }",
            "fullText": "private sendError(ws: WebSocket, error: string) {\n    this.sendToClient(ws, {\n      type: WSEventType.ERROR,\n      payload: { error },\n      timestamp: new Date()\n    });\n  }"
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "sendError",
            "startLine": 418,
            "endLine": 424,
            "lines": 7,
            "text": "private sendError(ws: WebSocket, error: string) {\n    this.sendToClient(ws, {\n      type: WSEventType.ERROR,\n      payload: { error },\n      timestamp: new Date()\n    });\n  }",
            "fullText": "private sendError(ws: WebSocket, error: string) {\n    this.sendToClient(ws, {\n      type: WSEventType.ERROR,\n      payload: { error },\n      timestamp: new Date()\n    });\n  }"
          }
        ],
        "type": "function"
      },
      {
        "hash": "746853d50d03d7a5e3854426ff3489db",
        "locations": [
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "formatSize",
            "startLine": 330,
            "endLine": 335,
            "lines": 6,
            "text": "private formatSize(bytes: number): string {\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.ro...",
            "fullText": "private formatSize(bytes: number): string {\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n  }"
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "formatSize",
            "startLine": 427,
            "endLine": 432,
            "lines": 6,
            "text": "private formatSize(bytes: number): string {\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.ro...",
            "fullText": "private formatSize(bytes: number): string {\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n  }"
          }
        ],
        "type": "function"
      },
      {
        "hash": "block_60b8059f52f81a055e0961ce7ca88ca2",
        "locations": [
          {
            "file": "src/all-in-one.ts",
            "name": "lines 7-11",
            "startLine": 7,
            "endLine": 11,
            "lines": 5,
            "text": "\nimport { ChatServer } from './server/chat-server';\nimport { ClaudeCoordinatorAgent } from './agents/claude-coordinator';\nimport chalk from 'chalk';\nimport { spawn } from 'child_process';",
            "fullText": "\nimport { ChatServer } from './server/chat-server';\nimport { ClaudeCoordinatorAgent } from './agents/claude-coordinator';\nimport chalk from 'chalk';\nimport { spawn } from 'child_process';",
            "isTextBlock": true
          },
          {
            "file": "src/all-in-one.ts",
            "name": "lines 8-12",
            "startLine": 8,
            "endLine": 12,
            "lines": 5,
            "text": "import { ChatServer } from './server/chat-server';\nimport { ClaudeCoordinatorAgent } from './agents/claude-coordinator';\nimport chalk from 'chalk';\nimport { spawn } from 'child_process';\n",
            "fullText": "import { ChatServer } from './server/chat-server';\nimport { ClaudeCoordinatorAgent } from './agents/claude-coordinator';\nimport chalk from 'chalk';\nimport { spawn } from 'child_process';\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_e4617875337006d252ff0b2cad4134be",
        "locations": [
          {
            "file": "src/all-in-one.ts",
            "name": "lines 38-42",
            "startLine": 38,
            "endLine": 42,
            "lines": 5,
            "text": "\n  async start() {\n    console.log(chalk.bold.green('\\n🚀 Starting All-in-One Chat Room with Claude\\n'));\n    \n    try {",
            "fullText": "\n  async start() {\n    console.log(chalk.bold.green('\\n🚀 Starting All-in-One Chat Room with Claude\\n'));\n    \n    try {",
            "isTextBlock": true
          },
          {
            "file": "src/all-in-one.ts",
            "name": "lines 39-43",
            "startLine": 39,
            "endLine": 43,
            "lines": 5,
            "text": "  async start() {\n    console.log(chalk.bold.green('\\n🚀 Starting All-in-One Chat Room with Claude\\n'));\n    \n    try {\n      // Step 1: Start the server",
            "fullText": "  async start() {\n    console.log(chalk.bold.green('\\n🚀 Starting All-in-One Chat Room with Claude\\n'));\n    \n    try {\n      // Step 1: Start the server",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_e42a0c8ab89c236b8a8700412a3c17b0",
        "locations": [
          {
            "file": "src/all-in-one.ts",
            "name": "lines 43-47",
            "startLine": 43,
            "endLine": 47,
            "lines": 5,
            "text": "      // Step 1: Start the server\n      console.log(chalk.cyan('📡 Starting chat server...'));\n      await this.server.start();\n      console.log(chalk.green(`🔄 Server running on ws://localhost:${this...",
            "fullText": "      // Step 1: Start the server\n      console.log(chalk.cyan('📡 Starting chat server...'));\n      await this.server.start();\n      console.log(chalk.green(`🔄 Server running on ws://localhost:${this.config.serverPort}`));\n      ",
            "isTextBlock": true
          },
          {
            "file": "src/all-in-one.ts",
            "name": "lines 44-48",
            "startLine": 44,
            "endLine": 48,
            "lines": 5,
            "text": "      console.log(chalk.cyan('📡 Starting chat server...'));\n      await this.server.start();\n      console.log(chalk.green(`🔄 Server running on ws://localhost:${this.config.serverPort}`));\n      \n   ...",
            "fullText": "      console.log(chalk.cyan('📡 Starting chat server...'));\n      await this.server.start();\n      console.log(chalk.green(`🔄 Server running on ws://localhost:${this.config.serverPort}`));\n      \n      // Wait a moment for server to stabilize",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_670c542c5f9ac3a7c9efec223eecd7ea",
        "locations": [
          {
            "file": "src/all-in-one.ts",
            "name": "lines 46-50",
            "startLine": 46,
            "endLine": 50,
            "lines": 5,
            "text": "      console.log(chalk.green(`🔄 Server running on ws://localhost:${this.config.serverPort}`));\n      \n      // Wait a moment for server to stabilize\n      await this.delay(1000);\n      ",
            "fullText": "      console.log(chalk.green(`🔄 Server running on ws://localhost:${this.config.serverPort}`));\n      \n      // Wait a moment for server to stabilize\n      await this.delay(1000);\n      ",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 118-122",
            "startLine": 118,
            "endLine": 122,
            "lines": 5,
            "text": "      console.log(chalk.green(`🔄 Server running on ws://localhost:${this.config.serverPort}`));\n      \n      // Wait for server to stabilize\n      await this.delay(1000);\n      ",
            "fullText": "      console.log(chalk.green(`🔄 Server running on ws://localhost:${this.config.serverPort}`));\n      \n      // Wait for server to stabilize\n      await this.delay(1000);\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3ed04c68b999002f5dc44b384d99008e",
        "locations": [
          {
            "file": "src/all-in-one.ts",
            "name": "lines 50-54",
            "startLine": 50,
            "endLine": 54,
            "lines": 5,
            "text": "      \n      // Step 2: Start Claude coordinator\n      console.log(chalk.cyan('\\n🤖 Starting Claude coordinator...'));\n      await this.startClaudeCoordinator();\n      ",
            "fullText": "      \n      // Step 2: Start Claude coordinator\n      console.log(chalk.cyan('\\n🤖 Starting Claude coordinator...'));\n      await this.startClaudeCoordinator();\n      ",
            "isTextBlock": true
          },
          {
            "file": "src/all-in-one.ts",
            "name": "lines 51-55",
            "startLine": 51,
            "endLine": 55,
            "lines": 5,
            "text": "      // Step 2: Start Claude coordinator\n      console.log(chalk.cyan('\\n🤖 Starting Claude coordinator...'));\n      await this.startClaudeCoordinator();\n      \n      // Wait for Claude to connect",
            "fullText": "      // Step 2: Start Claude coordinator\n      console.log(chalk.cyan('\\n🤖 Starting Claude coordinator...'));\n      await this.startClaudeCoordinator();\n      \n      // Wait for Claude to connect",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8571938ffc1acb46d458b9d0f050e79d",
        "locations": [
          {
            "file": "src/all-in-one.ts",
            "name": "lines 77-81",
            "startLine": 77,
            "endLine": 81,
            "lines": 5,
            "text": "      \n      console.log(chalk.yellow('\\n📌 Press Ctrl+C to stop the chat room\\n'));\n      \n      // Handle graceful shutdown\n      this.setupShutdownHandlers();",
            "fullText": "      \n      console.log(chalk.yellow('\\n📌 Press Ctrl+C to stop the chat room\\n'));\n      \n      // Handle graceful shutdown\n      this.setupShutdownHandlers();",
            "isTextBlock": true
          },
          {
            "file": "src/all-in-one.ts",
            "name": "lines 78-82",
            "startLine": 78,
            "endLine": 82,
            "lines": 5,
            "text": "      console.log(chalk.yellow('\\n📌 Press Ctrl+C to stop the chat room\\n'));\n      \n      // Handle graceful shutdown\n      this.setupShutdownHandlers();\n      ",
            "fullText": "      console.log(chalk.yellow('\\n📌 Press Ctrl+C to stop the chat room\\n'));\n      \n      // Handle graceful shutdown\n      this.setupShutdownHandlers();\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_51017adf3acaa09d0c02d2999d32ccdc",
        "locations": [
          {
            "file": "src/all-in-one.ts",
            "name": "lines 124-128",
            "startLine": 124,
            "endLine": 128,
            "lines": 5,
            "text": "\n      this.claudeProcess.stderr?.on('data', (data: Buffer) => {\n        console.error(chalk.red(`[Claude Error] ${data.toString()}`));\n      });\n",
            "fullText": "\n      this.claudeProcess.stderr?.on('data', (data: Buffer) => {\n        console.error(chalk.red(`[Claude Error] ${data.toString()}`));\n      });\n",
            "isTextBlock": true
          },
          {
            "file": "src/all-in-one.ts",
            "name": "lines 125-129",
            "startLine": 125,
            "endLine": 129,
            "lines": 5,
            "text": "      this.claudeProcess.stderr?.on('data', (data: Buffer) => {\n        console.error(chalk.red(`[Claude Error] ${data.toString()}`));\n      });\n\n      // Wait for Claude to connect",
            "fullText": "      this.claudeProcess.stderr?.on('data', (data: Buffer) => {\n        console.error(chalk.red(`[Claude Error] ${data.toString()}`));\n      });\n\n      // Wait for Claude to connect",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_4160661c8b124fb1db0fb453fcf24a17",
        "locations": [
          {
            "file": "src/all-in-one.ts",
            "name": "lines 168-172",
            "startLine": 168,
            "endLine": 172,
            "lines": 5,
            "text": "      // Stop Claude process if running\n      if (this.claudeProcess) {\n        this.claudeProcess.kill('SIGTERM');\n        console.log(chalk.gray('Claude process stopped'));\n      }",
            "fullText": "      // Stop Claude process if running\n      if (this.claudeProcess) {\n        this.claudeProcess.kill('SIGTERM');\n        console.log(chalk.gray('Claude process stopped'));\n      }",
            "isTextBlock": true
          },
          {
            "file": "src/all-in-one.ts",
            "name": "lines 169-173",
            "startLine": 169,
            "endLine": 173,
            "lines": 5,
            "text": "      if (this.claudeProcess) {\n        this.claudeProcess.kill('SIGTERM');\n        console.log(chalk.gray('Claude process stopped'));\n      }\n",
            "fullText": "      if (this.claudeProcess) {\n        this.claudeProcess.kill('SIGTERM');\n        console.log(chalk.gray('Claude process stopped'));\n      }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6ab176beeef0d68d5c4c5f131d805a08",
        "locations": [
          {
            "file": "src/all-in-one.ts",
            "name": "lines 180-184",
            "startLine": 180,
            "endLine": 184,
            "lines": 5,
            "text": "  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise(Working on => setTimeout(Working on, ms));\n  }",
            "fullText": "  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise(Working on => setTimeout(Working on, ms));\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 260-264",
            "startLine": 260,
            "endLine": 264,
            "lines": 5,
            "text": "  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise(Working on => setTimeout(Working on, ms));\n  }",
            "fullText": "  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise(Working on => setTimeout(Working on, ms));\n  }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b8a38ac75264e9c2a68a104b986d08eb",
        "locations": [
          {
            "file": "src/all-in-one.ts",
            "name": "lines 181-185",
            "startLine": 181,
            "endLine": 185,
            "lines": 5,
            "text": "\n  private delay(ms: number): Promise<void> {\n    return new Promise(Working on => setTimeout(Working on, ms));\n  }\n}",
            "fullText": "\n  private delay(ms: number): Promise<void> {\n    return new Promise(Working on => setTimeout(Working on, ms));\n  }\n}",
            "isTextBlock": true
          },
          {
            "file": "src/all-in-one.ts",
            "name": "lines 182-186",
            "startLine": 182,
            "endLine": 186,
            "lines": 5,
            "text": "  private delay(ms: number): Promise<void> {\n    return new Promise(Working on => setTimeout(Working on, ms));\n  }\n}\n",
            "fullText": "  private delay(ms: number): Promise<void> {\n    return new Promise(Working on => setTimeout(Working on, ms));\n  }\n}\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f2cbda276911e02a4f98736c9ac667e4",
        "locations": [
          {
            "file": "src/all-in-one.ts",
            "name": "lines 187-191",
            "startLine": 187,
            "endLine": 191,
            "lines": 5,
            "text": "// Quick start function for easy usage\nexport async function startChatRoom(config?: AllInOneConfig) {\n  const chatRoom = new AllInOneChatRoom(config);\n  await chatRoom.start();\n}",
            "fullText": "// Quick start function for easy usage\nexport async function startChatRoom(config?: AllInOneConfig) {\n  const chatRoom = new AllInOneChatRoom(config);\n  await chatRoom.start();\n}",
            "isTextBlock": true
          },
          {
            "file": "src/all-in-one.ts",
            "name": "lines 188-192",
            "startLine": 188,
            "endLine": 192,
            "lines": 5,
            "text": "export async function startChatRoom(config?: AllInOneConfig) {\n  const chatRoom = new AllInOneChatRoom(config);\n  await chatRoom.start();\n}\n",
            "fullText": "export async function startChatRoom(config?: AllInOneConfig) {\n  const chatRoom = new AllInOneChatRoom(config);\n  await chatRoom.start();\n}\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f18f202ef3cb03105cbe445d09eb71ea",
        "locations": [
          {
            "file": "src/all-in-one.ts",
            "name": "lines 199-203",
            "startLine": 199,
            "endLine": 203,
            "lines": 5,
            "text": "  \n  for (let i = 0; i < args.length; i++) {\n    switch (args[i]) {\n      case '--port':\n      case '-p':",
            "fullText": "  \n  for (let i = 0; i < args.length; i++) {\n    switch (args[i]) {\n      case '--port':\n      case '-p':",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 292-296",
            "startLine": 292,
            "endLine": 296,
            "lines": 5,
            "text": "  // Parse command line arguments\n  for (let i = 0; i < args.length; i++) {\n    switch (args[i]) {\n      case '--port':\n      case '-p':",
            "fullText": "  // Parse command line arguments\n  for (let i = 0; i < args.length; i++) {\n    switch (args[i]) {\n      case '--port':\n      case '-p':",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9e10b7d9e32c9a78bca9ea595596c324",
        "locations": [
          {
            "file": "src/all-in-one.ts",
            "name": "lines 200-204",
            "startLine": 200,
            "endLine": 204,
            "lines": 5,
            "text": "  for (let i = 0; i < args.length; i++) {\n    switch (args[i]) {\n      case '--port':\n      case '-p':\n        config.serverPort = parseInt(args[++i]);",
            "fullText": "  for (let i = 0; i < args.length; i++) {\n    switch (args[i]) {\n      case '--port':\n      case '-p':\n        config.serverPort = parseInt(args[++i]);",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 293-297",
            "startLine": 293,
            "endLine": 297,
            "lines": 5,
            "text": "  for (let i = 0; i < args.length; i++) {\n    switch (args[i]) {\n      case '--port':\n      case '-p':\n        config.serverPort = parseInt(args[++i]);",
            "fullText": "  for (let i = 0; i < args.length; i++) {\n    switch (args[i]) {\n      case '--port':\n      case '-p':\n        config.serverPort = parseInt(args[++i]);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_83b866d89be897334acdf27044fb3770",
        "locations": [
          {
            "file": "src/all-in-one.ts",
            "name": "lines 201-205",
            "startLine": 201,
            "endLine": 205,
            "lines": 5,
            "text": "    switch (args[i]) {\n      case '--port':\n      case '-p':\n        config.serverPort = parseInt(args[++i]);\n        break;",
            "fullText": "    switch (args[i]) {\n      case '--port':\n      case '-p':\n        config.serverPort = parseInt(args[++i]);\n        break;",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 294-298",
            "startLine": 294,
            "endLine": 298,
            "lines": 5,
            "text": "    switch (args[i]) {\n      case '--port':\n      case '-p':\n        config.serverPort = parseInt(args[++i]);\n        break;",
            "fullText": "    switch (args[i]) {\n      case '--port':\n      case '-p':\n        config.serverPort = parseInt(args[++i]);\n        break;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0ff6e4b7071d73c14b4761abb5ad4399",
        "locations": [
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 63-67",
            "startLine": 63,
            "endLine": 67,
            "lines": 5,
            "text": "        },\n        features: {\n          allowAgents: true,\n          maxUsers: 50,\n          messageHistory: 1000,",
            "fullText": "        },\n        features: {\n          allowAgents: true,\n          maxUsers: 50,\n          messageHistory: 1000,",
            "isTextBlock": true
          },
          {
            "file": "src/server.ts",
            "name": "lines 29-33",
            "startLine": 29,
            "endLine": 33,
            "lines": 5,
            "text": "    },\n    features: {\n      allowAgents: true,\n      maxUsers: 50,\n      messageHistory: 1000,",
            "fullText": "    },\n    features: {\n      allowAgents: true,\n      maxUsers: 50,\n      messageHistory: 1000,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_032938a26ca2f2c4f009f6202fcdebf0",
        "locations": [
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 64-68",
            "startLine": 64,
            "endLine": 68,
            "lines": 5,
            "text": "        features: {\n          allowAgents: true,\n          maxUsers: 50,\n          messageHistory: 1000,\n          enableCommands: true",
            "fullText": "        features: {\n          allowAgents: true,\n          maxUsers: 50,\n          messageHistory: 1000,\n          enableCommands: true",
            "isTextBlock": true
          },
          {
            "file": "src/server.ts",
            "name": "lines 30-34",
            "startLine": 30,
            "endLine": 34,
            "lines": 5,
            "text": "    features: {\n      allowAgents: true,\n      maxUsers: 50,\n      messageHistory: 1000,\n      enableCommands: true",
            "fullText": "    features: {\n      allowAgents: true,\n      maxUsers: 50,\n      messageHistory: 1000,\n      enableCommands: true",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3e98498be6e296d1347c015b37622868",
        "locations": [
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 73-77",
            "startLine": 73,
            "endLine": 77,
            "lines": 5,
            "text": "    // Create config directory\n    const configDir = './config/rooms';\n    if (!fs.existsSync(configDir)) {\n      fs.mkdirSync(configDir, { recursive: true });\n    }",
            "fullText": "    // Create config directory\n    const configDir = './config/rooms';\n    if (!fs.existsSync(configDir)) {\n      fs.mkdirSync(configDir, { recursive: true });\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 74-78",
            "startLine": 74,
            "endLine": 78,
            "lines": 5,
            "text": "    const configDir = './config/rooms';\n    if (!fs.existsSync(configDir)) {\n      fs.mkdirSync(configDir, { recursive: true });\n    }\n",
            "fullText": "    const configDir = './config/rooms';\n    if (!fs.existsSync(configDir)) {\n      fs.mkdirSync(configDir, { recursive: true });\n    }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_13044c5cfde252aaa1b5370746aa1209",
        "locations": [
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 85-89",
            "startLine": 85,
            "endLine": 89,
            "lines": 5,
            "text": "\n  private loadConfigFile(configFile: string): RoomConfig {\n    if (!fs.existsSync(configFile)) {\n      throw new Error(`Configuration file not found: ${configFile}`);\n    }",
            "fullText": "\n  private loadConfigFile(configFile: string): RoomConfig {\n    if (!fs.existsSync(configFile)) {\n      throw new Error(`Configuration file not found: ${configFile}`);\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 86-90",
            "startLine": 86,
            "endLine": 90,
            "lines": 5,
            "text": "  private loadConfigFile(configFile: string): RoomConfig {\n    if (!fs.existsSync(configFile)) {\n      throw new Error(`Configuration file not found: ${configFile}`);\n    }\n",
            "fullText": "  private loadConfigFile(configFile: string): RoomConfig {\n    if (!fs.existsSync(configFile)) {\n      throw new Error(`Configuration file not found: ${configFile}`);\n    }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f7bd462d437b54ca6a8176ba6d93c43d",
        "locations": [
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 122-126",
            "startLine": 122,
            "endLine": 126,
            "lines": 5,
            "text": "      \n      // Step 2: Server will automatically initialize coordinator based on room config\n      console.log(chalk.cyan(`\\n🤖 Coordinator will be initialized automatically...`));\n      console.log(...",
            "fullText": "      \n      // Step 2: Server will automatically initialize coordinator based on room config\n      console.log(chalk.cyan(`\\n🤖 Coordinator will be initialized automatically...`));\n      console.log(chalk.gray(`Room ID: ${this.config.roomId}`));\n      ",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 123-127",
            "startLine": 123,
            "endLine": 127,
            "lines": 5,
            "text": "      // Step 2: Server will automatically initialize coordinator based on room config\n      console.log(chalk.cyan(`\\n🤖 Coordinator will be initialized automatically...`));\n      console.log(chalk.g...",
            "fullText": "      // Step 2: Server will automatically initialize coordinator based on room config\n      console.log(chalk.cyan(`\\n🤖 Coordinator will be initialized automatically...`));\n      console.log(chalk.gray(`Room ID: ${this.config.roomId}`));\n      \n      // Step 3: Connect user if auto-join is enabled",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6dbdf6869fdc8c4f3219ee40ee48733d",
        "locations": [
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 181-185",
            "startLine": 181,
            "endLine": 185,
            "lines": 5,
            "text": "      \n      this.ws!.on('error', (error) => {\n        console.error(chalk.red('Connection error:'), error);\n        reject(error);\n      });",
            "fullText": "      \n      this.ws!.on('error', (error) => {\n        console.error(chalk.red('Connection error:'), error);\n        reject(error);\n      });",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 182-186",
            "startLine": 182,
            "endLine": 186,
            "lines": 5,
            "text": "      this.ws!.on('error', (error) => {\n        console.error(chalk.red('Connection error:'), error);\n        reject(error);\n      });\n      ",
            "fullText": "      this.ws!.on('error', (error) => {\n        console.error(chalk.red('Connection error:'), error);\n        reject(error);\n      });\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_e7f78fbc909dd0cd08564f8e24e96bb5",
        "locations": [
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 206-210",
            "startLine": 206,
            "endLine": 210,
            "lines": 5,
            "text": "      \n      case 'user_joined':\n        const joinMsg = message.payload.message;\n        console.log(chalk.green(`→ ${joinMsg.content}`));\n        break;",
            "fullText": "      \n      case 'user_joined':\n        const joinMsg = message.payload.message;\n        console.log(chalk.green(`→ ${joinMsg.content}`));\n        break;",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 207-211",
            "startLine": 207,
            "endLine": 211,
            "lines": 5,
            "text": "      case 'user_joined':\n        const joinMsg = message.payload.message;\n        console.log(chalk.green(`→ ${joinMsg.content}`));\n        break;\n      ",
            "fullText": "      case 'user_joined':\n        const joinMsg = message.payload.message;\n        console.log(chalk.green(`→ ${joinMsg.content}`));\n        break;\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ce9766e8b6a6f614bb0c61e1261d497c",
        "locations": [
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 211-215",
            "startLine": 211,
            "endLine": 215,
            "lines": 5,
            "text": "      \n      case 'user_left':\n        const leftMsg = message.payload.message;\n        console.log(chalk.yellow(`← ${leftMsg.content}`));\n        break;",
            "fullText": "      \n      case 'user_left':\n        const leftMsg = message.payload.message;\n        console.log(chalk.yellow(`← ${leftMsg.content}`));\n        break;",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 212-216",
            "startLine": 212,
            "endLine": 216,
            "lines": 5,
            "text": "      case 'user_left':\n        const leftMsg = message.payload.message;\n        console.log(chalk.yellow(`← ${leftMsg.content}`));\n        break;\n      ",
            "fullText": "      case 'user_left':\n        const leftMsg = message.payload.message;\n        console.log(chalk.yellow(`← ${leftMsg.content}`));\n        break;\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_642db304a71d9bd7477e6ca6cb956f5f",
        "locations": [
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 299-303",
            "startLine": 299,
            "endLine": 303,
            "lines": 5,
            "text": "      \n      case '--room':\n      case '-r':\n        config.roomId = args[++i];\n        break;",
            "fullText": "      \n      case '--room':\n      case '-r':\n        config.roomId = args[++i];\n        break;",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 300-304",
            "startLine": 300,
            "endLine": 304,
            "lines": 5,
            "text": "      case '--room':\n      case '-r':\n        config.roomId = args[++i];\n        break;\n      ",
            "fullText": "      case '--room':\n      case '-r':\n        config.roomId = args[++i];\n        break;\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_1a630b4a4d3649fdde231c34a60642a9",
        "locations": [
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 304-308",
            "startLine": 304,
            "endLine": 308,
            "lines": 5,
            "text": "      \n      case '--coordinator':\n      case '-c':\n        config.coordinatorType = args[++i] as CoordinatorType;\n        break;",
            "fullText": "      \n      case '--coordinator':\n      case '-c':\n        config.coordinatorType = args[++i] as CoordinatorType;\n        break;",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 305-309",
            "startLine": 305,
            "endLine": 309,
            "lines": 5,
            "text": "      case '--coordinator':\n      case '-c':\n        config.coordinatorType = args[++i] as CoordinatorType;\n        break;\n      ",
            "fullText": "      case '--coordinator':\n      case '-c':\n        config.coordinatorType = args[++i] as CoordinatorType;\n        break;\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_db8b0cfe264877f792da9912900f826e",
        "locations": [
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 315-319",
            "startLine": 315,
            "endLine": 319,
            "lines": 5,
            "text": "      \n      case '--config':\n      case '-f':\n        config.configFile = args[++i];\n        break;",
            "fullText": "      \n      case '--config':\n      case '-f':\n        config.configFile = args[++i];\n        break;",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 316-320",
            "startLine": 316,
            "endLine": 320,
            "lines": 5,
            "text": "      case '--config':\n      case '-f':\n        config.configFile = args[++i];\n        break;\n      ",
            "fullText": "      case '--config':\n      case '-f':\n        config.configFile = args[++i];\n        break;\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_539a597a4c0f34825c83a07aa9c23e30",
        "locations": [
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 320-324",
            "startLine": 320,
            "endLine": 324,
            "lines": 5,
            "text": "      \n      case '--name':\n      case '-n':\n        config.userName = args[++i];\n        break;",
            "fullText": "      \n      case '--name':\n      case '-n':\n        config.userName = args[++i];\n        break;",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 321-325",
            "startLine": 321,
            "endLine": 325,
            "lines": 5,
            "text": "      case '--name':\n      case '-n':\n        config.userName = args[++i];\n        break;\n      ",
            "fullText": "      case '--name':\n      case '-n':\n        config.userName = args[++i];\n        break;\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_fc6479c484b51a59f41e3f5824e0924e",
        "locations": [
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 329-333",
            "startLine": 329,
            "endLine": 333,
            "lines": 5,
            "text": "      \n      case '--help':\n      case '-h':\n        console.log(`\nEnhanced All-in-One Chat Room",
            "fullText": "      \n      case '--help':\n      case '-h':\n        console.log(`\nEnhanced All-in-One Chat Room",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 330-334",
            "startLine": 330,
            "endLine": 334,
            "lines": 5,
            "text": "      case '--help':\n      case '-h':\n        console.log(`\nEnhanced All-in-One Chat Room\n",
            "fullText": "      case '--help':\n      case '-h':\n        console.log(`\nEnhanced All-in-One Chat Room\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6348e5ff18de1ed31d91d87b944129c9",
        "locations": [
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 358-362",
            "startLine": 358,
            "endLine": 362,
            "lines": 5,
            "text": "  \n  chatRoom.start().catch(error => {\n    console.error(chalk.red('Failed to start:'), error);\n    process.exit(1);\n  });",
            "fullText": "  \n  chatRoom.start().catch(error => {\n    console.error(chalk.red('Failed to start:'), error);\n    process.exit(1);\n  });",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 359-363",
            "startLine": 359,
            "endLine": 363,
            "lines": 5,
            "text": "  chatRoom.start().catch(error => {\n    console.error(chalk.red('Failed to start:'), error);\n    process.exit(1);\n  });\n  ",
            "fullText": "  chatRoom.start().catch(error => {\n    console.error(chalk.red('Failed to start:'), error);\n    process.exit(1);\n  });\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3226f8b2634dd133c937c4f4808c2db5",
        "locations": [
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 364-368",
            "startLine": 364,
            "endLine": 368,
            "lines": 5,
            "text": "  // Handle shutdown\n  process.on('SIGINT', () => {\n    chatRoom.shutdown();\n    process.exit(0);\n  });",
            "fullText": "  // Handle shutdown\n  process.on('SIGINT', () => {\n    chatRoom.shutdown();\n    process.exit(0);\n  });",
            "isTextBlock": true
          },
          {
            "file": "src/enhanced-all-in-one.ts",
            "name": "lines 365-369",
            "startLine": 365,
            "endLine": 369,
            "lines": 5,
            "text": "  process.on('SIGINT', () => {\n    chatRoom.shutdown();\n    process.exit(0);\n  });\n  ",
            "fullText": "  process.on('SIGINT', () => {\n    chatRoom.shutdown();\n    process.exit(0);\n  });\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9ca3d644ed3ff13dfa431deb11e568bc",
        "locations": [
          {
            "file": "src/index.ts",
            "name": "lines 2-6",
            "startLine": 2,
            "endLine": 6,
            "lines": 5,
            "text": "\nimport { ChatServer } from './server/chat-server';\nimport chalk from 'chalk';\n\nconst PORT = parseInt(process.env.CHAT_PORT || '3000', 10);",
            "fullText": "\nimport { ChatServer } from './server/chat-server';\nimport chalk from 'chalk';\n\nconst PORT = parseInt(process.env.CHAT_PORT || '3000', 10);",
            "isTextBlock": true
          },
          {
            "file": "src/index.ts",
            "name": "lines 3-7",
            "startLine": 3,
            "endLine": 7,
            "lines": 5,
            "text": "import { ChatServer } from './server/chat-server';\nimport chalk from 'chalk';\n\nconst PORT = parseInt(process.env.CHAT_PORT || '3000', 10);\n",
            "fullText": "import { ChatServer } from './server/chat-server';\nimport chalk from 'chalk';\n\nconst PORT = parseInt(process.env.CHAT_PORT || '3000', 10);\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_27b7e1be46a4a7ed9f9c0293837c033b",
        "locations": [
          {
            "file": "src/index.ts",
            "name": "lines 28-32",
            "startLine": 28,
            "endLine": 32,
            "lines": 5,
            "text": "\n    process.on('SIGTERM', async () => {\n      await server.stop();\n      process.exit(0);\n    });",
            "fullText": "\n    process.on('SIGTERM', async () => {\n      await server.stop();\n      process.exit(0);\n    });",
            "isTextBlock": true
          },
          {
            "file": "src/index.ts",
            "name": "lines 29-33",
            "startLine": 29,
            "endLine": 33,
            "lines": 5,
            "text": "    process.on('SIGTERM', async () => {\n      await server.stop();\n      process.exit(0);\n    });\n",
            "fullText": "    process.on('SIGTERM', async () => {\n      await server.stop();\n      process.exit(0);\n    });\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3461a049ae2deae854547e5049e1869f",
        "locations": [
          {
            "file": "src/server.ts",
            "name": "lines 7-11",
            "startLine": 7,
            "endLine": 11,
            "lines": 5,
            "text": "\nimport { EnhancedChatServer } from './server/enhanced-chat-server';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { RoomConfig, CoordinatorType } from './config/room-config.schema';",
            "fullText": "\nimport { EnhancedChatServer } from './server/enhanced-chat-server';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { RoomConfig, CoordinatorType } from './config/room-config.schema';",
            "isTextBlock": true
          },
          {
            "file": "src/server.ts",
            "name": "lines 8-12",
            "startLine": 8,
            "endLine": 12,
            "lines": 5,
            "text": "import { EnhancedChatServer } from './server/enhanced-chat-server';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { RoomConfig, CoordinatorType } from './config/room-config.schema';\n",
            "fullText": "import { EnhancedChatServer } from './server/enhanced-chat-server';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { RoomConfig, CoordinatorType } from './config/room-config.schema';\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_2427574807f2daf6067271ad25264a45",
        "locations": [
          {
            "file": "src/server.ts",
            "name": "lines 41-45",
            "startLine": 41,
            "endLine": 45,
            "lines": 5,
            "text": "  \n  fs.writeFileSync(defaultConfigPath, JSON.stringify(defaultConfig, null, 2));\n  console.log('Created default room configuration');\n}\n",
            "fullText": "  \n  fs.writeFileSync(defaultConfigPath, JSON.stringify(defaultConfig, null, 2));\n  console.log('Created default room configuration');\n}\n",
            "isTextBlock": true
          },
          {
            "file": "src/server.ts",
            "name": "lines 42-46",
            "startLine": 42,
            "endLine": 46,
            "lines": 5,
            "text": "  fs.writeFileSync(defaultConfigPath, JSON.stringify(defaultConfig, null, 2));\n  console.log('Created default room configuration');\n}\n\n// Create example configurations",
            "fullText": "  fs.writeFileSync(defaultConfigPath, JSON.stringify(defaultConfig, null, 2));\n  console.log('Created default room configuration');\n}\n\n// Create example configurations",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_79b0b83b008c4c04dace1922864a7f86",
        "locations": [
          {
            "file": "src/server.ts",
            "name": "lines 59-63",
            "startLine": 59,
            "endLine": 63,
            "lines": 5,
            "text": "      },\n      features: {\n        allowAgents: true,\n        maxUsers: 20,\n        messageHistory: 500,",
            "fullText": "      },\n      features: {\n        allowAgents: true,\n        maxUsers: 20,\n        messageHistory: 500,",
            "isTextBlock": true
          },
          {
            "file": "src/server.ts",
            "name": "lines 79-83",
            "startLine": 79,
            "endLine": 83,
            "lines": 5,
            "text": "      },\n      features: {\n        allowAgents: true,\n        maxUsers: 20,\n        messageHistory: 500,",
            "fullText": "      },\n      features: {\n        allowAgents: true,\n        maxUsers: 20,\n        messageHistory: 500,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8f2fd4fdd49f90882efbae2475d19d3c",
        "locations": [
          {
            "file": "src/server.ts",
            "name": "lines 60-64",
            "startLine": 60,
            "endLine": 64,
            "lines": 5,
            "text": "      features: {\n        allowAgents: true,\n        maxUsers: 20,\n        messageHistory: 500,\n        enableCommands: true",
            "fullText": "      features: {\n        allowAgents: true,\n        maxUsers: 20,\n        messageHistory: 500,\n        enableCommands: true",
            "isTextBlock": true
          },
          {
            "file": "src/server.ts",
            "name": "lines 80-84",
            "startLine": 80,
            "endLine": 84,
            "lines": 5,
            "text": "      features: {\n        allowAgents: true,\n        maxUsers: 20,\n        messageHistory: 500,\n        enableCommands: true",
            "fullText": "      features: {\n        allowAgents: true,\n        maxUsers: 20,\n        messageHistory: 500,\n        enableCommands: true",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_58e5d2591be823a7f7911827b4b4195a",
        "locations": [
          {
            "file": "src/server.ts",
            "name": "lines 61-65",
            "startLine": 61,
            "endLine": 65,
            "lines": 5,
            "text": "        allowAgents: true,\n        maxUsers: 20,\n        messageHistory: 500,\n        enableCommands: true\n      }",
            "fullText": "        allowAgents: true,\n        maxUsers: 20,\n        messageHistory: 500,\n        enableCommands: true\n      }",
            "isTextBlock": true
          },
          {
            "file": "src/server.ts",
            "name": "lines 81-85",
            "startLine": 81,
            "endLine": 85,
            "lines": 5,
            "text": "        allowAgents: true,\n        maxUsers: 20,\n        messageHistory: 500,\n        enableCommands: true\n      }",
            "fullText": "        allowAgents: true,\n        maxUsers: 20,\n        messageHistory: 500,\n        enableCommands: true\n      }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c8632c9031445adaad37dd3a187dd63b",
        "locations": [
          {
            "file": "src/server.ts",
            "name": "lines 62-66",
            "startLine": 62,
            "endLine": 66,
            "lines": 5,
            "text": "        maxUsers: 20,\n        messageHistory: 500,\n        enableCommands: true\n      }\n    }",
            "fullText": "        maxUsers: 20,\n        messageHistory: 500,\n        enableCommands: true\n      }\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/server.ts",
            "name": "lines 82-86",
            "startLine": 82,
            "endLine": 86,
            "lines": 5,
            "text": "        maxUsers: 20,\n        messageHistory: 500,\n        enableCommands: true\n      }\n    }",
            "fullText": "        maxUsers: 20,\n        messageHistory: 500,\n        enableCommands: true\n      }\n    }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9c65e69f1c44b259afd88b9865eddfb8",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 6-10",
            "startLine": 6,
            "endLine": 10,
            "lines": 5,
            "text": "  serverUrl: string;\n  username: string;\n  roomId: string;\n  isAgent?: boolean;\n}",
            "fullText": "  serverUrl: string;\n  username: string;\n  roomId: string;\n  isAgent?: boolean;\n}",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 7-11",
            "startLine": 7,
            "endLine": 11,
            "lines": 5,
            "text": "  serverUrl: string;\n  username: string;\n  roomId: string;\n  isAgent?: boolean;\n}",
            "fullText": "  serverUrl: string;\n  username: string;\n  roomId: string;\n  isAgent?: boolean;\n}",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_dd34023a321e1036ddd911b85f952238",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 20-24",
            "startLine": 20,
            "endLine": 24,
            "lines": 5,
            "text": "  }\n\n  async connect(): Promise<void> {\n    console.log(chalk.yellow(`Connecting to ${this.config.serverUrl}...`));\n    ",
            "fullText": "  }\n\n  async connect(): Promise<void> {\n    console.log(chalk.yellow(`Connecting to ${this.config.serverUrl}...`));\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 65-69",
            "startLine": 65,
            "endLine": 69,
            "lines": 5,
            "text": "  }\n\n  async connect(): Promise<void> {\n    console.log(chalk.yellow(`Connecting to ${this.config.serverUrl}...`));\n",
            "fullText": "  }\n\n  async connect(): Promise<void> {\n    console.log(chalk.yellow(`Connecting to ${this.config.serverUrl}...`));\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_1cb267b4f95b5ae89a938b98863880bf",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 21-25",
            "startLine": 21,
            "endLine": 25,
            "lines": 5,
            "text": "\n  async connect(): Promise<void> {\n    console.log(chalk.yellow(`Connecting to ${this.config.serverUrl}...`));\n    \n    return new Promise((Working on, reject) => {",
            "fullText": "\n  async connect(): Promise<void> {\n    console.log(chalk.yellow(`Connecting to ${this.config.serverUrl}...`));\n    \n    return new Promise((Working on, reject) => {",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 66-70",
            "startLine": 66,
            "endLine": 70,
            "lines": 5,
            "text": "\n  async connect(): Promise<void> {\n    console.log(chalk.yellow(`Connecting to ${this.config.serverUrl}...`));\n\n    return new Promise((Working on, reject) => {",
            "fullText": "\n  async connect(): Promise<void> {\n    console.log(chalk.yellow(`Connecting to ${this.config.serverUrl}...`));\n\n    return new Promise((Working on, reject) => {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8b4698bd80b819df076f7db1ca17b78b",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 22-26",
            "startLine": 22,
            "endLine": 26,
            "lines": 5,
            "text": "  async connect(): Promise<void> {\n    console.log(chalk.yellow(`Connecting to ${this.config.serverUrl}...`));\n    \n    return new Promise((Working on, reject) => {\n      this.ws = new WebSocket(this.con...",
            "fullText": "  async connect(): Promise<void> {\n    console.log(chalk.yellow(`Connecting to ${this.config.serverUrl}...`));\n    \n    return new Promise((Working on, reject) => {\n      this.ws = new WebSocket(this.config.serverUrl);",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 67-71",
            "startLine": 67,
            "endLine": 71,
            "lines": 5,
            "text": "  async connect(): Promise<void> {\n    console.log(chalk.yellow(`Connecting to ${this.config.serverUrl}...`));\n\n    return new Promise((Working on, reject) => {\n      this.ws = new WebSocket(this.config....",
            "fullText": "  async connect(): Promise<void> {\n    console.log(chalk.yellow(`Connecting to ${this.config.serverUrl}...`));\n\n    return new Promise((Working on, reject) => {\n      this.ws = new WebSocket(this.config.serverUrl);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_14be219aa272402023b43f2d39b99784",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 23-27",
            "startLine": 23,
            "endLine": 27,
            "lines": 5,
            "text": "    console.log(chalk.yellow(`Connecting to ${this.config.serverUrl}...`));\n    \n    return new Promise((Working on, reject) => {\n      this.ws = new WebSocket(this.config.serverUrl);\n",
            "fullText": "    console.log(chalk.yellow(`Connecting to ${this.config.serverUrl}...`));\n    \n    return new Promise((Working on, reject) => {\n      this.ws = new WebSocket(this.config.serverUrl);\n",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 68-72",
            "startLine": 68,
            "endLine": 72,
            "lines": 5,
            "text": "    console.log(chalk.yellow(`Connecting to ${this.config.serverUrl}...`));\n\n    return new Promise((Working on, reject) => {\n      this.ws = new WebSocket(this.config.serverUrl);\n",
            "fullText": "    console.log(chalk.yellow(`Connecting to ${this.config.serverUrl}...`));\n\n    return new Promise((Working on, reject) => {\n      this.ws = new WebSocket(this.config.serverUrl);\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c92ef84c2e1989637afad922269eece9",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 24-28",
            "startLine": 24,
            "endLine": 28,
            "lines": 5,
            "text": "    \n    return new Promise((Working on, reject) => {\n      this.ws = new WebSocket(this.config.serverUrl);\n\n      this.ws.on('open', () => {",
            "fullText": "    \n    return new Promise((Working on, reject) => {\n      this.ws = new WebSocket(this.config.serverUrl);\n\n      this.ws.on('open', () => {",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 69-73",
            "startLine": 69,
            "endLine": 73,
            "lines": 5,
            "text": "\n    return new Promise((Working on, reject) => {\n      this.ws = new WebSocket(this.config.serverUrl);\n\n      this.ws.on('open', () => {",
            "fullText": "\n    return new Promise((Working on, reject) => {\n      this.ws = new WebSocket(this.config.serverUrl);\n\n      this.ws.on('open', () => {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3d37bc046be3a957a217ec2288fbcf4d",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 25-29",
            "startLine": 25,
            "endLine": 29,
            "lines": 5,
            "text": "    return new Promise((Working on, reject) => {\n      this.ws = new WebSocket(this.config.serverUrl);\n\n      this.ws.on('open', () => {\n        console.log(chalk.green('Connected to server!'));",
            "fullText": "    return new Promise((Working on, reject) => {\n      this.ws = new WebSocket(this.config.serverUrl);\n\n      this.ws.on('open', () => {\n        console.log(chalk.green('Connected to server!'));",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 70-74",
            "startLine": 70,
            "endLine": 74,
            "lines": 5,
            "text": "    return new Promise((Working on, reject) => {\n      this.ws = new WebSocket(this.config.serverUrl);\n\n      this.ws.on('open', () => {\n        console.log(chalk.green('Connected to server!'));",
            "fullText": "    return new Promise((Working on, reject) => {\n      this.ws = new WebSocket(this.config.serverUrl);\n\n      this.ws.on('open', () => {\n        console.log(chalk.green('Connected to server!'));",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_eb6101e3cf5aa5974e4f37d831757587",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 26-30",
            "startLine": 26,
            "endLine": 30,
            "lines": 5,
            "text": "      this.ws = new WebSocket(this.config.serverUrl);\n\n      this.ws.on('open', () => {\n        console.log(chalk.green('Connected to server!'));\n        this.connected = true;",
            "fullText": "      this.ws = new WebSocket(this.config.serverUrl);\n\n      this.ws.on('open', () => {\n        console.log(chalk.green('Connected to server!'));\n        this.connected = true;",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 71-75",
            "startLine": 71,
            "endLine": 75,
            "lines": 5,
            "text": "      this.ws = new WebSocket(this.config.serverUrl);\n\n      this.ws.on('open', () => {\n        console.log(chalk.green('Connected to server!'));\n        this.connected = true;",
            "fullText": "      this.ws = new WebSocket(this.config.serverUrl);\n\n      this.ws.on('open', () => {\n        console.log(chalk.green('Connected to server!'));\n        this.connected = true;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_947a2b73e047902f8e69e3cdaf855268",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 27-31",
            "startLine": 27,
            "endLine": 31,
            "lines": 5,
            "text": "\n      this.ws.on('open', () => {\n        console.log(chalk.green('Connected to server!'));\n        this.connected = true;\n",
            "fullText": "\n      this.ws.on('open', () => {\n        console.log(chalk.green('Connected to server!'));\n        this.connected = true;\n",
            "isTextBlock": true
          },
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 28-32",
            "startLine": 28,
            "endLine": 32,
            "lines": 5,
            "text": "      this.ws.on('open', () => {\n        console.log(chalk.green('Connected to server!'));\n        this.connected = true;\n\n        // Join room",
            "fullText": "      this.ws.on('open', () => {\n        console.log(chalk.green('Connected to server!'));\n        this.connected = true;\n\n        // Join room",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_4294e96707828688d547ae5a8cac3bae",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 31-35",
            "startLine": 31,
            "endLine": 35,
            "lines": 5,
            "text": "\n        // Join room\n        const joinMessage = {\n          type: WSEventType.JOIN_ROOM,\n          payload: {",
            "fullText": "\n        // Join room\n        const joinMessage = {\n          type: WSEventType.JOIN_ROOM,\n          payload: {",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 77-81",
            "startLine": 77,
            "endLine": 81,
            "lines": 5,
            "text": "\n        // Join room\n        const joinMessage = {\n          type: WSEventType.JOIN_ROOM,\n          payload: {",
            "fullText": "\n        // Join room\n        const joinMessage = {\n          type: WSEventType.JOIN_ROOM,\n          payload: {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8fd30b754b3de7ae0a8e6f2c1bc3b1a0",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 32-36",
            "startLine": 32,
            "endLine": 36,
            "lines": 5,
            "text": "        // Join room\n        const joinMessage = {\n          type: WSEventType.JOIN_ROOM,\n          payload: {\n            roomId: this.config.roomId,",
            "fullText": "        // Join room\n        const joinMessage = {\n          type: WSEventType.JOIN_ROOM,\n          payload: {\n            roomId: this.config.roomId,",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 78-82",
            "startLine": 78,
            "endLine": 82,
            "lines": 5,
            "text": "        // Join room\n        const joinMessage = {\n          type: WSEventType.JOIN_ROOM,\n          payload: {\n            roomId: this.config.roomId,",
            "fullText": "        // Join room\n        const joinMessage = {\n          type: WSEventType.JOIN_ROOM,\n          payload: {\n            roomId: this.config.roomId,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6b6f8f58a347ce70ff39d3d90fc174f1",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 33-37",
            "startLine": 33,
            "endLine": 37,
            "lines": 5,
            "text": "        const joinMessage = {\n          type: WSEventType.JOIN_ROOM,\n          payload: {\n            roomId: this.config.roomId,\n            username: this.config.username,",
            "fullText": "        const joinMessage = {\n          type: WSEventType.JOIN_ROOM,\n          payload: {\n            roomId: this.config.roomId,\n            username: this.config.username,",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 79-83",
            "startLine": 79,
            "endLine": 83,
            "lines": 5,
            "text": "        const joinMessage = {\n          type: WSEventType.JOIN_ROOM,\n          payload: {\n            roomId: this.config.roomId,\n            username: this.config.username,",
            "fullText": "        const joinMessage = {\n          type: WSEventType.JOIN_ROOM,\n          payload: {\n            roomId: this.config.roomId,\n            username: this.config.username,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ee31f75197dfc0530e73fc5ed2ea4cac",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 34-38",
            "startLine": 34,
            "endLine": 38,
            "lines": 5,
            "text": "          type: WSEventType.JOIN_ROOM,\n          payload: {\n            roomId: this.config.roomId,\n            username: this.config.username,\n            isAgent: this.config.isAgent",
            "fullText": "          type: WSEventType.JOIN_ROOM,\n          payload: {\n            roomId: this.config.roomId,\n            username: this.config.username,\n            isAgent: this.config.isAgent",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 80-84",
            "startLine": 80,
            "endLine": 84,
            "lines": 5,
            "text": "          type: WSEventType.JOIN_ROOM,\n          payload: {\n            roomId: this.config.roomId,\n            username: this.config.username,\n            isAgent: this.config.isAgent",
            "fullText": "          type: WSEventType.JOIN_ROOM,\n          payload: {\n            roomId: this.config.roomId,\n            username: this.config.username,\n            isAgent: this.config.isAgent",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ef2d84941ec8fc956b38e503ad31dacf",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 35-39",
            "startLine": 35,
            "endLine": 39,
            "lines": 5,
            "text": "          payload: {\n            roomId: this.config.roomId,\n            username: this.config.username,\n            isAgent: this.config.isAgent\n          },",
            "fullText": "          payload: {\n            roomId: this.config.roomId,\n            username: this.config.username,\n            isAgent: this.config.isAgent\n          },",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 81-85",
            "startLine": 81,
            "endLine": 85,
            "lines": 5,
            "text": "          payload: {\n            roomId: this.config.roomId,\n            username: this.config.username,\n            isAgent: this.config.isAgent\n          },",
            "fullText": "          payload: {\n            roomId: this.config.roomId,\n            username: this.config.username,\n            isAgent: this.config.isAgent\n          },",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ef649fce0873c0b6b05aa8f62b3050e5",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 36-40",
            "startLine": 36,
            "endLine": 40,
            "lines": 5,
            "text": "            roomId: this.config.roomId,\n            username: this.config.username,\n            isAgent: this.config.isAgent\n          },\n          timestamp: new Date()",
            "fullText": "            roomId: this.config.roomId,\n            username: this.config.username,\n            isAgent: this.config.isAgent\n          },\n          timestamp: new Date()",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 82-86",
            "startLine": 82,
            "endLine": 86,
            "lines": 5,
            "text": "            roomId: this.config.roomId,\n            username: this.config.username,\n            isAgent: this.config.isAgent\n          },\n          timestamp: new Date()",
            "fullText": "            roomId: this.config.roomId,\n            username: this.config.username,\n            isAgent: this.config.isAgent\n          },\n          timestamp: new Date()",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_aaf7bad6820072ba00c062b89aca0d28",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 37-41",
            "startLine": 37,
            "endLine": 41,
            "lines": 5,
            "text": "            username: this.config.username,\n            isAgent: this.config.isAgent\n          },\n          timestamp: new Date()\n        };",
            "fullText": "            username: this.config.username,\n            isAgent: this.config.isAgent\n          },\n          timestamp: new Date()\n        };",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 83-87",
            "startLine": 83,
            "endLine": 87,
            "lines": 5,
            "text": "            username: this.config.username,\n            isAgent: this.config.isAgent\n          },\n          timestamp: new Date()\n        };",
            "fullText": "            username: this.config.username,\n            isAgent: this.config.isAgent\n          },\n          timestamp: new Date()\n        };",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_11cbf3aed43fb74cdb20e9a591b18e60",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 44-48",
            "startLine": 44,
            "endLine": 48,
            "lines": 5,
            "text": "        Working on();\n      });\n\n      this.ws.on('message', (data: Buffer) => {\n        try {",
            "fullText": "        Working on();\n      });\n\n      this.ws.on('message', (data: Buffer) => {\n        try {",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 92-96",
            "startLine": 92,
            "endLine": 96,
            "lines": 5,
            "text": "        Working on();\n      });\n\n      this.ws.on('message', (data: Buffer) => {\n        try {",
            "fullText": "        Working on();\n      });\n\n      this.ws.on('message', (data: Buffer) => {\n        try {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_79fd705430ec20aff2187861fcbf1fc4",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 45-49",
            "startLine": 45,
            "endLine": 49,
            "lines": 5,
            "text": "      });\n\n      this.ws.on('message', (data: Buffer) => {\n        try {\n          const message: WSMessage = JSON.parse(data.toString());",
            "fullText": "      });\n\n      this.ws.on('message', (data: Buffer) => {\n        try {\n          const message: WSMessage = JSON.parse(data.toString());",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 93-97",
            "startLine": 93,
            "endLine": 97,
            "lines": 5,
            "text": "      });\n\n      this.ws.on('message', (data: Buffer) => {\n        try {\n          const message: WSMessage = JSON.parse(data.toString());",
            "fullText": "      });\n\n      this.ws.on('message', (data: Buffer) => {\n        try {\n          const message: WSMessage = JSON.parse(data.toString());",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_d0c6ff39449144b0a1e90bf1f137768c",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 51-55",
            "startLine": 51,
            "endLine": 55,
            "lines": 5,
            "text": "        } catch (error) {\n          console.error(chalk.red('Error parsing server message:'), error);\n        }\n      });\n",
            "fullText": "        } catch (error) {\n          console.error(chalk.red('Error parsing server message:'), error);\n        }\n      });\n",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 99-103",
            "startLine": 99,
            "endLine": 103,
            "lines": 5,
            "text": "        } catch (error) {\n          console.error(chalk.red('Error parsing server message:'), error);\n        }\n      });\n",
            "fullText": "        } catch (error) {\n          console.error(chalk.red('Error parsing server message:'), error);\n        }\n      });\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0dadf00a0d11393cce13d02c8d4123b6",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 52-56",
            "startLine": 52,
            "endLine": 56,
            "lines": 5,
            "text": "          console.error(chalk.red('Error parsing server message:'), error);\n        }\n      });\n\n      this.ws.on('close', () => {",
            "fullText": "          console.error(chalk.red('Error parsing server message:'), error);\n        }\n      });\n\n      this.ws.on('close', () => {",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 100-104",
            "startLine": 100,
            "endLine": 104,
            "lines": 5,
            "text": "          console.error(chalk.red('Error parsing server message:'), error);\n        }\n      });\n\n      this.ws.on('close', () => {",
            "fullText": "          console.error(chalk.red('Error parsing server message:'), error);\n        }\n      });\n\n      this.ws.on('close', () => {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_045b629078572fac9c7b1c0f1dd6bb61",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 55-59",
            "startLine": 55,
            "endLine": 59,
            "lines": 5,
            "text": "\n      this.ws.on('close', () => {\n        this.connected = false;\n        console.log(chalk.yellow('Disconnected from server'));\n      });",
            "fullText": "\n      this.ws.on('close', () => {\n        this.connected = false;\n        console.log(chalk.yellow('Disconnected from server'));\n      });",
            "isTextBlock": true
          },
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 56-60",
            "startLine": 56,
            "endLine": 60,
            "lines": 5,
            "text": "      this.ws.on('close', () => {\n        this.connected = false;\n        console.log(chalk.yellow('Disconnected from server'));\n      });\n",
            "fullText": "      this.ws.on('close', () => {\n        this.connected = false;\n        console.log(chalk.yellow('Disconnected from server'));\n      });\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_414261d6570b5a5517ea7ef9d96cd9e9",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 59-63",
            "startLine": 59,
            "endLine": 63,
            "lines": 5,
            "text": "      });\n\n      this.ws.on('error', (error) => {\n        console.error(chalk.red('WebSocket error:'), error.message);\n        reject(error);",
            "fullText": "      });\n\n      this.ws.on('error', (error) => {\n        console.error(chalk.red('WebSocket error:'), error.message);\n        reject(error);",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 108-112",
            "startLine": 108,
            "endLine": 112,
            "lines": 5,
            "text": "      });\n\n      this.ws.on('error', (error) => {\n        console.error(chalk.red('WebSocket error:'), error.message);\n        reject(error);",
            "fullText": "      });\n\n      this.ws.on('error', (error) => {\n        console.error(chalk.red('WebSocket error:'), error.message);\n        reject(error);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_e699f18c048dc0bb89736293819d8b39",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 60-64",
            "startLine": 60,
            "endLine": 64,
            "lines": 5,
            "text": "\n      this.ws.on('error', (error) => {\n        console.error(chalk.red('WebSocket error:'), error.message);\n        reject(error);\n      });",
            "fullText": "\n      this.ws.on('error', (error) => {\n        console.error(chalk.red('WebSocket error:'), error.message);\n        reject(error);\n      });",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 109-113",
            "startLine": 109,
            "endLine": 113,
            "lines": 5,
            "text": "\n      this.ws.on('error', (error) => {\n        console.error(chalk.red('WebSocket error:'), error.message);\n        reject(error);\n      });",
            "fullText": "\n      this.ws.on('error', (error) => {\n        console.error(chalk.red('WebSocket error:'), error.message);\n        reject(error);\n      });",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a494a4d3e5265d79271f396cf3bfa0f8",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 61-65",
            "startLine": 61,
            "endLine": 65,
            "lines": 5,
            "text": "      this.ws.on('error', (error) => {\n        console.error(chalk.red('WebSocket error:'), error.message);\n        reject(error);\n      });\n    });",
            "fullText": "      this.ws.on('error', (error) => {\n        console.error(chalk.red('WebSocket error:'), error.message);\n        reject(error);\n      });\n    });",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 110-114",
            "startLine": 110,
            "endLine": 114,
            "lines": 5,
            "text": "      this.ws.on('error', (error) => {\n        console.error(chalk.red('WebSocket error:'), error.message);\n        reject(error);\n      });\n    });",
            "fullText": "      this.ws.on('error', (error) => {\n        console.error(chalk.red('WebSocket error:'), error.message);\n        reject(error);\n      });\n    });",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_eeef71eefda7340b74fded270b22de09",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 62-66",
            "startLine": 62,
            "endLine": 66,
            "lines": 5,
            "text": "        console.error(chalk.red('WebSocket error:'), error.message);\n        reject(error);\n      });\n    });\n  }",
            "fullText": "        console.error(chalk.red('WebSocket error:'), error.message);\n        reject(error);\n      });\n    });\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 111-115",
            "startLine": 111,
            "endLine": 115,
            "lines": 5,
            "text": "        console.error(chalk.red('WebSocket error:'), error.message);\n        reject(error);\n      });\n    });\n  }",
            "fullText": "        console.error(chalk.red('WebSocket error:'), error.message);\n        reject(error);\n      });\n    });\n  }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f1f8bcccf19a12d83c3566e45c8b1a7c",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 67-71",
            "startLine": 67,
            "endLine": 71,
            "lines": 5,
            "text": "\n  private handleMessage(message: WSMessage) {\n    // Call all registered handlers\n    this.messageHandlers.forEach(handler => handler(message));\n",
            "fullText": "\n  private handleMessage(message: WSMessage) {\n    // Call all registered handlers\n    this.messageHandlers.forEach(handler => handler(message));\n",
            "isTextBlock": true
          },
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 68-72",
            "startLine": 68,
            "endLine": 72,
            "lines": 5,
            "text": "  private handleMessage(message: WSMessage) {\n    // Call all registered handlers\n    this.messageHandlers.forEach(handler => handler(message));\n\n    // Basic logging",
            "fullText": "  private handleMessage(message: WSMessage) {\n    // Call all registered handlers\n    this.messageHandlers.forEach(handler => handler(message));\n\n    // Basic logging",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a068dad3f73ff3522f1c3c721fb8579b",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 126-130",
            "startLine": 126,
            "endLine": 130,
            "lines": 5,
            "text": "    if (this.ws) {\n      this.sendMessage({\n        type: WSEventType.LEAVE_ROOM,\n        payload: {},\n        timestamp: new Date()",
            "fullText": "    if (this.ws) {\n      this.sendMessage({\n        type: WSEventType.LEAVE_ROOM,\n        payload: {},\n        timestamp: new Date()",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 291-295",
            "startLine": 291,
            "endLine": 295,
            "lines": 5,
            "text": "    if (this.ws) {\n      this.sendMessage({\n        type: WSEventType.LEAVE_ROOM,\n        payload: {},\n        timestamp: new Date()",
            "fullText": "    if (this.ws) {\n      this.sendMessage({\n        type: WSEventType.LEAVE_ROOM,\n        payload: {},\n        timestamp: new Date()",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b8266f9c8800c0fe7cd25cd85a6ae612",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 127-131",
            "startLine": 127,
            "endLine": 131,
            "lines": 5,
            "text": "      this.sendMessage({\n        type: WSEventType.LEAVE_ROOM,\n        payload: {},\n        timestamp: new Date()\n      });",
            "fullText": "      this.sendMessage({\n        type: WSEventType.LEAVE_ROOM,\n        payload: {},\n        timestamp: new Date()\n      });",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 292-296",
            "startLine": 292,
            "endLine": 296,
            "lines": 5,
            "text": "      this.sendMessage({\n        type: WSEventType.LEAVE_ROOM,\n        payload: {},\n        timestamp: new Date()\n      });",
            "fullText": "      this.sendMessage({\n        type: WSEventType.LEAVE_ROOM,\n        payload: {},\n        timestamp: new Date()\n      });",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_748783d8f338121eb5b81f873e756ac6",
        "locations": [
          {
            "file": "src/agents/automated-client.ts",
            "name": "lines 128-132",
            "startLine": 128,
            "endLine": 132,
            "lines": 5,
            "text": "        type: WSEventType.LEAVE_ROOM,\n        payload: {},\n        timestamp: new Date()\n      });\n      this.ws.close();",
            "fullText": "        type: WSEventType.LEAVE_ROOM,\n        payload: {},\n        timestamp: new Date()\n      });\n      this.ws.close();",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 293-297",
            "startLine": 293,
            "endLine": 297,
            "lines": 5,
            "text": "        type: WSEventType.LEAVE_ROOM,\n        payload: {},\n        timestamp: new Date()\n      });\n      this.ws.close();",
            "fullText": "        type: WSEventType.LEAVE_ROOM,\n        payload: {},\n        timestamp: new Date()\n      });\n      this.ws.close();",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_d74691e17c94fde9b6e1f57a0f18609c",
        "locations": [
          {
            "file": "src/agents/calculator.ts",
            "name": "lines 20-24",
            "startLine": 20,
            "endLine": 24,
            "lines": 5,
            "text": "\n  // Public accessor for tests\n  get agentName(): string {\n    return this.config.agentName;\n  }",
            "fullText": "\n  // Public accessor for tests\n  get agentName(): string {\n    return this.config.agentName;\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/calculator.ts",
            "name": "lines 21-25",
            "startLine": 21,
            "endLine": 25,
            "lines": 5,
            "text": "  // Public accessor for tests\n  get agentName(): string {\n    return this.config.agentName;\n  }\n",
            "fullText": "  // Public accessor for tests\n  get agentName(): string {\n    return this.config.agentName;\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_bfc4895104c41161e8d2ae7399363c4d",
        "locations": [
          {
            "file": "src/agents/calculator.ts",
            "name": "lines 49-53",
            "startLine": 49,
            "endLine": 53,
            "lines": 5,
            "text": "\n  protected async onStart(): Promise<void> {\n    console.log(`🧮 Calculator connected to room ${this.config.roomId}`);\n    await this.sendMessage('🧮 Calculator ready! Try: \"calculate 5 + 3\" or \"what...",
            "fullText": "\n  protected async onStart(): Promise<void> {\n    console.log(`🧮 Calculator connected to room ${this.config.roomId}`);\n    await this.sendMessage('🧮 Calculator ready! Try: \"calculate 5 + 3\" or \"what is 10 * 2?\"');\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/calculator.ts",
            "name": "lines 50-54",
            "startLine": 50,
            "endLine": 54,
            "lines": 5,
            "text": "  protected async onStart(): Promise<void> {\n    console.log(`🧮 Calculator connected to room ${this.config.roomId}`);\n    await this.sendMessage('🧮 Calculator ready! Try: \"calculate 5 + 3\" or \"what ...",
            "fullText": "  protected async onStart(): Promise<void> {\n    console.log(`🧮 Calculator connected to room ${this.config.roomId}`);\n    await this.sendMessage('🧮 Calculator ready! Try: \"calculate 5 + 3\" or \"what is 10 * 2?\"');\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_e04202b2f65ccefa52719de36f61f05e",
        "locations": [
          {
            "file": "src/agents/calculator.ts",
            "name": "lines 67-71",
            "startLine": 67,
            "endLine": 71,
            "lines": 5,
            "text": "    }\n\n    const [, num1Str, operator, num2Str] = match;\n    const num1 = parseFloat(num1Str);\n    const num2 = parseFloat(num2Str);",
            "fullText": "    }\n\n    const [, num1Str, operator, num2Str] = match;\n    const num1 = parseFloat(num1Str);\n    const num2 = parseFloat(num2Str);",
            "isTextBlock": true
          },
          {
            "file": "src/calculator/calculator.ts",
            "name": "lines 84-88",
            "startLine": 84,
            "endLine": 88,
            "lines": 5,
            "text": "    }\n\n    const [, num1Str, operator, num2Str] = match;\n    const num1 = parseFloat(num1Str);\n    const num2 = parseFloat(num2Str);",
            "fullText": "    }\n\n    const [, num1Str, operator, num2Str] = match;\n    const num1 = parseFloat(num1Str);\n    const num2 = parseFloat(num2Str);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_5a49f28e3cfb5898f6c2009e15640eb3",
        "locations": [
          {
            "file": "src/agents/calculator.ts",
            "name": "lines 68-72",
            "startLine": 68,
            "endLine": 72,
            "lines": 5,
            "text": "\n    const [, num1Str, operator, num2Str] = match;\n    const num1 = parseFloat(num1Str);\n    const num2 = parseFloat(num2Str);\n    ",
            "fullText": "\n    const [, num1Str, operator, num2Str] = match;\n    const num1 = parseFloat(num1Str);\n    const num2 = parseFloat(num2Str);\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/calculator/calculator.ts",
            "name": "lines 85-89",
            "startLine": 85,
            "endLine": 89,
            "lines": 5,
            "text": "\n    const [, num1Str, operator, num2Str] = match;\n    const num1 = parseFloat(num1Str);\n    const num2 = parseFloat(num2Str);\n",
            "fullText": "\n    const [, num1Str, operator, num2Str] = match;\n    const num1 = parseFloat(num1Str);\n    const num2 = parseFloat(num2Str);\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_dc9591ad1a092b6d9822a62079f2cd58",
        "locations": [
          {
            "file": "src/agents/calculator.ts",
            "name": "lines 95-99",
            "startLine": 95,
            "endLine": 99,
            "lines": 5,
            "text": "    // Format result (show decimals only if needed)\n    const formattedResult = result % 1 === 0 ? result.toString() : result.toFixed(2);\n    \n    return `🧮 ${num1} ${operator} ${num2} = ${formattedR...",
            "fullText": "    // Format result (show decimals only if needed)\n    const formattedResult = result % 1 === 0 ? result.toString() : result.toFixed(2);\n    \n    return `🧮 ${num1} ${operator} ${num2} = ${formattedResult}`;\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/calculator.ts",
            "name": "lines 96-100",
            "startLine": 96,
            "endLine": 100,
            "lines": 5,
            "text": "    const formattedResult = result % 1 === 0 ? result.toString() : result.toFixed(2);\n    \n    return `🧮 ${num1} ${operator} ${num2} = ${formattedResult}`;\n  }\n",
            "fullText": "    const formattedResult = result % 1 === 0 ? result.toString() : result.toFixed(2);\n    \n    return `🧮 ${num1} ${operator} ${num2} = ${formattedResult}`;\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_27c4ed2fcde50e8f6655e185b4ddba97",
        "locations": [
          {
            "file": "src/agents/calculator.ts",
            "name": "lines 104-108",
            "startLine": 104,
            "endLine": 108,
            "lines": 5,
            "text": "    // Respond to calculation requests\n    return content.includes('calculate') || \n           content.includes('what is') || \n           /\\d+\\s*[\\+\\-\\*\\/]\\s*\\d+/.test(content);\n  }",
            "fullText": "    // Respond to calculation requests\n    return content.includes('calculate') || \n           content.includes('what is') || \n           /\\d+\\s*[\\+\\-\\*\\/]\\s*\\d+/.test(content);\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/calculator.ts",
            "name": "lines 105-109",
            "startLine": 105,
            "endLine": 109,
            "lines": 5,
            "text": "    return content.includes('calculate') || \n           content.includes('what is') || \n           /\\d+\\s*[\\+\\-\\*\\/]\\s*\\d+/.test(content);\n  }\n",
            "fullText": "    return content.includes('calculate') || \n           content.includes('what is') || \n           /\\d+\\s*[\\+\\-\\*\\/]\\s*\\d+/.test(content);\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ea7edfe0312b260000d8974c09854c7c",
        "locations": [
          {
            "file": "src/agents/calculator.ts",
            "name": "lines 109-113",
            "startLine": 109,
            "endLine": 113,
            "lines": 5,
            "text": "\n  // Additional methods for test compatibility\n  public async connect(): Promise<void> {\n    await this.start();\n  }",
            "fullText": "\n  // Additional methods for test compatibility\n  public async connect(): Promise<void> {\n    await this.start();\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/calculator.ts",
            "name": "lines 110-114",
            "startLine": 110,
            "endLine": 114,
            "lines": 5,
            "text": "  // Additional methods for test compatibility\n  public async connect(): Promise<void> {\n    await this.start();\n  }\n",
            "fullText": "  // Additional methods for test compatibility\n  public async connect(): Promise<void> {\n    await this.start();\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_46e44d0ad786c6a74ada2226a2ceb125",
        "locations": [
          {
            "file": "src/agents/calculator.ts",
            "name": "lines 114-118",
            "startLine": 114,
            "endLine": 118,
            "lines": 5,
            "text": "\n  public async disconnect(): Promise<void> {\n    await this.stop();\n  }\n}",
            "fullText": "\n  public async disconnect(): Promise<void> {\n    await this.stop();\n  }\n}",
            "isTextBlock": true
          },
          {
            "file": "src/agents/calculator.ts",
            "name": "lines 115-119",
            "startLine": 115,
            "endLine": 119,
            "lines": 5,
            "text": "  public async disconnect(): Promise<void> {\n    await this.stop();\n  }\n}\n",
            "fullText": "  public async disconnect(): Promise<void> {\n    await this.stop();\n  }\n}\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8f675279c1429a209a2a30ce5ea8d604",
        "locations": [
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 45-49",
            "startLine": 45,
            "endLine": 49,
            "lines": 5,
            "text": "    // Set up message handling\n    this.setupMessageHandling();\n  }\n\n  private setupMessageHandling() {",
            "fullText": "    // Set up message handling\n    this.setupMessageHandling();\n  }\n\n  private setupMessageHandling() {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 46-50",
            "startLine": 46,
            "endLine": 50,
            "lines": 5,
            "text": "    this.setupMessageHandling();\n  }\n\n  private setupMessageHandling() {\n    // Register message handler",
            "fullText": "    this.setupMessageHandling();\n  }\n\n  private setupMessageHandling() {\n    // Register message handler",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_1ce4059bed17c4a0d17b165ea72a97dc",
        "locations": [
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 50-54",
            "startLine": 50,
            "endLine": 54,
            "lines": 5,
            "text": "    // Register message handler\n    this.client.onMessage((message) => {\n      this.handleIncomingMessage(message);\n    });\n  }",
            "fullText": "    // Register message handler\n    this.client.onMessage((message) => {\n      this.handleIncomingMessage(message);\n    });\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 51-55",
            "startLine": 51,
            "endLine": 55,
            "lines": 5,
            "text": "    this.client.onMessage((message) => {\n      this.handleIncomingMessage(message);\n    });\n  }\n",
            "fullText": "    this.client.onMessage((message) => {\n      this.handleIncomingMessage(message);\n    });\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_44ec6c7fd96210c00389118e8dc254cd",
        "locations": [
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 55-59",
            "startLine": 55,
            "endLine": 59,
            "lines": 5,
            "text": "\n  private handleIncomingMessage(message: any) {\n    // Process messages for our agent\n    if (message.type === WSEventType.NEW_MESSAGE && message.payload) {\n      const msg = message.payload;",
            "fullText": "\n  private handleIncomingMessage(message: any) {\n    // Process messages for our agent\n    if (message.type === WSEventType.NEW_MESSAGE && message.payload) {\n      const msg = message.payload;",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 56-60",
            "startLine": 56,
            "endLine": 60,
            "lines": 5,
            "text": "  private handleIncomingMessage(message: any) {\n    // Process messages for our agent\n    if (message.type === WSEventType.NEW_MESSAGE && message.payload) {\n      const msg = message.payload;\n      ",
            "fullText": "  private handleIncomingMessage(message: any) {\n    // Process messages for our agent\n    if (message.type === WSEventType.NEW_MESSAGE && message.payload) {\n      const msg = message.payload;\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_405fbdfcb269a58e919e22f783059c9a",
        "locations": [
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 61-65",
            "startLine": 61,
            "endLine": 65,
            "lines": 5,
            "text": "      // Store in history\n      this.conversationHistory.push(msg);\n      if (this.conversationHistory.length > this.maxHistorySize) {\n        this.conversationHistory.shift();\n      }",
            "fullText": "      // Store in history\n      this.conversationHistory.push(msg);\n      if (this.conversationHistory.length > this.maxHistorySize) {\n        this.conversationHistory.shift();\n      }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 62-66",
            "startLine": 62,
            "endLine": 66,
            "lines": 5,
            "text": "      this.conversationHistory.push(msg);\n      if (this.conversationHistory.length > this.maxHistorySize) {\n        this.conversationHistory.shift();\n      }\n",
            "fullText": "      this.conversationHistory.push(msg);\n      if (this.conversationHistory.length > this.maxHistorySize) {\n        this.conversationHistory.shift();\n      }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c44432c15110862605ed342c106f7f1d",
        "locations": [
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 66-70",
            "startLine": 66,
            "endLine": 70,
            "lines": 5,
            "text": "\n      // Check if message is directed at agent\n      if (msg.type === MessageType.USER_MESSAGE) {\n        const content = msg.content.toLowerCase();\n        ",
            "fullText": "\n      // Check if message is directed at agent\n      if (msg.type === MessageType.USER_MESSAGE) {\n        const content = msg.content.toLowerCase();\n        ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 67-71",
            "startLine": 67,
            "endLine": 71,
            "lines": 5,
            "text": "      // Check if message is directed at agent\n      if (msg.type === MessageType.USER_MESSAGE) {\n        const content = msg.content.toLowerCase();\n        \n        // Check for direct mentions or qu...",
            "fullText": "      // Check if message is directed at agent\n      if (msg.type === MessageType.USER_MESSAGE) {\n        const content = msg.content.toLowerCase();\n        \n        // Check for direct mentions or questions",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c0ea397d545aacda732c1cd9b993bf7e",
        "locations": [
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 83-87",
            "startLine": 83,
            "endLine": 87,
            "lines": 5,
            "text": "\n  private async processUserMessage(message: Message) {\n    const response = await this.generateResponse(message.content, message.username);\n    \n    if (response) {",
            "fullText": "\n  private async processUserMessage(message: Message) {\n    const response = await this.generateResponse(message.content, message.username);\n    \n    if (response) {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 84-88",
            "startLine": 84,
            "endLine": 88,
            "lines": 5,
            "text": "  private async processUserMessage(message: Message) {\n    const response = await this.generateResponse(message.content, message.username);\n    \n    if (response) {\n      // Send response through clie...",
            "fullText": "  private async processUserMessage(message: Message) {\n    const response = await this.generateResponse(message.content, message.username);\n    \n    if (response) {\n      // Send response through client",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_e9c5ebbc09d9027841c06f169fa667ac",
        "locations": [
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 187-191",
            "startLine": 187,
            "endLine": 191,
            "lines": 5,
            "text": "      \n      if (!isNaN(result)) {\n        return `${mathMatch[0]} = ${result}`;\n      }\n    }",
            "fullText": "      \n      if (!isNaN(result)) {\n        return `${mathMatch[0]} = ${result}`;\n      }\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 188-192",
            "startLine": 188,
            "endLine": 192,
            "lines": 5,
            "text": "      if (!isNaN(result)) {\n        return `${mathMatch[0]} = ${result}`;\n      }\n    }\n",
            "fullText": "      if (!isNaN(result)) {\n        return `${mathMatch[0]} = ${result}`;\n      }\n    }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_cf750800da72ae6e3bff656ea0a52faf",
        "locations": [
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 192-196",
            "startLine": 192,
            "endLine": 196,
            "lines": 5,
            "text": "\n    // Common questions\n    if (lowerMessage.includes('what is your name')) {\n      return `I'm ${this.config.agentName}, your AI assistant! 🤖`;\n    }",
            "fullText": "\n    // Common questions\n    if (lowerMessage.includes('what is your name')) {\n      return `I'm ${this.config.agentName}, your AI assistant! 🤖`;\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 193-197",
            "startLine": 193,
            "endLine": 197,
            "lines": 5,
            "text": "    // Common questions\n    if (lowerMessage.includes('what is your name')) {\n      return `I'm ${this.config.agentName}, your AI assistant! 🤖`;\n    }\n",
            "fullText": "    // Common questions\n    if (lowerMessage.includes('what is your name')) {\n      return `I'm ${this.config.agentName}, your AI assistant! 🤖`;\n    }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_44b980b23afa238b33e7e855cf79daa3",
        "locations": [
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 201-205",
            "startLine": 201,
            "endLine": 205,
            "lines": 5,
            "text": "\n    if (lowerMessage.includes('help')) {\n      return 'I can help with math, answer questions, and assist with various topics. Just ask! 📚';\n    }\n",
            "fullText": "\n    if (lowerMessage.includes('help')) {\n      return 'I can help with math, answer questions, and assist with various topics. Just ask! 📚';\n    }\n",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 202-206",
            "startLine": 202,
            "endLine": 206,
            "lines": 5,
            "text": "    if (lowerMessage.includes('help')) {\n      return 'I can help with math, answer questions, and assist with various topics. Just ask! 📚';\n    }\n\n    // Moved hello check to later to avoid overridi...",
            "fullText": "    if (lowerMessage.includes('help')) {\n      return 'I can help with math, answer questions, and assist with various topics. Just ask! 📚';\n    }\n\n    // Moved hello check to later to avoid overriding specific questions",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_20e0a441a5755b573be13e9c1cf29522",
        "locations": [
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 211-215",
            "startLine": 211,
            "endLine": 215,
            "lines": 5,
            "text": "\n    // Programming questions\n    if (lowerMessage.includes('python') && (lowerMessage.includes('hello world') || lowerMessage.includes('hello'))) {\n      return 'Here\\'s Python hello world:\\n\\n```pyt...",
            "fullText": "\n    // Programming questions\n    if (lowerMessage.includes('python') && (lowerMessage.includes('hello world') || lowerMessage.includes('hello'))) {\n      return 'Here\\'s Python hello world:\\n\\n```python\\nprint(\"Hello, World!\")\\n```\\n\\nThis prints \"Hello, World!\" to the console.';\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 212-216",
            "startLine": 212,
            "endLine": 216,
            "lines": 5,
            "text": "    // Programming questions\n    if (lowerMessage.includes('python') && (lowerMessage.includes('hello world') || lowerMessage.includes('hello'))) {\n      return 'Here\\'s Python hello world:\\n\\n```pyth...",
            "fullText": "    // Programming questions\n    if (lowerMessage.includes('python') && (lowerMessage.includes('hello world') || lowerMessage.includes('hello'))) {\n      return 'Here\\'s Python hello world:\\n\\n```python\\nprint(\"Hello, World!\")\\n```\\n\\nThis prints \"Hello, World!\" to the console.';\n    }\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_83987b2f74e64bbf541ef6ccbc6a40b5",
        "locations": [
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 220-224",
            "startLine": 220,
            "endLine": 224,
            "lines": 5,
            "text": "\n    if (lowerMessage.includes('code') || lowerMessage.includes('program')) {\n      return 'I can help with coding! What language or problem are you working with?';\n    }\n",
            "fullText": "\n    if (lowerMessage.includes('code') || lowerMessage.includes('program')) {\n      return 'I can help with coding! What language or problem are you working with?';\n    }\n",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 221-225",
            "startLine": 221,
            "endLine": 225,
            "lines": 5,
            "text": "    if (lowerMessage.includes('code') || lowerMessage.includes('program')) {\n      return 'I can help with coding! What language or problem are you working with?';\n    }\n\n    // Generic greetings (aft...",
            "fullText": "    if (lowerMessage.includes('code') || lowerMessage.includes('program')) {\n      return 'I can help with coding! What language or problem are you working with?';\n    }\n\n    // Generic greetings (after specific checks)",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_2c69dbcae38d9b95b3c46d5691e3a06f",
        "locations": [
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 254-258",
            "startLine": 254,
            "endLine": 258,
            "lines": 5,
            "text": "\n  private summarizeConversation(): string {\n    if (this.conversationHistory.length === 0) {\n      return '📋 No messages to summarize yet.';\n    }",
            "fullText": "\n  private summarizeConversation(): string {\n    if (this.conversationHistory.length === 0) {\n      return '📋 No messages to summarize yet.';\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 255-259",
            "startLine": 255,
            "endLine": 259,
            "lines": 5,
            "text": "  private summarizeConversation(): string {\n    if (this.conversationHistory.length === 0) {\n      return '📋 No messages to summarize yet.';\n    }\n",
            "fullText": "  private summarizeConversation(): string {\n    if (this.conversationHistory.length === 0) {\n      return '📋 No messages to summarize yet.';\n    }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_2b5a48af6b631c6eb29e00f17484df3c",
        "locations": [
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 259-263",
            "startLine": 259,
            "endLine": 263,
            "lines": 5,
            "text": "\n    const participants = this.getParticipants();\n    const messageCount = this.conversationHistory.filter(\n      m => m.type === MessageType.USER_MESSAGE\n    ).length;",
            "fullText": "\n    const participants = this.getParticipants();\n    const messageCount = this.conversationHistory.filter(\n      m => m.type === MessageType.USER_MESSAGE\n    ).length;",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 260-264",
            "startLine": 260,
            "endLine": 264,
            "lines": 5,
            "text": "    const participants = this.getParticipants();\n    const messageCount = this.conversationHistory.filter(\n      m => m.type === MessageType.USER_MESSAGE\n    ).length;\n",
            "fullText": "    const participants = this.getParticipants();\n    const messageCount = this.conversationHistory.filter(\n      m => m.type === MessageType.USER_MESSAGE\n    ).length;\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_2f3c5059990369dc9ba6deec93d1cbd5",
        "locations": [
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 279-283",
            "startLine": 279,
            "endLine": 283,
            "lines": 5,
            "text": "\n  private moderateContent(): string {\n    // Real moderation would use Claude's moderation capabilities\n    return '🔄 Chat moderation active - all messages appropriate so far';\n  }",
            "fullText": "\n  private moderateContent(): string {\n    // Real moderation would use Claude's moderation capabilities\n    return '🔄 Chat moderation active - all messages appropriate so far';\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/claude-coordinator.ts",
            "name": "lines 280-284",
            "startLine": 280,
            "endLine": 284,
            "lines": 5,
            "text": "  private moderateContent(): string {\n    // Real moderation would use Claude's moderation capabilities\n    return '🔄 Chat moderation active - all messages appropriate so far';\n  }\n",
            "fullText": "  private moderateContent(): string {\n    // Real moderation would use Claude's moderation capabilities\n    return '🔄 Chat moderation active - all messages appropriate so far';\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_35c7fa8f092dc2d4ed51d4a0701e8944",
        "locations": [
          {
            "file": "src/agents/coordinator-factory.ts",
            "name": "lines 5-9",
            "startLine": 5,
            "endLine": 9,
            "lines": 5,
            "text": "\nimport { CoordinatorConfig, CoordinatorType } from '../config/room-config.schema';\nimport { BaseCoordinatorAgent } from './coordinator-interface';\nimport { ClaudeCoordinatorAgent } from './claude-coo...",
            "fullText": "\nimport { CoordinatorConfig, CoordinatorType } from '../config/room-config.schema';\nimport { BaseCoordinatorAgent } from './coordinator-interface';\nimport { ClaudeCoordinatorAgent } from './claude-coordinator';\nimport { OllamaCoordinatorAgent } from './ollama-coordinator';",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-factory.ts",
            "name": "lines 6-10",
            "startLine": 6,
            "endLine": 10,
            "lines": 5,
            "text": "import { CoordinatorConfig, CoordinatorType } from '../config/room-config.schema';\nimport { BaseCoordinatorAgent } from './coordinator-interface';\nimport { ClaudeCoordinatorAgent } from './claude-coor...",
            "fullText": "import { CoordinatorConfig, CoordinatorType } from '../config/room-config.schema';\nimport { BaseCoordinatorAgent } from './coordinator-interface';\nimport { ClaudeCoordinatorAgent } from './claude-coordinator';\nimport { OllamaCoordinatorAgent } from './ollama-coordinator';\n// import { OpenAICoordinatorAgent } from './openai-coordinator';",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_88038c061e8822146cffed887d726e53",
        "locations": [
          {
            "file": "src/agents/coordinator-factory.ts",
            "name": "lines 20-24",
            "startLine": 20,
            "endLine": 24,
            "lines": 5,
            "text": "    \n    case CoordinatorType.OLLAMA:\n      return createOllamaCoordinator(config, serverUrl, roomId);\n    \n    case CoordinatorType.OPENAI:",
            "fullText": "    \n    case CoordinatorType.OLLAMA:\n      return createOllamaCoordinator(config, serverUrl, roomId);\n    \n    case CoordinatorType.OPENAI:",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-factory.ts",
            "name": "lines 21-25",
            "startLine": 21,
            "endLine": 25,
            "lines": 5,
            "text": "    case CoordinatorType.OLLAMA:\n      return createOllamaCoordinator(config, serverUrl, roomId);\n    \n    case CoordinatorType.OPENAI:\n      // TODO: Implement OpenAI coordinator",
            "fullText": "    case CoordinatorType.OLLAMA:\n      return createOllamaCoordinator(config, serverUrl, roomId);\n    \n    case CoordinatorType.OPENAI:\n      // TODO: Implement OpenAI coordinator",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_350062ab3e8c5ef52f69f0ec5b7db5ae",
        "locations": [
          {
            "file": "src/agents/coordinator-factory.ts",
            "name": "lines 23-27",
            "startLine": 23,
            "endLine": 27,
            "lines": 5,
            "text": "    \n    case CoordinatorType.OPENAI:\n      // TODO: Implement OpenAI coordinator\n      console.warn('OpenAI coordinator not yet In Progress');\n      return null;",
            "fullText": "    \n    case CoordinatorType.OPENAI:\n      // TODO: Implement OpenAI coordinator\n      console.warn('OpenAI coordinator not yet In Progress');\n      return null;",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-factory.ts",
            "name": "lines 24-28",
            "startLine": 24,
            "endLine": 28,
            "lines": 5,
            "text": "    case CoordinatorType.OPENAI:\n      // TODO: Implement OpenAI coordinator\n      console.warn('OpenAI coordinator not yet In Progress');\n      return null;\n    ",
            "fullText": "    case CoordinatorType.OPENAI:\n      // TODO: Implement OpenAI coordinator\n      console.warn('OpenAI coordinator not yet In Progress');\n      return null;\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b8feb73a0196d06b8f8f04f88833701c",
        "locations": [
          {
            "file": "src/agents/coordinator-factory.ts",
            "name": "lines 77-81",
            "startLine": 77,
            "endLine": 81,
            "lines": 5,
            "text": "\n  // Check Ollama availability\n  const isAvailable = await agent.checkOllamaAvailability();\n  if (!isAvailable) {\n    console.log('Ollama not available, attempting to install...');",
            "fullText": "\n  // Check Ollama availability\n  const isAvailable = await agent.checkOllamaAvailability();\n  if (!isAvailable) {\n    console.log('Ollama not available, attempting to install...');",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-factory.ts",
            "name": "lines 78-82",
            "startLine": 78,
            "endLine": 82,
            "lines": 5,
            "text": "  // Check Ollama availability\n  const isAvailable = await agent.checkOllamaAvailability();\n  if (!isAvailable) {\n    console.log('Ollama not available, attempting to install...');\n    // In a real im...",
            "fullText": "  // Check Ollama availability\n  const isAvailable = await agent.checkOllamaAvailability();\n  if (!isAvailable) {\n    console.log('Ollama not available, attempting to install...');\n    // In a real implementation, you might trigger installation here",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f28de3e976c705c6b82799a19e1abff9",
        "locations": [
          {
            "file": "src/agents/coordinator-factory.ts",
            "name": "lines 106-110",
            "startLine": 106,
            "endLine": 110,
            "lines": 5,
            "text": "\n  try {\n    // Dynamic import of custom coordinator\n    const modulePath = config.customHandler;\n    const customModule = await import(modulePath);",
            "fullText": "\n  try {\n    // Dynamic import of custom coordinator\n    const modulePath = config.customHandler;\n    const customModule = await import(modulePath);",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-factory.ts",
            "name": "lines 107-111",
            "startLine": 107,
            "endLine": 111,
            "lines": 5,
            "text": "  try {\n    // Dynamic import of custom coordinator\n    const modulePath = config.customHandler;\n    const customModule = await import(modulePath);\n    ",
            "fullText": "  try {\n    // Dynamic import of custom coordinator\n    const modulePath = config.customHandler;\n    const customModule = await import(modulePath);\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_d71ed1dab6ef33f58dc9cacb6daadaf9",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 5-9",
            "startLine": 5,
            "endLine": 9,
            "lines": 5,
            "text": "\nimport { AutomatedClient } from './automated-client';\nimport { WSMessage, MessageType } from '../types/messages';\n\nexport interface CoordinatorCapabilities {",
            "fullText": "\nimport { AutomatedClient } from './automated-client';\nimport { WSMessage, MessageType } from '../types/messages';\n\nexport interface CoordinatorCapabilities {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 6-10",
            "startLine": 6,
            "endLine": 10,
            "lines": 5,
            "text": "import { AutomatedClient } from './automated-client';\nimport { WSMessage, MessageType } from '../types/messages';\n\nexport interface CoordinatorCapabilities {\n  /** Can respond to chat messages */",
            "fullText": "import { AutomatedClient } from './automated-client';\nimport { WSMessage, MessageType } from '../types/messages';\n\nexport interface CoordinatorCapabilities {\n  /** Can respond to chat messages */",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0916fa359ae420ef409db654e0dcb59a",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 26-30",
            "startLine": 26,
            "endLine": 30,
            "lines": 5,
            "text": "  /** Supports streaming responses */\n  streaming: boolean;\n}\n\nexport interface CoordinatorConfig {",
            "fullText": "  /** Supports streaming responses */\n  streaming: boolean;\n}\n\nexport interface CoordinatorConfig {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 27-31",
            "startLine": 27,
            "endLine": 31,
            "lines": 5,
            "text": "  streaming: boolean;\n}\n\nexport interface CoordinatorConfig {\n  /** WebSocket server URL */",
            "fullText": "  streaming: boolean;\n}\n\nexport interface CoordinatorConfig {\n  /** WebSocket server URL */",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6fe40b014cbd2b9a2e194c59b62a8460",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 37-41",
            "startLine": 37,
            "endLine": 41,
            "lines": 5,
            "text": "  /** Agent capabilities */\n  capabilities?: Partial<CoordinatorCapabilities>;\n  /** Response configuration */\n  responseConfig?: ResponseConfig;\n}",
            "fullText": "  /** Agent capabilities */\n  capabilities?: Partial<CoordinatorCapabilities>;\n  /** Response configuration */\n  responseConfig?: ResponseConfig;\n}",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 38-42",
            "startLine": 38,
            "endLine": 42,
            "lines": 5,
            "text": "  capabilities?: Partial<CoordinatorCapabilities>;\n  /** Response configuration */\n  responseConfig?: ResponseConfig;\n}\n",
            "fullText": "  capabilities?: Partial<CoordinatorCapabilities>;\n  /** Response configuration */\n  responseConfig?: ResponseConfig;\n}\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_be123551fa35ecf3fb30cf21f7715e31",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 39-43",
            "startLine": 39,
            "endLine": 43,
            "lines": 5,
            "text": "  /** Response configuration */\n  responseConfig?: ResponseConfig;\n}\n\nexport interface ResponseConfig {",
            "fullText": "  /** Response configuration */\n  responseConfig?: ResponseConfig;\n}\n\nexport interface ResponseConfig {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 40-44",
            "startLine": 40,
            "endLine": 44,
            "lines": 5,
            "text": "  responseConfig?: ResponseConfig;\n}\n\nexport interface ResponseConfig {\n  /** Enable automatic responses */",
            "fullText": "  responseConfig?: ResponseConfig;\n}\n\nexport interface ResponseConfig {\n  /** Enable automatic responses */",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0fd6b7468d6e61707a297bcf9c3af19d",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 55-59",
            "startLine": 55,
            "endLine": 59,
            "lines": 5,
            "text": "  /** Show typing indicator */\n  showTypingIndicator: boolean;\n  /** Maximum context messages to consider */\n  maxContextMessages: number;\n}",
            "fullText": "  /** Show typing indicator */\n  showTypingIndicator: boolean;\n  /** Maximum context messages to consider */\n  maxContextMessages: number;\n}",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 56-60",
            "startLine": 56,
            "endLine": 60,
            "lines": 5,
            "text": "  showTypingIndicator: boolean;\n  /** Maximum context messages to consider */\n  maxContextMessages: number;\n}\n",
            "fullText": "  showTypingIndicator: boolean;\n  /** Maximum context messages to consider */\n  maxContextMessages: number;\n}\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3e2a53e4415b6ff32fdacda9b3b584ee",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 60-64",
            "startLine": 60,
            "endLine": 64,
            "lines": 5,
            "text": "\nexport interface Message {\n  id: string;\n  userId: string;\n  username: string;",
            "fullText": "\nexport interface Message {\n  id: string;\n  userId: string;\n  username: string;",
            "isTextBlock": true
          },
          {
            "file": "src/types/chat.ts",
            "name": "lines 11-15",
            "startLine": 11,
            "endLine": 15,
            "lines": 5,
            "text": "\nexport interface Message {\n  id: string;\n  userId: string;\n  username: string;",
            "fullText": "\nexport interface Message {\n  id: string;\n  userId: string;\n  username: string;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b312528a34a8bcffe98329aaa68c871b",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 61-65",
            "startLine": 61,
            "endLine": 65,
            "lines": 5,
            "text": "export interface Message {\n  id: string;\n  userId: string;\n  username: string;\n  content: string;",
            "fullText": "export interface Message {\n  id: string;\n  userId: string;\n  username: string;\n  content: string;",
            "isTextBlock": true
          },
          {
            "file": "src/types/chat.ts",
            "name": "lines 12-16",
            "startLine": 12,
            "endLine": 16,
            "lines": 5,
            "text": "export interface Message {\n  id: string;\n  userId: string;\n  username: string;\n  content: string;",
            "fullText": "export interface Message {\n  id: string;\n  userId: string;\n  username: string;\n  content: string;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_75e0ed9f7a673354937f6afe787e9618",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 62-66",
            "startLine": 62,
            "endLine": 66,
            "lines": 5,
            "text": "  id: string;\n  userId: string;\n  username: string;\n  content: string;\n  timestamp: Date;",
            "fullText": "  id: string;\n  userId: string;\n  username: string;\n  content: string;\n  timestamp: Date;",
            "isTextBlock": true
          },
          {
            "file": "src/types/chat.ts",
            "name": "lines 13-17",
            "startLine": 13,
            "endLine": 17,
            "lines": 5,
            "text": "  id: string;\n  userId: string;\n  username: string;\n  content: string;\n  timestamp: Date;",
            "fullText": "  id: string;\n  userId: string;\n  username: string;\n  content: string;\n  timestamp: Date;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_e5a03dcbaaa497fc711723c04dcfdce3",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 63-67",
            "startLine": 63,
            "endLine": 67,
            "lines": 5,
            "text": "  userId: string;\n  username: string;\n  content: string;\n  timestamp: Date;\n  type: MessageType;",
            "fullText": "  userId: string;\n  username: string;\n  content: string;\n  timestamp: Date;\n  type: MessageType;",
            "isTextBlock": true
          },
          {
            "file": "src/types/chat.ts",
            "name": "lines 14-18",
            "startLine": 14,
            "endLine": 18,
            "lines": 5,
            "text": "  userId: string;\n  username: string;\n  content: string;\n  timestamp: Date;\n  type: MessageType;",
            "fullText": "  userId: string;\n  username: string;\n  content: string;\n  timestamp: Date;\n  type: MessageType;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_e9277c88e68cdaf05c5816d634cdb51b",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 70-74",
            "startLine": 70,
            "endLine": 74,
            "lines": 5,
            "text": "\nexport interface AgentAction {\n  type: 'summarize' | 'moderate' | 'analyze' | 'help' | 'clear' | 'translate' | 'code_review' | 'explain';\n  payload?: any;\n}",
            "fullText": "\nexport interface AgentAction {\n  type: 'summarize' | 'moderate' | 'analyze' | 'help' | 'clear' | 'translate' | 'code_review' | 'explain';\n  payload?: any;\n}",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 71-75",
            "startLine": 71,
            "endLine": 75,
            "lines": 5,
            "text": "export interface AgentAction {\n  type: 'summarize' | 'moderate' | 'analyze' | 'help' | 'clear' | 'translate' | 'code_review' | 'explain';\n  payload?: any;\n}\n",
            "fullText": "export interface AgentAction {\n  type: 'summarize' | 'moderate' | 'analyze' | 'help' | 'clear' | 'translate' | 'code_review' | 'explain';\n  payload?: any;\n}\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b7ea67e9a10d093e0b08acbd88c907d7",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 80-84",
            "startLine": 80,
            "endLine": 84,
            "lines": 5,
            "text": "  /** Agent configuration */\n  readonly config: CoordinatorConfig;\n  \n  /** Agent capabilities */\n  readonly capabilities: CoordinatorCapabilities;",
            "fullText": "  /** Agent configuration */\n  readonly config: CoordinatorConfig;\n  \n  /** Agent capabilities */\n  readonly capabilities: CoordinatorCapabilities;",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 81-85",
            "startLine": 81,
            "endLine": 85,
            "lines": 5,
            "text": "  readonly config: CoordinatorConfig;\n  \n  /** Agent capabilities */\n  readonly capabilities: CoordinatorCapabilities;\n  ",
            "fullText": "  readonly config: CoordinatorConfig;\n  \n  /** Agent capabilities */\n  readonly capabilities: CoordinatorCapabilities;\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_645080c0f591fc2f2c5e04097cb52d23",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 83-87",
            "startLine": 83,
            "endLine": 87,
            "lines": 5,
            "text": "  /** Agent capabilities */\n  readonly capabilities: CoordinatorCapabilities;\n  \n  /** Connection status */\n  readonly isConnected: boolean;",
            "fullText": "  /** Agent capabilities */\n  readonly capabilities: CoordinatorCapabilities;\n  \n  /** Connection status */\n  readonly isConnected: boolean;",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 84-88",
            "startLine": 84,
            "endLine": 88,
            "lines": 5,
            "text": "  readonly capabilities: CoordinatorCapabilities;\n  \n  /** Connection status */\n  readonly isConnected: boolean;\n  ",
            "fullText": "  readonly capabilities: CoordinatorCapabilities;\n  \n  /** Connection status */\n  readonly isConnected: boolean;\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0c18ed71d5512f0ac6ba94f041777e5b",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 92-96",
            "startLine": 92,
            "endLine": 96,
            "lines": 5,
            "text": "  /** Stop the agent */\n  stop(): Promise<void>;\n  \n  /** Process a user message */\n  processUserMessage(message: Message): Promise<void>;",
            "fullText": "  /** Stop the agent */\n  stop(): Promise<void>;\n  \n  /** Process a user message */\n  processUserMessage(message: Message): Promise<void>;",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 93-97",
            "startLine": 93,
            "endLine": 97,
            "lines": 5,
            "text": "  stop(): Promise<void>;\n  \n  /** Process a user message */\n  processUserMessage(message: Message): Promise<void>;\n  ",
            "fullText": "  stop(): Promise<void>;\n  \n  /** Process a user message */\n  processUserMessage(message: Message): Promise<void>;\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_7e4bfe8361e8a6b2e68fd17a9284448e",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 95-99",
            "startLine": 95,
            "endLine": 99,
            "lines": 5,
            "text": "  /** Process a user message */\n  processUserMessage(message: Message): Promise<void>;\n  \n  /** Execute an agent action */\n  executeAction(action: AgentAction): Promise<string>;",
            "fullText": "  /** Process a user message */\n  processUserMessage(message: Message): Promise<void>;\n  \n  /** Execute an agent action */\n  executeAction(action: AgentAction): Promise<string>;",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 96-100",
            "startLine": 96,
            "endLine": 100,
            "lines": 5,
            "text": "  processUserMessage(message: Message): Promise<void>;\n  \n  /** Execute an agent action */\n  executeAction(action: AgentAction): Promise<string>;\n  ",
            "fullText": "  processUserMessage(message: Message): Promise<void>;\n  \n  /** Execute an agent action */\n  executeAction(action: AgentAction): Promise<string>;\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_64fc815ae7b05e69b1df4a88ddc99f17",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 98-102",
            "startLine": 98,
            "endLine": 102,
            "lines": 5,
            "text": "  /** Execute an agent action */\n  executeAction(action: AgentAction): Promise<string>;\n  \n  /** Get conversation context */\n  getContext(): Message[];",
            "fullText": "  /** Execute an agent action */\n  executeAction(action: AgentAction): Promise<string>;\n  \n  /** Get conversation context */\n  getContext(): Message[];",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 99-103",
            "startLine": 99,
            "endLine": 103,
            "lines": 5,
            "text": "  executeAction(action: AgentAction): Promise<string>;\n  \n  /** Get conversation context */\n  getContext(): Message[];\n  ",
            "fullText": "  executeAction(action: AgentAction): Promise<string>;\n  \n  /** Get conversation context */\n  getContext(): Message[];\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_54335cbedde1fdaf5257e1853f963728",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 166-170",
            "startLine": 166,
            "endLine": 170,
            "lines": 5,
            "text": "  \n  async stop(): Promise<void> {\n    if (!this.isRunning) {\n      return;\n    }",
            "fullText": "  \n  async stop(): Promise<void> {\n    if (!this.isRunning) {\n      return;\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 167-171",
            "startLine": 167,
            "endLine": 171,
            "lines": 5,
            "text": "  async stop(): Promise<void> {\n    if (!this.isRunning) {\n      return;\n    }\n    ",
            "fullText": "  async stop(): Promise<void> {\n    if (!this.isRunning) {\n      return;\n    }\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_59a0a98753d034e33b153288a5258c05",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 178-182",
            "startLine": 178,
            "endLine": 182,
            "lines": 5,
            "text": "  \n  async processUserMessage(message: Message): Promise<void> {\n    // Add to conversation history\n    this.addToHistory(message);\n    ",
            "fullText": "  \n  async processUserMessage(message: Message): Promise<void> {\n    // Add to conversation history\n    this.addToHistory(message);\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 179-183",
            "startLine": 179,
            "endLine": 183,
            "lines": 5,
            "text": "  async processUserMessage(message: Message): Promise<void> {\n    // Add to conversation history\n    this.addToHistory(message);\n    \n    // Check if we should respond",
            "fullText": "  async processUserMessage(message: Message): Promise<void> {\n    // Add to conversation history\n    this.addToHistory(message);\n    \n    // Check if we should respond",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_2bcd6f5387e704fa6257f39a8bd7cd48",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 193-197",
            "startLine": 193,
            "endLine": 197,
            "lines": 5,
            "text": "    // Apply response delay if configured\n    if (this.config.responseConfig?.responseDelay) {\n      const delay = this.getRandomDelay();\n      await new Promise(Working on => setTimeout(Working on, delay))...",
            "fullText": "    // Apply response delay if configured\n    if (this.config.responseConfig?.responseDelay) {\n      const delay = this.getRandomDelay();\n      await new Promise(Working on => setTimeout(Working on, delay));\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 194-198",
            "startLine": 194,
            "endLine": 198,
            "lines": 5,
            "text": "    if (this.config.responseConfig?.responseDelay) {\n      const delay = this.getRandomDelay();\n      await new Promise(Working on => setTimeout(Working on, delay));\n    }\n    ",
            "fullText": "    if (this.config.responseConfig?.responseDelay) {\n      const delay = this.getRandomDelay();\n      await new Promise(Working on => setTimeout(Working on, delay));\n    }\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_44bf2ae37fa71903260258178335312b",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 208-212",
            "startLine": 208,
            "endLine": 212,
            "lines": 5,
            "text": "  \n  getContext(): Message[] {\n    const maxMessages = this.config.responseConfig?.maxContextMessages || 50;\n    return this.conversationHistory.slice(-maxMessages);\n  }",
            "fullText": "  \n  getContext(): Message[] {\n    const maxMessages = this.config.responseConfig?.maxContextMessages || 50;\n    return this.conversationHistory.slice(-maxMessages);\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 209-213",
            "startLine": 209,
            "endLine": 213,
            "lines": 5,
            "text": "  getContext(): Message[] {\n    const maxMessages = this.config.responseConfig?.maxContextMessages || 50;\n    return this.conversationHistory.slice(-maxMessages);\n  }\n  ",
            "fullText": "  getContext(): Message[] {\n    const maxMessages = this.config.responseConfig?.maxContextMessages || 50;\n    return this.conversationHistory.slice(-maxMessages);\n  }\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_be7b599b302495dcbebf9d2bf27ac001",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 231-235",
            "startLine": 231,
            "endLine": 235,
            "lines": 5,
            "text": "  \n  /**\n   * Protected methods for subclasses to override\n   */\n  protected abstract generateResponse(message: Message, context: Message[]): Promise<string>;",
            "fullText": "  \n  /**\n   * Protected methods for subclasses to override\n   */\n  protected abstract generateResponse(message: Message, context: Message[]): Promise<string>;",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 232-236",
            "startLine": 232,
            "endLine": 236,
            "lines": 5,
            "text": "  /**\n   * Protected methods for subclasses to override\n   */\n  protected abstract generateResponse(message: Message, context: Message[]): Promise<string>;\n  ",
            "fullText": "  /**\n   * Protected methods for subclasses to override\n   */\n  protected abstract generateResponse(message: Message, context: Message[]): Promise<string>;\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ef9e072e7f86e3738117162852e8e4da",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 251-255",
            "startLine": 251,
            "endLine": 255,
            "lines": 5,
            "text": "  \n  protected async showTypingIndicator(): Promise<void> {\n    // This could be In Progress as a special message type\n    // For now, it's a placeholder\n  }",
            "fullText": "  \n  protected async showTypingIndicator(): Promise<void> {\n    // This could be In Progress as a special message type\n    // For now, it's a placeholder\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 252-256",
            "startLine": 252,
            "endLine": 256,
            "lines": 5,
            "text": "  protected async showTypingIndicator(): Promise<void> {\n    // This could be In Progress as a special message type\n    // For now, it's a placeholder\n  }\n  ",
            "fullText": "  protected async showTypingIndicator(): Promise<void> {\n    // This could be In Progress as a special message type\n    // For now, it's a placeholder\n  }\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3374e19766faa8e83393a8519477bb86",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 256-260",
            "startLine": 256,
            "endLine": 260,
            "lines": 5,
            "text": "  \n  protected shouldRespond(message: Message): boolean {\n    if (!this.config.responseConfig?.autoRespond) {\n      return false;\n    }",
            "fullText": "  \n  protected shouldRespond(message: Message): boolean {\n    if (!this.config.responseConfig?.autoRespond) {\n      return false;\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 257-261",
            "startLine": 257,
            "endLine": 261,
            "lines": 5,
            "text": "  protected shouldRespond(message: Message): boolean {\n    if (!this.config.responseConfig?.autoRespond) {\n      return false;\n    }\n    ",
            "fullText": "  protected shouldRespond(message: Message): boolean {\n    if (!this.config.responseConfig?.autoRespond) {\n      return false;\n    }\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_d506b615bcf3b2ef179986a60181db0c",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 308-312",
            "startLine": 308,
            "endLine": 312,
            "lines": 5,
            "text": "  }\n  \n  protected async summarizeConversation(): Promise<string> {\n    const messages = this.getContext();\n    if (messages.length === 0) {",
            "fullText": "  }\n  \n  protected async summarizeConversation(): Promise<string> {\n    const messages = this.getContext();\n    if (messages.length === 0) {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 287-291",
            "startLine": 287,
            "endLine": 291,
            "lines": 5,
            "text": "  }\n  \n  protected async summarizeConversation(): Promise<string> {\n    const messages = this.getContext();\n    if (messages.length === 0) {",
            "fullText": "  }\n  \n  protected async summarizeConversation(): Promise<string> {\n    const messages = this.getContext();\n    if (messages.length === 0) {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_226342865d41bdd2dcab262daa364260",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 315-319",
            "startLine": 315,
            "endLine": 319,
            "lines": 5,
            "text": "    \n    // Basic implementation - subclasses should override\n    const userMessages = messages.filter(m => m.type === MessageType.USER_MESSAGE);\n    return `Conversation summary: ${userMessages.lengt...",
            "fullText": "    \n    // Basic implementation - subclasses should override\n    const userMessages = messages.filter(m => m.type === MessageType.USER_MESSAGE);\n    return `Conversation summary: ${userMessages.length} messages exchanged.`;\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 316-320",
            "startLine": 316,
            "endLine": 320,
            "lines": 5,
            "text": "    // Basic implementation - subclasses should override\n    const userMessages = messages.filter(m => m.type === MessageType.USER_MESSAGE);\n    return `Conversation summary: ${userMessages.length} me...",
            "fullText": "    // Basic implementation - subclasses should override\n    const userMessages = messages.filter(m => m.type === MessageType.USER_MESSAGE);\n    return `Conversation summary: ${userMessages.length} messages exchanged.`;\n  }\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_d02f0c16b5b2205384fd96378fe0bb9b",
        "locations": [
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 320-324",
            "startLine": 320,
            "endLine": 324,
            "lines": 5,
            "text": "  \n  protected getHelpMessage(): string {\n    const capabilities = Object.entries(this.capabilities)\n      .filter(([_, enabled]) => enabled)\n      .map(([capability]) => capability);",
            "fullText": "  \n  protected getHelpMessage(): string {\n    const capabilities = Object.entries(this.capabilities)\n      .filter(([_, enabled]) => enabled)\n      .map(([capability]) => capability);",
            "isTextBlock": true
          },
          {
            "file": "src/agents/coordinator-interface.ts",
            "name": "lines 321-325",
            "startLine": 321,
            "endLine": 325,
            "lines": 5,
            "text": "  protected getHelpMessage(): string {\n    const capabilities = Object.entries(this.capabilities)\n      .filter(([_, enabled]) => enabled)\n      .map(([capability]) => capability);\n    ",
            "fullText": "  protected getHelpMessage(): string {\n    const capabilities = Object.entries(this.capabilities)\n      .filter(([_, enabled]) => enabled)\n      .map(([capability]) => capability);\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_5dd49531a362564c3f46b5c0fd5688f5",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 84-88",
            "startLine": 84,
            "endLine": 88,
            "lines": 5,
            "text": "    super(serverUrl, roomId, agentName);\n    \n    this.config = {\n      reportInterval: config.reportInterval || 60000,\n      storyLogDir: config.storyLogDir || path.join(process.cwd(), 'logs', 'stori...",
            "fullText": "    super(serverUrl, roomId, agentName);\n    \n    this.config = {\n      reportInterval: config.reportInterval || 60000,\n      storyLogDir: config.storyLogDir || path.join(process.cwd(), 'logs', 'stories'),",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 30-34",
            "startLine": 30,
            "endLine": 34,
            "lines": 5,
            "text": "    super(serverUrl, roomId, agentName);\n    \n    this.config = {\n      reportInterval: config.reportInterval || 60000, // 1 minute default\n      storyLogDir: config.storyLogDir || path.join(process.c...",
            "fullText": "    super(serverUrl, roomId, agentName);\n    \n    this.config = {\n      reportInterval: config.reportInterval || 60000, // 1 minute default\n      storyLogDir: config.storyLogDir || path.join(process.cwd(), 'logs', 'stories'),",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_138d00621891009c913af98d28cb4e90",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 93-97",
            "startLine": 93,
            "endLine": 97,
            "lines": 5,
            "text": "    \n    this.ensureDirectories();\n    this.loadSequenceDiagrams();\n    this.reportGenerator = new StoryReportGenerator();\n  }",
            "fullText": "    \n    this.ensureDirectories();\n    this.loadSequenceDiagrams();\n    this.reportGenerator = new StoryReportGenerator();\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 94-98",
            "startLine": 94,
            "endLine": 98,
            "lines": 5,
            "text": "    this.ensureDirectories();\n    this.loadSequenceDiagrams();\n    this.reportGenerator = new StoryReportGenerator();\n  }\n",
            "fullText": "    this.ensureDirectories();\n    this.loadSequenceDiagrams();\n    this.reportGenerator = new StoryReportGenerator();\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_fcb74b6a3146091a81019694fc6d12af",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 112-116",
            "startLine": 112,
            "endLine": 116,
            "lines": 5,
            "text": "\n  private loadSequenceDiagrams(): void {\n    if (!this.config.sequenceDiagramsDir || !fs.existsSync(this.config.sequenceDiagramsDir)) {\n      return;\n    }",
            "fullText": "\n  private loadSequenceDiagrams(): void {\n    if (!this.config.sequenceDiagramsDir || !fs.existsSync(this.config.sequenceDiagramsDir)) {\n      return;\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 113-117",
            "startLine": 113,
            "endLine": 117,
            "lines": 5,
            "text": "  private loadSequenceDiagrams(): void {\n    if (!this.config.sequenceDiagramsDir || !fs.existsSync(this.config.sequenceDiagramsDir)) {\n      return;\n    }\n",
            "fullText": "  private loadSequenceDiagrams(): void {\n    if (!this.config.sequenceDiagramsDir || !fs.existsSync(this.config.sequenceDiagramsDir)) {\n      return;\n    }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_cd21b17b43040cc7619d20f7d7c7c004",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 126-130",
            "startLine": 126,
            "endLine": 130,
            "lines": 5,
            "text": "      \n      const diagramId = file.replace('.mermaid', '');\n      const parsed = MermaidParser.parseSequenceDiagram(content, diagramId);\n      this.sequenceDiagrams.set(diagramId, parsed);\n    });",
            "fullText": "      \n      const diagramId = file.replace('.mermaid', '');\n      const parsed = MermaidParser.parseSequenceDiagram(content, diagramId);\n      this.sequenceDiagrams.set(diagramId, parsed);\n    });",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 127-131",
            "startLine": 127,
            "endLine": 131,
            "lines": 5,
            "text": "      const diagramId = file.replace('.mermaid', '');\n      const parsed = MermaidParser.parseSequenceDiagram(content, diagramId);\n      this.sequenceDiagrams.set(diagramId, parsed);\n    });\n",
            "fullText": "      const diagramId = file.replace('.mermaid', '');\n      const parsed = MermaidParser.parseSequenceDiagram(content, diagramId);\n      this.sequenceDiagrams.set(diagramId, parsed);\n    });\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_e06c9cf6c90282b0bdeeb7a369efe37c",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 134-138",
            "startLine": 134,
            "endLine": 138,
            "lines": 5,
            "text": "\n  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`📊 Enhanced Story Reporter connected to room ${this.roomId}`);\n    ",
            "fullText": "\n  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`📊 Enhanced Story Reporter connected to room ${this.roomId}`);\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 135-139",
            "startLine": 135,
            "endLine": 139,
            "lines": 5,
            "text": "  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`📊 Enhanced Story Reporter connected to room ${this.roomId}`);\n    \n    // Enable external logging",
            "fullText": "  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`📊 Enhanced Story Reporter connected to room ${this.roomId}`);\n    \n    // Enable external logging",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_72b981aee7a9847c816d04ad5db81dec",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 143-147",
            "startLine": 143,
            "endLine": 147,
            "lines": 5,
            "text": "    this.startReporting();\n    \n    // Announce capabilities\n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,",
            "fullText": "    this.startReporting();\n    \n    // Announce capabilities\n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 53-57",
            "startLine": 53,
            "endLine": 57,
            "lines": 5,
            "text": "    this.startReporting();\n    \n    // Announce presence\n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,",
            "fullText": "    this.startReporting();\n    \n    // Announce presence\n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_655ba963bc442871ca4809d73d943d0c",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 159-163",
            "startLine": 159,
            "endLine": 163,
            "lines": 5,
            "text": "  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    // Track all messages\n    this.trackEvent(message);",
            "fullText": "  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    // Track all messages\n    this.trackEvent(message);",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 64-68",
            "startLine": 64,
            "endLine": 68,
            "lines": 5,
            "text": "  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    // Track all messages for story analysis\n    this.trackEvent(message);",
            "fullText": "  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    // Track all messages for story analysis\n    this.trackEvent(message);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_630f7ed232313d4f1861ed20b68d49af",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 189-193",
            "startLine": 189,
            "endLine": 193,
            "lines": 5,
            "text": "\n    // Keep buffer manageable\n    if (this.storyBuffer.length > 1000) {\n      this.storyBuffer = this.storyBuffer.slice(-500);\n    }",
            "fullText": "\n    // Keep buffer manageable\n    if (this.storyBuffer.length > 1000) {\n      this.storyBuffer = this.storyBuffer.slice(-500);\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 93-97",
            "startLine": 93,
            "endLine": 97,
            "lines": 5,
            "text": "    \n    // Keep buffer size manageable\n    if (this.storyBuffer.length > 1000) {\n      this.storyBuffer = this.storyBuffer.slice(-500);\n    }",
            "fullText": "    \n    // Keep buffer size manageable\n    if (this.storyBuffer.length > 1000) {\n      this.storyBuffer = this.storyBuffer.slice(-500);\n    }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ee6f8ab7af2d1853c22fe13061562ba2",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 230-234",
            "startLine": 230,
            "endLine": 234,
            "lines": 5,
            "text": "    const report = await this.createEnhancedReport();\n    \n    // Generate both JSON and Markdown reports\n    const paths = await this.reportGenerator.generateReports(report);\n    ",
            "fullText": "    const report = await this.createEnhancedReport();\n    \n    // Generate both JSON and Markdown reports\n    const paths = await this.reportGenerator.generateReports(report);\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 519-523",
            "startLine": 519,
            "endLine": 523,
            "lines": 5,
            "text": "    const report = await this.createEnhancedReport();\n    \n    // Generate both JSON and Markdown reports\n    const paths = await this.reportGenerator.generateReports(report);\n    ",
            "fullText": "    const report = await this.createEnhancedReport();\n    \n    // Generate both JSON and Markdown reports\n    const paths = await this.reportGenerator.generateReports(report);\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9779ca4195c0a2d7db9876a0914bd2be",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 238-242",
            "startLine": 238,
            "endLine": 242,
            "lines": 5,
            "text": "      const filepath = path.join(this.config.storyLogDir, filename);\n      fs.writeFileSync(filepath, JSON.stringify(report, null, 2));\n    }\n    \n    // Send summary to chat",
            "fullText": "      const filepath = path.join(this.config.storyLogDir, filename);\n      fs.writeFileSync(filepath, JSON.stringify(report, null, 2));\n    }\n    \n    // Send summary to chat",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 140-144",
            "startLine": 140,
            "endLine": 144,
            "lines": 5,
            "text": "      const filepath = path.join(this.config.storyLogDir, filename);\n      fs.writeFileSync(filepath, JSON.stringify(report, null, 2));\n    }\n    \n    // Send summary to chat",
            "fullText": "      const filepath = path.join(this.config.storyLogDir, filename);\n      fs.writeFileSync(filepath, JSON.stringify(report, null, 2));\n    }\n    \n    // Send summary to chat",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_5d1db5718445b3f80053c8acbced78e8",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 255-259",
            "startLine": 255,
            "endLine": 259,
            "lines": 5,
            "text": "\n  private async createEnhancedReport(): Promise<EnhancedStoryReport> {\n    const storyId = this.detectCurrentStory();\n    const systemTests = Array.from(this.testResults.values())\n      .filter(t => ...",
            "fullText": "\n  private async createEnhancedReport(): Promise<EnhancedStoryReport> {\n    const storyId = this.detectCurrentStory();\n    const systemTests = Array.from(this.testResults.values())\n      .filter(t => t.storyId === storyId);",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 256-260",
            "startLine": 256,
            "endLine": 260,
            "lines": 5,
            "text": "  private async createEnhancedReport(): Promise<EnhancedStoryReport> {\n    const storyId = this.detectCurrentStory();\n    const systemTests = Array.from(this.testResults.values())\n      .filter(t => t...",
            "fullText": "  private async createEnhancedReport(): Promise<EnhancedStoryReport> {\n    const storyId = this.detectCurrentStory();\n    const systemTests = Array.from(this.testResults.values())\n      .filter(t => t.storyId === storyId);\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_affad559bde896714218e7f632aff43a",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 260-264",
            "startLine": 260,
            "endLine": 264,
            "lines": 5,
            "text": "    \n    // Get external calls\n    const externalLogs = externalLogLib.getLogs();\n    const externalStats = externalLogLib.getStats();\n    ",
            "fullText": "    \n    // Get external calls\n    const externalLogs = externalLogLib.getLogs();\n    const externalStats = externalLogLib.getStats();\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 261-265",
            "startLine": 261,
            "endLine": 265,
            "lines": 5,
            "text": "    // Get external calls\n    const externalLogs = externalLogLib.getLogs();\n    const externalStats = externalLogLib.getStats();\n    \n    // Validate sequence diagrams",
            "fullText": "    // Get external calls\n    const externalLogs = externalLogLib.getLogs();\n    const externalStats = externalLogLib.getStats();\n    \n    // Validate sequence diagrams",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f894d953706d035aabf831af580443d9",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 265-269",
            "startLine": 265,
            "endLine": 269,
            "lines": 5,
            "text": "    // Validate sequence diagrams\n    const diagramValidations = this.validateSequenceDiagrams(systemTests);\n    \n    // Calculate coverage\n    const coverage = this.calculateCoverage(systemTests);",
            "fullText": "    // Validate sequence diagrams\n    const diagramValidations = this.validateSequenceDiagrams(systemTests);\n    \n    // Calculate coverage\n    const coverage = this.calculateCoverage(systemTests);",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 266-270",
            "startLine": 266,
            "endLine": 270,
            "lines": 5,
            "text": "    const diagramValidations = this.validateSequenceDiagrams(systemTests);\n    \n    // Calculate coverage\n    const coverage = this.calculateCoverage(systemTests);\n    ",
            "fullText": "    const diagramValidations = this.validateSequenceDiagrams(systemTests);\n    \n    // Calculate coverage\n    const coverage = this.calculateCoverage(systemTests);\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_06614c3a822b720f74b11181064ab22e",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 268-272",
            "startLine": 268,
            "endLine": 272,
            "lines": 5,
            "text": "    // Calculate coverage\n    const coverage = this.calculateCoverage(systemTests);\n    \n    // Determine story status and collect failure reasons\n    const { status, failureReasons } = this.determine...",
            "fullText": "    // Calculate coverage\n    const coverage = this.calculateCoverage(systemTests);\n    \n    // Determine story status and collect failure reasons\n    const { status, failureReasons } = this.determineStoryStatus(storyId, systemTests, coverage, diagramValidations);",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 269-273",
            "startLine": 269,
            "endLine": 273,
            "lines": 5,
            "text": "    const coverage = this.calculateCoverage(systemTests);\n    \n    // Determine story status and collect failure reasons\n    const { status, failureReasons } = this.determineStoryStatus(storyId, syste...",
            "fullText": "    const coverage = this.calculateCoverage(systemTests);\n    \n    // Determine story status and collect failure reasons\n    const { status, failureReasons } = this.determineStoryStatus(storyId, systemTests, coverage, diagramValidations);\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_7582cf9cfca698b8cae5e76d0818ef12",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 304-308",
            "startLine": 304,
            "endLine": 308,
            "lines": 5,
            "text": "    // Check for no tests\n    if (tests.length === 0) {\n      failureReasons.push('No system tests found');\n      return { status: 'FAILURE', failureReasons };\n    }",
            "fullText": "    // Check for no tests\n    if (tests.length === 0) {\n      failureReasons.push('No system tests found');\n      return { status: 'FAILURE', failureReasons };\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 305-309",
            "startLine": 305,
            "endLine": 309,
            "lines": 5,
            "text": "    if (tests.length === 0) {\n      failureReasons.push('No system tests found');\n      return { status: 'FAILURE', failureReasons };\n    }\n    ",
            "fullText": "    if (tests.length === 0) {\n      failureReasons.push('No system tests found');\n      return { status: 'FAILURE', failureReasons };\n    }\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_089f1602628deef3c3946df597dbef4e",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 325-329",
            "startLine": 325,
            "endLine": 329,
            "lines": 5,
            "text": "    // Check failed tests\n    const failedTests = tests.filter(t => t.status === 'failed');\n    if (failedTests.length > 0) {\n      failureReasons.push(`${failedTests.length} test(s) failed`);\n    }",
            "fullText": "    // Check failed tests\n    const failedTests = tests.filter(t => t.status === 'failed');\n    if (failedTests.length > 0) {\n      failureReasons.push(`${failedTests.length} test(s) failed`);\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 326-330",
            "startLine": 326,
            "endLine": 330,
            "lines": 5,
            "text": "    const failedTests = tests.filter(t => t.status === 'failed');\n    if (failedTests.length > 0) {\n      failureReasons.push(`${failedTests.length} test(s) failed`);\n    }\n    ",
            "fullText": "    const failedTests = tests.filter(t => t.status === 'failed');\n    if (failedTests.length > 0) {\n      failureReasons.push(`${failedTests.length} test(s) failed`);\n    }\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6f26d05907502540befb411fd1787628",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 331-335",
            "startLine": 331,
            "endLine": 335,
            "lines": 5,
            "text": "    // Check sequence diagram validation\n    const invalidDiagrams = diagramValidations.filter(d => !d.validation.matched);\n    if (invalidDiagrams.length > 0) {\n      failureReasons.push(`${invalidDi...",
            "fullText": "    // Check sequence diagram validation\n    const invalidDiagrams = diagramValidations.filter(d => !d.validation.matched);\n    if (invalidDiagrams.length > 0) {\n      failureReasons.push(`${invalidDiagrams.length} sequence diagram(s) validation failed`);\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 332-336",
            "startLine": 332,
            "endLine": 336,
            "lines": 5,
            "text": "    const invalidDiagrams = diagramValidations.filter(d => !d.validation.matched);\n    if (invalidDiagrams.length > 0) {\n      failureReasons.push(`${invalidDiagrams.length} sequence diagram(s) valida...",
            "fullText": "    const invalidDiagrams = diagramValidations.filter(d => !d.validation.matched);\n    if (invalidDiagrams.length > 0) {\n      failureReasons.push(`${invalidDiagrams.length} sequence diagram(s) validation failed`);\n    }\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_e244dd50f6732a51748fce129b696cb7",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 340-344",
            "startLine": 340,
            "endLine": 344,
            "lines": 5,
            "text": "    \n    return { status: 'In Progress', failureReasons: [] };\n  }\n\n  private detectCurrentStory(): string {",
            "fullText": "    \n    return { status: 'In Progress', failureReasons: [] };\n  }\n\n  private detectCurrentStory(): string {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 341-345",
            "startLine": 341,
            "endLine": 345,
            "lines": 5,
            "text": "    return { status: 'In Progress', failureReasons: [] };\n  }\n\n  private detectCurrentStory(): string {\n    // Analyze recent events to detect story",
            "fullText": "    return { status: 'In Progress', failureReasons: [] };\n  }\n\n  private detectCurrentStory(): string {\n    // Analyze recent events to detect story",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a8f1827fee381d44362d73f5f788c9db",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 343-347",
            "startLine": 343,
            "endLine": 347,
            "lines": 5,
            "text": "\n  private detectCurrentStory(): string {\n    // Analyze recent events to detect story\n    const recentTests = Array.from(this.testResults.values())\n      .slice(-5);",
            "fullText": "\n  private detectCurrentStory(): string {\n    // Analyze recent events to detect story\n    const recentTests = Array.from(this.testResults.values())\n      .slice(-5);",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 344-348",
            "startLine": 344,
            "endLine": 348,
            "lines": 5,
            "text": "  private detectCurrentStory(): string {\n    // Analyze recent events to detect story\n    const recentTests = Array.from(this.testResults.values())\n      .slice(-5);\n    ",
            "fullText": "  private detectCurrentStory(): string {\n    // Analyze recent events to detect story\n    const recentTests = Array.from(this.testResults.values())\n      .slice(-5);\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_371d0be126d35a26b9c3396d49536a56",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 345-349",
            "startLine": 345,
            "endLine": 349,
            "lines": 5,
            "text": "    // Analyze recent events to detect story\n    const recentTests = Array.from(this.testResults.values())\n      .slice(-5);\n    \n    if (recentTests.length > 0) {",
            "fullText": "    // Analyze recent events to detect story\n    const recentTests = Array.from(this.testResults.values())\n      .slice(-5);\n    \n    if (recentTests.length > 0) {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 346-350",
            "startLine": 346,
            "endLine": 350,
            "lines": 5,
            "text": "    const recentTests = Array.from(this.testResults.values())\n      .slice(-5);\n    \n    if (recentTests.length > 0) {\n      // Use most common story ID from recent tests",
            "fullText": "    const recentTests = Array.from(this.testResults.values())\n      .slice(-5);\n    \n    if (recentTests.length > 0) {\n      // Use most common story ID from recent tests",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_baf47800f73841b1465aff7dcc12ed44",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 350-354",
            "startLine": 350,
            "endLine": 354,
            "lines": 5,
            "text": "      // Use most common story ID from recent tests\n      const storyCounts = new Map<string, number>();\n      recentTests.forEach(test => {\n        storyCounts.set(test.storyId, (storyCounts.get(test...",
            "fullText": "      // Use most common story ID from recent tests\n      const storyCounts = new Map<string, number>();\n      recentTests.forEach(test => {\n        storyCounts.set(test.storyId, (storyCounts.get(test.storyId) || 0) + 1);\n      });",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 351-355",
            "startLine": 351,
            "endLine": 355,
            "lines": 5,
            "text": "      const storyCounts = new Map<string, number>();\n      recentTests.forEach(test => {\n        storyCounts.set(test.storyId, (storyCounts.get(test.storyId) || 0) + 1);\n      });\n      ",
            "fullText": "      const storyCounts = new Map<string, number>();\n      recentTests.forEach(test => {\n        storyCounts.set(test.storyId, (storyCounts.get(test.storyId) || 0) + 1);\n      });\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6a71a4d26785a666d0d60ceb81147ddf",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 379-383",
            "startLine": 379,
            "endLine": 383,
            "lines": 5,
            "text": "      // Collect all external calls from tests\n      const actualCalls = new Set<string>();\n      diagTests.forEach(test => {\n        test.externalCalls.forEach(call => actualCalls.add(call));\n      }...",
            "fullText": "      // Collect all external calls from tests\n      const actualCalls = new Set<string>();\n      diagTests.forEach(test => {\n        test.externalCalls.forEach(call => actualCalls.add(call));\n      });",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 380-384",
            "startLine": 380,
            "endLine": 384,
            "lines": 5,
            "text": "      const actualCalls = new Set<string>();\n      diagTests.forEach(test => {\n        test.externalCalls.forEach(call => actualCalls.add(call));\n      });\n      ",
            "fullText": "      const actualCalls = new Set<string>();\n      diagTests.forEach(test => {\n        test.externalCalls.forEach(call => actualCalls.add(call));\n      });\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c80934b3d2d4b214a1ecaa8e2a624bb4",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 384-388",
            "startLine": 384,
            "endLine": 388,
            "lines": 5,
            "text": "      \n      const validation = MermaidParser.validateExternalCalls(\n        diagram,\n        Array.from(actualCalls)\n      );",
            "fullText": "      \n      const validation = MermaidParser.validateExternalCalls(\n        diagram,\n        Array.from(actualCalls)\n      );",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 385-389",
            "startLine": 385,
            "endLine": 389,
            "lines": 5,
            "text": "      const validation = MermaidParser.validateExternalCalls(\n        diagram,\n        Array.from(actualCalls)\n      );\n      ",
            "fullText": "      const validation = MermaidParser.validateExternalCalls(\n        diagram,\n        Array.from(actualCalls)\n      );\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b592fd6c36e4f0767b033b37dfec9b8b",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 412-416",
            "startLine": 412,
            "endLine": 416,
            "lines": 5,
            "text": "    \n    tests.forEach(test => {\n      if (test.coverage) {\n        byTest[test.name] = test.coverage;\n        ",
            "fullText": "    \n    tests.forEach(test => {\n      if (test.coverage) {\n        byTest[test.name] = test.coverage;\n        ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 413-417",
            "startLine": 413,
            "endLine": 417,
            "lines": 5,
            "text": "    tests.forEach(test => {\n      if (test.coverage) {\n        byTest[test.name] = test.coverage;\n        \n        // Aggregate coverage (simplified - real implementation would merge coverage data)",
            "fullText": "    tests.forEach(test => {\n      if (test.coverage) {\n        byTest[test.name] = test.coverage;\n        \n        // Aggregate coverage (simplified - real implementation would merge coverage data)",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_630142d0bf3fcb608ee00165bdeee627",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 491-495",
            "startLine": 491,
            "endLine": 495,
            "lines": 5,
            "text": "    \n    return narrative;\n  }\n  \n  private testsFollowNamingConvention(tests: SystemTest[]): boolean {",
            "fullText": "    \n    return narrative;\n  }\n  \n  private testsFollowNamingConvention(tests: SystemTest[]): boolean {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 492-496",
            "startLine": 492,
            "endLine": 496,
            "lines": 5,
            "text": "    return narrative;\n  }\n  \n  private testsFollowNamingConvention(tests: SystemTest[]): boolean {\n    // Pattern: test_<STORY_ID>_<DIAGRAM_ID>_<SCENARIO>",
            "fullText": "    return narrative;\n  }\n  \n  private testsFollowNamingConvention(tests: SystemTest[]): boolean {\n    // Pattern: test_<STORY_ID>_<DIAGRAM_ID>_<SCENARIO>",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_392c179de5151c7c454fb1690c680ca0",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 503-507",
            "startLine": 503,
            "endLine": 507,
            "lines": 5,
            "text": "    \n    const In Progress = systemTests.filter(t => t.status === 'In Progress').length;\n    const total = systemTests.length;\n    const diagValidations = sequenceDiagrams.filter(d => d.validation.matched).leng...",
            "fullText": "    \n    const In Progress = systemTests.filter(t => t.status === 'In Progress').length;\n    const total = systemTests.length;\n    const diagValidations = sequenceDiagrams.filter(d => d.validation.matched).length;\n    const totalDiagrams = sequenceDiagrams.length;",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 504-508",
            "startLine": 504,
            "endLine": 508,
            "lines": 5,
            "text": "    const In Progress = systemTests.filter(t => t.status === 'In Progress').length;\n    const total = systemTests.length;\n    const diagValidations = sequenceDiagrams.filter(d => d.validation.matched).length;\n ...",
            "fullText": "    const In Progress = systemTests.filter(t => t.status === 'In Progress').length;\n    const total = systemTests.length;\n    const diagValidations = sequenceDiagrams.filter(d => d.validation.matched).length;\n    const totalDiagrams = sequenceDiagrams.length;\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6504104a8f548626190cd1c44223e6b5",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 535-539",
            "startLine": 535,
            "endLine": 539,
            "lines": 5,
            "text": "\n  private createDetailedSummary(report: EnhancedStoryReport): string {\n    // Start with story status\n    const statusIcon = report.storyStatus === 'In Progress' ? '🔄' : '❌';\n    let summary = `\\n**STORY...",
            "fullText": "\n  private createDetailedSummary(report: EnhancedStoryReport): string {\n    // Start with story status\n    const statusIcon = report.storyStatus === 'In Progress' ? '🔄' : '❌';\n    let summary = `\\n**STORY STATUS: ${statusIcon} ${report.storyStatus}**\\n`;",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 536-540",
            "startLine": 536,
            "endLine": 540,
            "lines": 5,
            "text": "  private createDetailedSummary(report: EnhancedStoryReport): string {\n    // Start with story status\n    const statusIcon = report.storyStatus === 'In Progress' ? '🔄' : '❌';\n    let summary = `\\n**STORY ...",
            "fullText": "  private createDetailedSummary(report: EnhancedStoryReport): string {\n    // Start with story status\n    const statusIcon = report.storyStatus === 'In Progress' ? '🔄' : '❌';\n    let summary = `\\n**STORY STATUS: ${statusIcon} ${report.storyStatus}**\\n`;\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_1784ea736cc523c8793dfd141df8f2f6",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 578-582",
            "startLine": 578,
            "endLine": 582,
            "lines": 5,
            "text": "    \n    // Add external call summary\n    const topCalls = Object.entries(report.externalAccess.byFunction)\n      .sort((a, b) => (b[1] as any).count - (a[1] as any).count)\n      .slice(0, 5);",
            "fullText": "    \n    // Add external call summary\n    const topCalls = Object.entries(report.externalAccess.byFunction)\n      .sort((a, b) => (b[1] as any).count - (a[1] as any).count)\n      .slice(0, 5);",
            "isTextBlock": true
          },
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 579-583",
            "startLine": 579,
            "endLine": 583,
            "lines": 5,
            "text": "    // Add external call summary\n    const topCalls = Object.entries(report.externalAccess.byFunction)\n      .sort((a, b) => (b[1] as any).count - (a[1] as any).count)\n      .slice(0, 5);\n    ",
            "fullText": "    // Add external call summary\n    const topCalls = Object.entries(report.externalAccess.byFunction)\n      .sort((a, b) => (b[1] as any).count - (a[1] as any).count)\n      .slice(0, 5);\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_740daea6e8c0382e96783a2e2d70bc5c",
        "locations": [
          {
            "file": "src/agents/enhanced-story-reporter.ts",
            "name": "lines 631-635",
            "startLine": 631,
            "endLine": 635,
            "lines": 5,
            "text": "    });\n  }\n\n  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {",
            "fullText": "    });\n  }\n\n  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 247-251",
            "startLine": 247,
            "endLine": 251,
            "lines": 5,
            "text": "    });\n  }\n\n  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {",
            "fullText": "    });\n  }\n\n  public async shutdown(): Promise<void> {\n    if (this.reportTimer) {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3858a32737259623bdec63465b8253fa",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 51-55",
            "startLine": 51,
            "endLine": 55,
            "lines": 5,
            "text": "    this.ensureLogDir();\n  }\n\n  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {",
            "fullText": "    this.ensureLogDir();\n  }\n\n  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 52-56",
            "startLine": 52,
            "endLine": 56,
            "lines": 5,
            "text": "    this.ensureLogDir();\n  }\n\n  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {",
            "fullText": "    this.ensureLogDir();\n  }\n\n  private ensureLogDir(): void {\n    if (this.config.logDir && !fs.existsSync(this.config.logDir)) {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9fb6b03a0721642827e92d2e3ca081d4",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 56-60",
            "startLine": 56,
            "endLine": 60,
            "lines": 5,
            "text": "      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }\n\n  protected async handleConnect(): Promise<void> {",
            "fullText": "      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }\n\n  protected async handleConnect(): Promise<void> {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 57-61",
            "startLine": 57,
            "endLine": 61,
            "lines": 5,
            "text": "      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }\n\n  protected async handleConnect(): Promise<void> {",
            "fullText": "      fs.mkdirSync(this.config.logDir, { recursive: true });\n    }\n  }\n\n  protected async handleConnect(): Promise<void> {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ca99c29baa6fc93a5ae448509c27248d",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 59-63",
            "startLine": 59,
            "endLine": 63,
            "lines": 5,
            "text": "\n  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`🌍 Environment Monitor connected to room ${this.roomId}`);\n    ",
            "fullText": "\n  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`🌍 Environment Monitor connected to room ${this.roomId}`);\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 60-64",
            "startLine": 60,
            "endLine": 64,
            "lines": 5,
            "text": "  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`🌍 Environment Monitor connected to room ${this.roomId}`);\n    \n    // Start monitoring",
            "fullText": "  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`🌍 Environment Monitor connected to room ${this.roomId}`);\n    \n    // Start monitoring",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_55b2abcab26a656804985d7d23b8455b",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 77-81",
            "startLine": 77,
            "endLine": 81,
            "lines": 5,
            "text": "    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    if (message.type === MessageType.USER_MESSAGE) {",
            "fullText": "    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    if (message.type === MessageType.USER_MESSAGE) {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 82-86",
            "startLine": 82,
            "endLine": 86,
            "lines": 5,
            "text": "    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    if (message.type === MessageType.USER_MESSAGE) {",
            "fullText": "    });\n  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    if (message.type === MessageType.USER_MESSAGE) {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_7132329a53e6579fbe17647998ef1153",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 78-82",
            "startLine": 78,
            "endLine": 82,
            "lines": 5,
            "text": "  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    if (message.type === MessageType.USER_MESSAGE) {\n      const content = message.content.toLowerCase();",
            "fullText": "  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    if (message.type === MessageType.USER_MESSAGE) {\n      const content = message.content.toLowerCase();",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 83-87",
            "startLine": 83,
            "endLine": 87,
            "lines": 5,
            "text": "  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    if (message.type === MessageType.USER_MESSAGE) {\n      const content = message.content.toLowerCase();",
            "fullText": "  }\n\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    if (message.type === MessageType.USER_MESSAGE) {\n      const content = message.content.toLowerCase();",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_7900d05408d1c2e0965a11ab5b053020",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 79-83",
            "startLine": 79,
            "endLine": 83,
            "lines": 5,
            "text": "\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    if (message.type === MessageType.USER_MESSAGE) {\n      const content = message.content.toLowerCase();\n      ",
            "fullText": "\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    if (message.type === MessageType.USER_MESSAGE) {\n      const content = message.content.toLowerCase();\n      ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 84-88",
            "startLine": 84,
            "endLine": 88,
            "lines": 5,
            "text": "\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    if (message.type === MessageType.USER_MESSAGE) {\n      const content = message.content.toLowerCase();\n      ",
            "fullText": "\n  protected async handleMessage(message: WSMessage<any>): Promise<void> {\n    if (message.type === MessageType.USER_MESSAGE) {\n      const content = message.content.toLowerCase();\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_161c1e5eeb02214b2da9d399dcbe9984",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 99-103",
            "startLine": 99,
            "endLine": 103,
            "lines": 5,
            "text": "    \n    this.monitorTimer = setInterval(() => {\n      this.collectMetrics();\n    }, this.config.monitorInterval!);\n    ",
            "fullText": "    \n    this.monitorTimer = setInterval(() => {\n      this.collectMetrics();\n    }, this.config.monitorInterval!);\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 100-104",
            "startLine": 100,
            "endLine": 104,
            "lines": 5,
            "text": "    this.monitorTimer = setInterval(() => {\n      this.collectMetrics();\n    }, this.config.monitorInterval!);\n    \n    // Collect initial metrics",
            "fullText": "    this.monitorTimer = setInterval(() => {\n      this.collectMetrics();\n    }, this.config.monitorInterval!);\n    \n    // Collect initial metrics",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_1c03192dd057bafa83c267c5e5da1c26",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 145-149",
            "startLine": 145,
            "endLine": 149,
            "lines": 5,
            "text": "    // Log metrics\n    if (this.config.logDir) {\n      this.logMetrics(enhancedMetrics);\n    }\n  }",
            "fullText": "    // Log metrics\n    if (this.config.logDir) {\n      this.logMetrics(enhancedMetrics);\n    }\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 146-150",
            "startLine": 146,
            "endLine": 150,
            "lines": 5,
            "text": "    if (this.config.logDir) {\n      this.logMetrics(enhancedMetrics);\n    }\n  }\n",
            "fullText": "    if (this.config.logDir) {\n      this.logMetrics(enhancedMetrics);\n    }\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_67b7474104f774399444b893f8c099a6",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 159-163",
            "startLine": 159,
            "endLine": 163,
            "lines": 5,
            "text": "    // Memory usage alert\n    const memUsagePercent = (metrics.memory.usedPercent);\n    if (memUsagePercent > this.config.alertThresholds!.memoryUsage!) {\n      alerts.push(`Memory usage high: ${memUs...",
            "fullText": "    // Memory usage alert\n    const memUsagePercent = (metrics.memory.usedPercent);\n    if (memUsagePercent > this.config.alertThresholds!.memoryUsage!) {\n      alerts.push(`Memory usage high: ${memUsagePercent.toFixed(1)}%`);\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 160-164",
            "startLine": 160,
            "endLine": 164,
            "lines": 5,
            "text": "    const memUsagePercent = (metrics.memory.usedPercent);\n    if (memUsagePercent > this.config.alertThresholds!.memoryUsage!) {\n      alerts.push(`Memory usage high: ${memUsagePercent.toFixed(1)}%`);...",
            "fullText": "    const memUsagePercent = (metrics.memory.usedPercent);\n    if (memUsagePercent > this.config.alertThresholds!.memoryUsage!) {\n      alerts.push(`Memory usage high: ${memUsagePercent.toFixed(1)}%`);\n    }\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_41fd3b23d72b4ddaf8c8e0e043fc6cdc",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 181-185",
            "startLine": 181,
            "endLine": 185,
            "lines": 5,
            "text": "    \n    // Send alerts (with rate limiting)\n    for (const alert of alerts) {\n      const lastAlert = this.alertsSent.get(alert);\n      const now = new Date();",
            "fullText": "    \n    // Send alerts (with rate limiting)\n    for (const alert of alerts) {\n      const lastAlert = this.alertsSent.get(alert);\n      const now = new Date();",
            "isTextBlock": true
          },
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 182-186",
            "startLine": 182,
            "endLine": 186,
            "lines": 5,
            "text": "    // Send alerts (with rate limiting)\n    for (const alert of alerts) {\n      const lastAlert = this.alertsSent.get(alert);\n      const now = new Date();\n      ",
            "fullText": "    // Send alerts (with rate limiting)\n    for (const alert of alerts) {\n      const lastAlert = this.alertsSent.get(alert);\n      const now = new Date();\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3556a23b7a19b0e8883973df1b96ac34",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 233-237",
            "startLine": 233,
            "endLine": 237,
            "lines": 5,
            "text": "    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: status,\n      metadata: {",
            "fullText": "    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: status,\n      metadata: {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 301-305",
            "startLine": 301,
            "endLine": 305,
            "lines": 5,
            "text": "    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: status,\n      metadata: {",
            "fullText": "    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: status,\n      metadata: {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_1deade261787e693db4ec0b53ddd26be",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 234-238",
            "startLine": 234,
            "endLine": 238,
            "lines": 5,
            "text": "    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: status,\n      metadata: {\n        agent: this.agentName,",
            "fullText": "    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: status,\n      metadata: {\n        agent: this.agentName,",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 302-306",
            "startLine": 302,
            "endLine": 306,
            "lines": 5,
            "text": "    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: status,\n      metadata: {\n        agent: this.agentName,",
            "fullText": "    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,\n      content: status,\n      metadata: {\n        agent: this.agentName,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0b0def5dda85d23ff4d22decf7ddbf82",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 265-269",
            "startLine": 265,
            "endLine": 269,
            "lines": 5,
            "text": "      });\n    }\n    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,",
            "fullText": "      });\n    }\n    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,",
            "isTextBlock": true
          },
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 296-300",
            "startLine": 296,
            "endLine": 300,
            "lines": 5,
            "text": "      });\n    }\n    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,",
            "fullText": "      });\n    }\n    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b6f60cbce2386b9662d26dac3125ef78",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 308-312",
            "startLine": 308,
            "endLine": 312,
            "lines": 5,
            "text": "\n  private formatUptime(seconds: number): string {\n    const days = Math.floor(seconds / 86400);\n    const hours = Math.floor((seconds % 86400) / 3600);\n    const minutes = Math.floor((seconds % 3600)...",
            "fullText": "\n  private formatUptime(seconds: number): string {\n    const days = Math.floor(seconds / 86400);\n    const hours = Math.floor((seconds % 86400) / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);",
            "isTextBlock": true
          },
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 309-313",
            "startLine": 309,
            "endLine": 313,
            "lines": 5,
            "text": "  private formatUptime(seconds: number): string {\n    const days = Math.floor(seconds / 86400);\n    const hours = Math.floor((seconds % 86400) / 3600);\n    const minutes = Math.floor((seconds % 3600) ...",
            "fullText": "  private formatUptime(seconds: number): string {\n    const days = Math.floor(seconds / 86400);\n    const hours = Math.floor((seconds % 86400) / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_712e03fb6e71184a5a2e68ec52d85ab0",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 316-320",
            "startLine": 316,
            "endLine": 320,
            "lines": 5,
            "text": "\n  private formatBytes(bytes: number): string {\n    const gb = bytes / 1024 / 1024 / 1024;\n    return `${gb.toFixed(1)} GB`;\n  }",
            "fullText": "\n  private formatBytes(bytes: number): string {\n    const gb = bytes / 1024 / 1024 / 1024;\n    return `${gb.toFixed(1)} GB`;\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 317-321",
            "startLine": 317,
            "endLine": 321,
            "lines": 5,
            "text": "  private formatBytes(bytes: number): string {\n    const gb = bytes / 1024 / 1024 / 1024;\n    return `${gb.toFixed(1)} GB`;\n  }\n",
            "fullText": "  private formatBytes(bytes: number): string {\n    const gb = bytes / 1024 / 1024 / 1024;\n    return `${gb.toFixed(1)} GB`;\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_481f1eaccce38185493f554409ca41f4",
        "locations": [
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 321-325",
            "startLine": 321,
            "endLine": 325,
            "lines": 5,
            "text": "\n  public async shutdown(): Promise<void> {\n    if (this.monitorTimer) {\n      clearInterval(this.monitorTimer);\n    }",
            "fullText": "\n  public async shutdown(): Promise<void> {\n    if (this.monitorTimer) {\n      clearInterval(this.monitorTimer);\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/environment-monitor.ts",
            "name": "lines 322-326",
            "startLine": 322,
            "endLine": 326,
            "lines": 5,
            "text": "  public async shutdown(): Promise<void> {\n    if (this.monitorTimer) {\n      clearInterval(this.monitorTimer);\n    }\n    ",
            "fullText": "  public async shutdown(): Promise<void> {\n    if (this.monitorTimer) {\n      clearInterval(this.monitorTimer);\n    }\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_af37b3b7ac4f581201a0a0348f1dd402",
        "locations": [
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 60-64",
            "startLine": 60,
            "endLine": 64,
            "lines": 5,
            "text": "\n  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`🌐 External API Monitor connected to room ${this.roomId}`);\n    ",
            "fullText": "\n  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`🌐 External API Monitor connected to room ${this.roomId}`);\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 61-65",
            "startLine": 61,
            "endLine": 65,
            "lines": 5,
            "text": "  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`🌐 External API Monitor connected to room ${this.roomId}`);\n    \n    // Setup interceptors if enabl...",
            "fullText": "  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`🌐 External API Monitor connected to room ${this.roomId}`);\n    \n    // Setup interceptors if enabled",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8f6b74b51613951aa775ee4c52d547ac",
        "locations": [
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 123-127",
            "startLine": 123,
            "endLine": 127,
            "lines": 5,
            "text": "\n  private trackAPICall(log: any): void {\n    const domain = this.extractDomain(log.host || log.hostname || '');\n    if (!domain) return;\n    ",
            "fullText": "\n  private trackAPICall(log: any): void {\n    const domain = this.extractDomain(log.host || log.hostname || '');\n    if (!domain) return;\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 124-128",
            "startLine": 124,
            "endLine": 128,
            "lines": 5,
            "text": "  private trackAPICall(log: any): void {\n    const domain = this.extractDomain(log.host || log.hostname || '');\n    if (!domain) return;\n    \n    // Filter by tracked domains if specified",
            "fullText": "  private trackAPICall(log: any): void {\n    const domain = this.extractDomain(log.host || log.hostname || '');\n    if (!domain) return;\n    \n    // Filter by tracked domains if specified",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_06a7362ccf69cf52f4fe1697b57655c8",
        "locations": [
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 128-132",
            "startLine": 128,
            "endLine": 132,
            "lines": 5,
            "text": "    // Filter by tracked domains if specified\n    if (this.config.trackDomains!.length > 0 && \n        !this.config.trackDomains!.some(d => domain.includes(d))) {\n      return;\n    }",
            "fullText": "    // Filter by tracked domains if specified\n    if (this.config.trackDomains!.length > 0 && \n        !this.config.trackDomains!.some(d => domain.includes(d))) {\n      return;\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 129-133",
            "startLine": 129,
            "endLine": 133,
            "lines": 5,
            "text": "    if (this.config.trackDomains!.length > 0 && \n        !this.config.trackDomains!.some(d => domain.includes(d))) {\n      return;\n    }\n    ",
            "fullText": "    if (this.config.trackDomains!.length > 0 && \n        !this.config.trackDomains!.some(d => domain.includes(d))) {\n      return;\n    }\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_336843212f04109da40f5772ce7f99a6",
        "locations": [
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 149-153",
            "startLine": 149,
            "endLine": 153,
            "lines": 5,
            "text": "    // Alert on errors if configured\n    if (this.config.alertOnErrors && log.error) {\n      this.sendErrorAlert(domain, log);\n    }\n  }",
            "fullText": "    // Alert on errors if configured\n    if (this.config.alertOnErrors && log.error) {\n      this.sendErrorAlert(domain, log);\n    }\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 150-154",
            "startLine": 150,
            "endLine": 154,
            "lines": 5,
            "text": "    if (this.config.alertOnErrors && log.error) {\n      this.sendErrorAlert(domain, log);\n    }\n  }\n",
            "fullText": "    if (this.config.alertOnErrors && log.error) {\n      this.sendErrorAlert(domain, log);\n    }\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c2f6056139c5bd15c27b8ef83a1df7ac",
        "locations": [
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 168-172",
            "startLine": 168,
            "endLine": 172,
            "lines": 5,
            "text": "    \n    this.apiCalls.set(domain, calls);\n  }\n\n  private isExternalDatabase(log: any): boolean {",
            "fullText": "    \n    this.apiCalls.set(domain, calls);\n  }\n\n  private isExternalDatabase(log: any): boolean {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 169-173",
            "startLine": 169,
            "endLine": 173,
            "lines": 5,
            "text": "    this.apiCalls.set(domain, calls);\n  }\n\n  private isExternalDatabase(log: any): boolean {\n    // Consider database external if not localhost",
            "fullText": "    this.apiCalls.set(domain, calls);\n  }\n\n  private isExternalDatabase(log: any): boolean {\n    // Consider database external if not localhost",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a21cb447dd7c9fda4985776d345aa094",
        "locations": [
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 184-188",
            "startLine": 184,
            "endLine": 188,
            "lines": 5,
            "text": "    // Extract main domain for grouping\n    const parts = domain.split('.');\n    if (parts.length >= 2) {\n      return parts.slice(-2).join('.');\n    }",
            "fullText": "    // Extract main domain for grouping\n    const parts = domain.split('.');\n    if (parts.length >= 2) {\n      return parts.slice(-2).join('.');\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 185-189",
            "startLine": 185,
            "endLine": 189,
            "lines": 5,
            "text": "    const parts = domain.split('.');\n    if (parts.length >= 2) {\n      return parts.slice(-2).join('.');\n    }\n    ",
            "fullText": "    const parts = domain.split('.');\n    if (parts.length >= 2) {\n      return parts.slice(-2).join('.');\n    }\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_29866f0f66d5ac1943e5aa3a08e04be8",
        "locations": [
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 213-217",
            "startLine": 213,
            "endLine": 217,
            "lines": 5,
            "text": "\n  private async generatePeriodicReport(): Promise<void> {\n    if (this.apiCalls.size === 0) return;\n    \n    const summary = this.generateSummary();",
            "fullText": "\n  private async generatePeriodicReport(): Promise<void> {\n    if (this.apiCalls.size === 0) return;\n    \n    const summary = this.generateSummary();",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 214-218",
            "startLine": 214,
            "endLine": 218,
            "lines": 5,
            "text": "  private async generatePeriodicReport(): Promise<void> {\n    if (this.apiCalls.size === 0) return;\n    \n    const summary = this.generateSummary();\n    ",
            "fullText": "  private async generatePeriodicReport(): Promise<void> {\n    if (this.apiCalls.size === 0) return;\n    \n    const summary = this.generateSummary();\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_995c5412b1591ac0262634937f4b7a81",
        "locations": [
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 230-234",
            "startLine": 230,
            "endLine": 234,
            "lines": 5,
            "text": "    \n    // Send summary to chat\n    const topDomains = Object.entries(summary)\n      .sort((a, b) => b[1].count - a[1].count)\n      .slice(0, 5);",
            "fullText": "    \n    // Send summary to chat\n    const topDomains = Object.entries(summary)\n      .sort((a, b) => b[1].count - a[1].count)\n      .slice(0, 5);",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 231-235",
            "startLine": 231,
            "endLine": 235,
            "lines": 5,
            "text": "    // Send summary to chat\n    const topDomains = Object.entries(summary)\n      .sort((a, b) => b[1].count - a[1].count)\n      .slice(0, 5);\n    ",
            "fullText": "    // Send summary to chat\n    const topDomains = Object.entries(summary)\n      .sort((a, b) => b[1].count - a[1].count)\n      .slice(0, 5);\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_613a67487bcf79f629b2b97c0b7ec106",
        "locations": [
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 243-247",
            "startLine": 243,
            "endLine": 247,
            "lines": 5,
            "text": "        report += `\\n`;\n      });\n      \n      await this.sendMessage({\n        type: MessageType.AGENT_MESSAGE,",
            "fullText": "        report += `\\n`;\n      });\n      \n      await this.sendMessage({\n        type: MessageType.AGENT_MESSAGE,",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 375-379",
            "startLine": 375,
            "endLine": 379,
            "lines": 5,
            "text": "      report += '\\n';\n    });\n    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,",
            "fullText": "      report += '\\n';\n    });\n    \n    await this.sendMessage({\n      type: MessageType.AGENT_MESSAGE,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c3a1b6c419d552bee111de3fa98a3bf0",
        "locations": [
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 261-265",
            "startLine": 261,
            "endLine": 265,
            "lines": 5,
            "text": "    \n    this.apiCalls.forEach((calls, domain) => {\n      const errorCount = calls.filter(c => c.error).length;\n      const totalLatency = calls.reduce((sum, c) => sum + (c.duration || 0), 0);\n      c...",
            "fullText": "    \n    this.apiCalls.forEach((calls, domain) => {\n      const errorCount = calls.filter(c => c.error).length;\n      const totalLatency = calls.reduce((sum, c) => sum + (c.duration || 0), 0);\n      const totalBytes = calls.reduce((sum, c) => sum + (c.bytesRead || 0) + (c.bytesWritten || 0), 0);",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 262-266",
            "startLine": 262,
            "endLine": 266,
            "lines": 5,
            "text": "    this.apiCalls.forEach((calls, domain) => {\n      const errorCount = calls.filter(c => c.error).length;\n      const totalLatency = calls.reduce((sum, c) => sum + (c.duration || 0), 0);\n      const ...",
            "fullText": "    this.apiCalls.forEach((calls, domain) => {\n      const errorCount = calls.filter(c => c.error).length;\n      const totalLatency = calls.reduce((sum, c) => sum + (c.duration || 0), 0);\n      const totalBytes = calls.reduce((sum, c) => sum + (c.bytesRead || 0) + (c.bytesWritten || 0), 0);\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_64993091bd7c64bbdf4eae373226fe6e",
        "locations": [
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 289-293",
            "startLine": 289,
            "endLine": 293,
            "lines": 5,
            "text": "    \n    let status = `🌐 **External API Status**\\n`;\n    status += `- Active Domains: ${Object.keys(summary).length}\\n`;\n    status += `- Total API Calls: ${Object.values(summary).reduce((sum, s) => ...",
            "fullText": "    \n    let status = `🌐 **External API Status**\\n`;\n    status += `- Active Domains: ${Object.keys(summary).length}\\n`;\n    status += `- Total API Calls: ${Object.values(summary).reduce((sum, s) => sum + s.count, 0)}\\n`;\n    status += `- Total Errors: ${Object.values(summary).reduce((sum, s) => sum + s.errors, 0)}\\n`;",
            "isTextBlock": true
          },
          {
            "file": "src/agents/external-api-monitor.ts",
            "name": "lines 290-294",
            "startLine": 290,
            "endLine": 294,
            "lines": 5,
            "text": "    let status = `🌐 **External API Status**\\n`;\n    status += `- Active Domains: ${Object.keys(summary).length}\\n`;\n    status += `- Total API Calls: ${Object.values(summary).reduce((sum, s) => sum +...",
            "fullText": "    let status = `🌐 **External API Status**\\n`;\n    status += `- Active Domains: ${Object.keys(summary).length}\\n`;\n    status += `- Total API Calls: ${Object.values(summary).reduce((sum, s) => sum + s.count, 0)}\\n`;\n    status += `- Total Errors: ${Object.values(summary).reduce((sum, s) => sum + s.errors, 0)}\\n`;\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a9f18865137301befd8817cf6207aaf7",
        "locations": [
          {
            "file": "src/agents/fraud-checker.ts",
            "name": "lines 5-9",
            "startLine": 5,
            "endLine": 9,
            "lines": 5,
            "text": "\nimport { BaseCoordinatorAgent } from './coordinator-interface';\nimport { WSMessage, MessageType } from '../types/messages';\nimport * as fs from 'fs';\nimport * as path from 'path';",
            "fullText": "\nimport { BaseCoordinatorAgent } from './coordinator-interface';\nimport { WSMessage, MessageType } from '../types/messages';\nimport * as fs from 'fs';\nimport * as path from 'path';",
            "isTextBlock": true
          },
          {
            "file": "src/agents/fraud-checker.ts",
            "name": "lines 6-10",
            "startLine": 6,
            "endLine": 10,
            "lines": 5,
            "text": "import { BaseCoordinatorAgent } from './coordinator-interface';\nimport { WSMessage, MessageType } from '../types/messages';\nimport * as fs from 'fs';\nimport * as path from 'path';\n",
            "fullText": "import { BaseCoordinatorAgent } from './coordinator-interface';\nimport { WSMessage, MessageType } from '../types/messages';\nimport * as fs from 'fs';\nimport * as path from 'path';\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b35139b3d8128b4754fb4a9ae16e7705",
        "locations": [
          {
            "file": "src/agents/fraud-checker.ts",
            "name": "lines 93-97",
            "startLine": 93,
            "endLine": 97,
            "lines": 5,
            "text": "\n  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`🔍 Fraud Checker connected to room ${this.roomId}`);\n    ",
            "fullText": "\n  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`🔍 Fraud Checker connected to room ${this.roomId}`);\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/fraud-checker.ts",
            "name": "lines 94-98",
            "startLine": 94,
            "endLine": 98,
            "lines": 5,
            "text": "  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`🔍 Fraud Checker connected to room ${this.roomId}`);\n    \n    // Announce presence",
            "fullText": "  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`🔍 Fraud Checker connected to room ${this.roomId}`);\n    \n    // Announce presence",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b314cf1bd34568bfa8f9ff6a86438812",
        "locations": [
          {
            "file": "src/agents/fraud-checker.ts",
            "name": "lines 110-114",
            "startLine": 110,
            "endLine": 114,
            "lines": 5,
            "text": "    // Skip system messages and own messages\n    if (message.type === MessageType.SYSTEM_MESSAGE || message.sender === this.agentName) {\n      return;\n    }\n    ",
            "fullText": "    // Skip system messages and own messages\n    if (message.type === MessageType.SYSTEM_MESSAGE || message.sender === this.agentName) {\n      return;\n    }\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/fraud-checker.ts",
            "name": "lines 111-115",
            "startLine": 111,
            "endLine": 115,
            "lines": 5,
            "text": "    if (message.type === MessageType.SYSTEM_MESSAGE || message.sender === this.agentName) {\n      return;\n    }\n    \n    // Check for fraud patterns",
            "fullText": "    if (message.type === MessageType.SYSTEM_MESSAGE || message.sender === this.agentName) {\n      return;\n    }\n    \n    // Check for fraud patterns",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0732c6d0d1a7b4fdbe337b0cef468215",
        "locations": [
          {
            "file": "src/agents/fraud-checker.ts",
            "name": "lines 117-121",
            "startLine": 117,
            "endLine": 121,
            "lines": 5,
            "text": "    \n    if (fraudIndicators.length > 0) {\n      await this.handleSuspiciousActivity(message, fraudIndicators);\n    }\n    ",
            "fullText": "    \n    if (fraudIndicators.length > 0) {\n      await this.handleSuspiciousActivity(message, fraudIndicators);\n    }\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/fraud-checker.ts",
            "name": "lines 118-122",
            "startLine": 118,
            "endLine": 122,
            "lines": 5,
            "text": "    if (fraudIndicators.length > 0) {\n      await this.handleSuspiciousActivity(message, fraudIndicators);\n    }\n    \n    // Check for fraud report requests",
            "fullText": "    if (fraudIndicators.length > 0) {\n      await this.handleSuspiciousActivity(message, fraudIndicators);\n    }\n    \n    // Check for fraud report requests",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_39cfae1ef3cc8d268a0997687309465f",
        "locations": [
          {
            "file": "src/agents/fraud-checker.ts",
            "name": "lines 121-125",
            "startLine": 121,
            "endLine": 125,
            "lines": 5,
            "text": "    \n    // Check for fraud report requests\n    if (message.type === MessageType.USER_MESSAGE) {\n      const content = message.content.toLowerCase();\n      ",
            "fullText": "    \n    // Check for fraud report requests\n    if (message.type === MessageType.USER_MESSAGE) {\n      const content = message.content.toLowerCase();\n      ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 69-73",
            "startLine": 69,
            "endLine": 73,
            "lines": 5,
            "text": "    \n    // Check for story requests\n    if (message.type === MessageType.USER_MESSAGE) {\n      const content = message.content.toLowerCase();\n      ",
            "fullText": "    \n    // Check for story requests\n    if (message.type === MessageType.USER_MESSAGE) {\n      const content = message.content.toLowerCase();\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0e612bc365c943fb065f1204fdf7e5d9",
        "locations": [
          {
            "file": "src/agents/fraud-checker.ts",
            "name": "lines 178-182",
            "startLine": 178,
            "endLine": 182,
            "lines": 5,
            "text": "    // Alert if threshold exceeded\n    if (newScore >= this.config.alertThreshold!) {\n      await this.sendAlert(sender, newScore, indicators);\n    }\n  }",
            "fullText": "    // Alert if threshold exceeded\n    if (newScore >= this.config.alertThreshold!) {\n      await this.sendAlert(sender, newScore, indicators);\n    }\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/fraud-checker.ts",
            "name": "lines 179-183",
            "startLine": 179,
            "endLine": 183,
            "lines": 5,
            "text": "    if (newScore >= this.config.alertThreshold!) {\n      await this.sendAlert(sender, newScore, indicators);\n    }\n  }\n",
            "fullText": "    if (newScore >= this.config.alertThreshold!) {\n      await this.sendAlert(sender, newScore, indicators);\n    }\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_e82ba94b544747165ad957596ce67007",
        "locations": [
          {
            "file": "src/agents/fraud-checker.ts",
            "name": "lines 266-270",
            "startLine": 266,
            "endLine": 270,
            "lines": 5,
            "text": "\n  private async listFraudPatterns(): Promise<void> {\n    const patternList = this.config.patterns!.map(p => \n      `- ${p.category} (${p.severity}): ${p.description}`\n    ).join('\\n');",
            "fullText": "\n  private async listFraudPatterns(): Promise<void> {\n    const patternList = this.config.patterns!.map(p => \n      `- ${p.category} (${p.severity}): ${p.description}`\n    ).join('\\n');",
            "isTextBlock": true
          },
          {
            "file": "src/agents/fraud-checker.ts",
            "name": "lines 267-271",
            "startLine": 267,
            "endLine": 271,
            "lines": 5,
            "text": "  private async listFraudPatterns(): Promise<void> {\n    const patternList = this.config.patterns!.map(p => \n      `- ${p.category} (${p.severity}): ${p.description}`\n    ).join('\\n');\n    ",
            "fullText": "  private async listFraudPatterns(): Promise<void> {\n    const patternList = this.config.patterns!.map(p => \n      `- ${p.category} (${p.severity}): ${p.description}`\n    ).join('\\n');\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b66bcd89db9393d50d407ed15f487df6",
        "locations": [
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 15-19",
            "startLine": 15,
            "endLine": 19,
            "lines": 5,
            "text": "    /** Ollama server URL */\n    serverUrl?: string;\n    /** Generation parameters */\n    parameters?: {\n      temperature?: number;",
            "fullText": "    /** Ollama server URL */\n    serverUrl?: string;\n    /** Generation parameters */\n    parameters?: {\n      temperature?: number;",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 102-106",
            "startLine": 102,
            "endLine": 106,
            "lines": 5,
            "text": "  serverUrl?: string;\n  \n  /** Model parameters */\n  parameters?: {\n    temperature?: number;",
            "fullText": "  serverUrl?: string;\n  \n  /** Model parameters */\n  parameters?: {\n    temperature?: number;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_cf47835c139acd11403ff01eca8ce7cd",
        "locations": [
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 17-21",
            "startLine": 17,
            "endLine": 21,
            "lines": 5,
            "text": "    /** Generation parameters */\n    parameters?: {\n      temperature?: number;\n      top_p?: number;\n      top_k?: number;",
            "fullText": "    /** Generation parameters */\n    parameters?: {\n      temperature?: number;\n      top_p?: number;\n      top_k?: number;",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 104-108",
            "startLine": 104,
            "endLine": 108,
            "lines": 5,
            "text": "  /** Model parameters */\n  parameters?: {\n    temperature?: number;\n    top_p?: number;\n    top_k?: number;",
            "fullText": "  /** Model parameters */\n  parameters?: {\n    temperature?: number;\n    top_p?: number;\n    top_k?: number;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_76f8739b4b8c1e293f5d99c0ee0be4aa",
        "locations": [
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 18-22",
            "startLine": 18,
            "endLine": 22,
            "lines": 5,
            "text": "    parameters?: {\n      temperature?: number;\n      top_p?: number;\n      top_k?: number;\n      num_predict?: number;",
            "fullText": "    parameters?: {\n      temperature?: number;\n      top_p?: number;\n      top_k?: number;\n      num_predict?: number;",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 105-109",
            "startLine": 105,
            "endLine": 109,
            "lines": 5,
            "text": "  parameters?: {\n    temperature?: number;\n    top_p?: number;\n    top_k?: number;\n    num_predict?: number;",
            "fullText": "  parameters?: {\n    temperature?: number;\n    top_p?: number;\n    top_k?: number;\n    num_predict?: number;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_655a1e259e93aae974bbbe87eebfca92",
        "locations": [
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 20-24",
            "startLine": 20,
            "endLine": 24,
            "lines": 5,
            "text": "      top_p?: number;\n      top_k?: number;\n      num_predict?: number;\n      stop?: string[];\n      seed?: number;",
            "fullText": "      top_p?: number;\n      top_k?: number;\n      num_predict?: number;\n      stop?: string[];\n      seed?: number;",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 41-45",
            "startLine": 41,
            "endLine": 45,
            "lines": 5,
            "text": "    top_p?: number;\n    top_k?: number;\n    num_predict?: number;\n    stop?: string[];\n    seed?: number;",
            "fullText": "    top_p?: number;\n    top_k?: number;\n    num_predict?: number;\n    stop?: string[];\n    seed?: number;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_4a4b092b9f61ef856968b3e72761b88b",
        "locations": [
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 21-25",
            "startLine": 21,
            "endLine": 25,
            "lines": 5,
            "text": "      top_k?: number;\n      num_predict?: number;\n      stop?: string[];\n      seed?: number;\n    };",
            "fullText": "      top_k?: number;\n      num_predict?: number;\n      stop?: string[];\n      seed?: number;\n    };",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 42-46",
            "startLine": 42,
            "endLine": 46,
            "lines": 5,
            "text": "    top_k?: number;\n    num_predict?: number;\n    stop?: string[];\n    seed?: number;\n  };",
            "fullText": "    top_k?: number;\n    num_predict?: number;\n    stop?: string[];\n    seed?: number;\n  };",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_4495a77987330dd3310695124c80b6dd",
        "locations": [
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 65-69",
            "startLine": 65,
            "endLine": 69,
            "lines": 5,
            "text": "  \n  protected async onStart(): Promise<void> {\n    console.log(chalk.blue(`🦙 Initializing Ollama with model: ${this.model}`));\n    \n    try {",
            "fullText": "  \n  protected async onStart(): Promise<void> {\n    console.log(chalk.blue(`🦙 Initializing Ollama with model: ${this.model}`));\n    \n    try {",
            "isTextBlock": true
          },
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 66-70",
            "startLine": 66,
            "endLine": 70,
            "lines": 5,
            "text": "  protected async onStart(): Promise<void> {\n    console.log(chalk.blue(`🦙 Initializing Ollama with model: ${this.model}`));\n    \n    try {\n      // Check if Ollama server is running",
            "fullText": "  protected async onStart(): Promise<void> {\n    console.log(chalk.blue(`🦙 Initializing Ollama with model: ${this.model}`));\n    \n    try {\n      // Check if Ollama server is running",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_5d4f3e5cdd3d72a7f6126f0ad443c3bd",
        "locations": [
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 70-74",
            "startLine": 70,
            "endLine": 74,
            "lines": 5,
            "text": "      // Check if Ollama server is running\n      let isRunning = await this.ollamaClient.checkHealth();\n      if (!isRunning) {\n        console.log(chalk.yellow('⚠️  Ollama server not detected. Attemp...",
            "fullText": "      // Check if Ollama server is running\n      let isRunning = await this.ollamaClient.checkHealth();\n      if (!isRunning) {\n        console.log(chalk.yellow('⚠️  Ollama server not detected. Attempting auto-installation...'));\n        ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 71-75",
            "startLine": 71,
            "endLine": 75,
            "lines": 5,
            "text": "      let isRunning = await this.ollamaClient.checkHealth();\n      if (!isRunning) {\n        console.log(chalk.yellow('⚠️  Ollama server not detected. Attempting auto-installation...'));\n        \n    ...",
            "fullText": "      let isRunning = await this.ollamaClient.checkHealth();\n      if (!isRunning) {\n        console.log(chalk.yellow('⚠️  Ollama server not detected. Attempting auto-installation...'));\n        \n        // Try to auto-install Ollama",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_cdac6670b3ba1582b917cfbc440ce30d",
        "locations": [
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 75-79",
            "startLine": 75,
            "endLine": 79,
            "lines": 5,
            "text": "        // Try to auto-install Ollama\n        const installed = await this.ollamaClient.autoInstall();\n        if (!installed) {\n          throw new Error('Failed to install Ollama. Please install man...",
            "fullText": "        // Try to auto-install Ollama\n        const installed = await this.ollamaClient.autoInstall();\n        if (!installed) {\n          throw new Error('Failed to install Ollama. Please install manually from https://ollama.com');\n        }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 76-80",
            "startLine": 76,
            "endLine": 80,
            "lines": 5,
            "text": "        const installed = await this.ollamaClient.autoInstall();\n        if (!installed) {\n          throw new Error('Failed to install Ollama. Please install manually from https://ollama.com');\n     ...",
            "fullText": "        const installed = await this.ollamaClient.autoInstall();\n        if (!installed) {\n          throw new Error('Failed to install Ollama. Please install manually from https://ollama.com');\n        }\n        ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_2d1c8e88da9d94658b74bc0b97d81625",
        "locations": [
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 120-124",
            "startLine": 120,
            "endLine": 124,
            "lines": 5,
            "text": "      // Check for special commands\n      if (message.content.startsWith('/')) {\n        return await this.handleCommand(message.content);\n      }\n      ",
            "fullText": "      // Check for special commands\n      if (message.content.startsWith('/')) {\n        return await this.handleCommand(message.content);\n      }\n      ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 121-125",
            "startLine": 121,
            "endLine": 125,
            "lines": 5,
            "text": "      if (message.content.startsWith('/')) {\n        return await this.handleCommand(message.content);\n      }\n      \n      // Prepare context for Ollama",
            "fullText": "      if (message.content.startsWith('/')) {\n        return await this.handleCommand(message.content);\n      }\n      \n      // Prepare context for Ollama",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_e54ed5f7f2e9ba8fef4119bdfb4859ec",
        "locations": [
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 182-186",
            "startLine": 182,
            "endLine": 186,
            "lines": 5,
            "text": "    // Add system prompt\n    messages.push({\n      role: 'system',\n      content: this.systemPrompt\n    });",
            "fullText": "    // Add system prompt\n    messages.push({\n      role: 'system',\n      content: this.systemPrompt\n    });",
            "isTextBlock": true
          },
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 183-187",
            "startLine": 183,
            "endLine": 187,
            "lines": 5,
            "text": "    messages.push({\n      role: 'system',\n      content: this.systemPrompt\n    });\n    ",
            "fullText": "    messages.push({\n      role: 'system',\n      content: this.systemPrompt\n    });\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c480f0aa38f6d724e91a129889e58c11",
        "locations": [
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 198-202",
            "startLine": 198,
            "endLine": 202,
            "lines": 5,
            "text": "    // Add current message\n    messages.push({\n      role: 'user',\n      content: currentMessage.content\n    });",
            "fullText": "    // Add current message\n    messages.push({\n      role: 'user',\n      content: currentMessage.content\n    });",
            "isTextBlock": true
          },
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 199-203",
            "startLine": 199,
            "endLine": 203,
            "lines": 5,
            "text": "    messages.push({\n      role: 'user',\n      content: currentMessage.content\n    });\n    ",
            "fullText": "    messages.push({\n      role: 'user',\n      content: currentMessage.content\n    });\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_7928f76e31f210cfdaf6f3c770fede8a",
        "locations": [
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 244-248",
            "startLine": 244,
            "endLine": 248,
            "lines": 5,
            "text": "        \n      default:\n        return `Unknown command: /${cmd}. Type /help for available commands.`;\n    }\n  }",
            "fullText": "        \n      default:\n        return `Unknown command: /${cmd}. Type /help for available commands.`;\n    }\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 245-249",
            "startLine": 245,
            "endLine": 249,
            "lines": 5,
            "text": "      default:\n        return `Unknown command: /${cmd}. Type /help for available commands.`;\n    }\n  }\n  ",
            "fullText": "      default:\n        return `Unknown command: /${cmd}. Type /help for available commands.`;\n    }\n  }\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_7a449d59b4d45b7ef06154145c0b86b9",
        "locations": [
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 294-298",
            "startLine": 294,
            "endLine": 298,
            "lines": 5,
            "text": "    \n    // Prepare conversation text\n    const conversationText = messages\n      .map(m => `${m.username}: ${m.content}`)\n      .join('\\n');",
            "fullText": "    \n    // Prepare conversation text\n    const conversationText = messages\n      .map(m => `${m.username}: ${m.content}`)\n      .join('\\n');",
            "isTextBlock": true
          },
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 295-299",
            "startLine": 295,
            "endLine": 299,
            "lines": 5,
            "text": "    // Prepare conversation text\n    const conversationText = messages\n      .map(m => `${m.username}: ${m.content}`)\n      .join('\\n');\n    ",
            "fullText": "    // Prepare conversation text\n    const conversationText = messages\n      .map(m => `${m.username}: ${m.content}`)\n      .join('\\n');\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0f75a245c6bd6d032432fad33500afba",
        "locations": [
          {
            "file": "src/agents/ollama-coordinator.ts",
            "name": "lines 330-334",
            "startLine": 330,
            "endLine": 334,
            "lines": 5,
            "text": "  private formatSize(bytes: number): string {\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math....",
            "fullText": "  private formatSize(bytes: number): string {\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 427-431",
            "startLine": 427,
            "endLine": 431,
            "lines": 5,
            "text": "  private formatSize(bytes: number): string {\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math....",
            "fullText": "  private formatSize(bytes: number): string {\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_636ce60fa6bd59e00d9e0cdd6b46b477",
        "locations": [
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 5-9",
            "startLine": 5,
            "endLine": 9,
            "lines": 5,
            "text": "\nimport { BaseCoordinatorAgent } from './coordinator-interface';\nimport { WSMessage, MessageType } from '../types/messages';\nimport * as path from 'path';\nimport * as fs from 'fs';",
            "fullText": "\nimport { BaseCoordinatorAgent } from './coordinator-interface';\nimport { WSMessage, MessageType } from '../types/messages';\nimport * as path from 'path';\nimport * as fs from 'fs';",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 6-10",
            "startLine": 6,
            "endLine": 10,
            "lines": 5,
            "text": "import { BaseCoordinatorAgent } from './coordinator-interface';\nimport { WSMessage, MessageType } from '../types/messages';\nimport * as path from 'path';\nimport * as fs from 'fs';\n",
            "fullText": "import { BaseCoordinatorAgent } from './coordinator-interface';\nimport { WSMessage, MessageType } from '../types/messages';\nimport * as path from 'path';\nimport * as fs from 'fs';\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f4d3e05f928bb12d63b7f31eaf75de21",
        "locations": [
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 47-51",
            "startLine": 47,
            "endLine": 51,
            "lines": 5,
            "text": "\n  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`📰 Story Reporter connected to room ${this.roomId}`);\n    ",
            "fullText": "\n  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`📰 Story Reporter connected to room ${this.roomId}`);\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 48-52",
            "startLine": 48,
            "endLine": 52,
            "lines": 5,
            "text": "  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`📰 Story Reporter connected to room ${this.roomId}`);\n    \n    // Start periodic reporting",
            "fullText": "  protected async handleConnect(): Promise<void> {\n    await super.handleConnect();\n    console.log(`📰 Story Reporter connected to room ${this.roomId}`);\n    \n    // Start periodic reporting",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_927ae8758aa41ee37e08b3ee1d8d40f5",
        "locations": [
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 117-121",
            "startLine": 117,
            "endLine": 121,
            "lines": 5,
            "text": "    \n    // External theme detection\n    if (lowerContent.match(/http|api|external|network|request/)) {\n      return 'external';\n    }",
            "fullText": "    \n    // External theme detection\n    if (lowerContent.match(/http|api|external|network|request/)) {\n      return 'external';\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 118-122",
            "startLine": 118,
            "endLine": 122,
            "lines": 5,
            "text": "    // External theme detection\n    if (lowerContent.match(/http|api|external|network|request/)) {\n      return 'external';\n    }\n    ",
            "fullText": "    // External theme detection\n    if (lowerContent.match(/http|api|external|network|request/)) {\n      return 'external';\n    }\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8699779e6f8359d415acf9fe6e93d3f6",
        "locations": [
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 131-135",
            "startLine": 131,
            "endLine": 135,
            "lines": 5,
            "text": "\n  private async generatePeriodicReport(): Promise<void> {\n    if (this.storyBuffer.length === 0) return;\n    \n    const report = this.createStoryReport();",
            "fullText": "\n  private async generatePeriodicReport(): Promise<void> {\n    if (this.storyBuffer.length === 0) return;\n    \n    const report = this.createStoryReport();",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 132-136",
            "startLine": 132,
            "endLine": 136,
            "lines": 5,
            "text": "  private async generatePeriodicReport(): Promise<void> {\n    if (this.storyBuffer.length === 0) return;\n    \n    const report = this.createStoryReport();\n    ",
            "fullText": "  private async generatePeriodicReport(): Promise<void> {\n    if (this.storyBuffer.length === 0) return;\n    \n    const report = this.createStoryReport();\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8d9d080a0079890313b7d9fdbcbe5c72",
        "locations": [
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 157-161",
            "startLine": 157,
            "endLine": 161,
            "lines": 5,
            "text": "\n  private createStoryReport(): any {\n    const now = new Date();\n    const events = [...this.storyBuffer];\n    ",
            "fullText": "\n  private createStoryReport(): any {\n    const now = new Date();\n    const events = [...this.storyBuffer];\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 158-162",
            "startLine": 158,
            "endLine": 162,
            "lines": 5,
            "text": "  private createStoryReport(): any {\n    const now = new Date();\n    const events = [...this.storyBuffer];\n    \n    // Theme analysis",
            "fullText": "  private createStoryReport(): any {\n    const now = new Date();\n    const events = [...this.storyBuffer];\n    \n    // Theme analysis",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_efd35d4860ad19429f823a03c7a73330",
        "locations": [
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 162-166",
            "startLine": 162,
            "endLine": 166,
            "lines": 5,
            "text": "    // Theme analysis\n    const themeCount: Record<string, number> = {};\n    events.forEach(event => {\n      themeCount[event.theme] = (themeCount[event.theme] || 0) + 1;\n    });",
            "fullText": "    // Theme analysis\n    const themeCount: Record<string, number> = {};\n    events.forEach(event => {\n      themeCount[event.theme] = (themeCount[event.theme] || 0) + 1;\n    });",
            "isTextBlock": true
          },
          {
            "file": "src/agents/story-reporter.ts",
            "name": "lines 163-167",
            "startLine": 163,
            "endLine": 167,
            "lines": 5,
            "text": "    const themeCount: Record<string, number> = {};\n    events.forEach(event => {\n      themeCount[event.theme] = (themeCount[event.theme] || 0) + 1;\n    });\n    ",
            "fullText": "    const themeCount: Record<string, number> = {};\n    events.forEach(event => {\n      themeCount[event.theme] = (themeCount[event.theme] || 0) + 1;\n    });\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_4ba5fc3589a21b7ce682553f507dc7ed",
        "locations": [
          {
            "file": "src/auth/local-auth-manager.ts",
            "name": "lines 20-24",
            "startLine": 20,
            "endLine": 24,
            "lines": 5,
            "text": "}\n\nexport enum AuthMethod {\n  API_KEY = 'api_key',\n  OAUTH = 'oauth',",
            "fullText": "}\n\nexport enum AuthMethod {\n  API_KEY = 'api_key',\n  OAUTH = 'oauth',",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 171-175",
            "startLine": 171,
            "endLine": 175,
            "lines": 5,
            "text": "}\n\nexport enum AuthMethod {\n  API_KEY = 'api_key',\n  OAUTH = 'oauth',",
            "fullText": "}\n\nexport enum AuthMethod {\n  API_KEY = 'api_key',\n  OAUTH = 'oauth',",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6c911856b359bacedb4e1e504c147b5e",
        "locations": [
          {
            "file": "src/auth/local-auth-manager.ts",
            "name": "lines 21-25",
            "startLine": 21,
            "endLine": 25,
            "lines": 5,
            "text": "\nexport enum AuthMethod {\n  API_KEY = 'api_key',\n  OAUTH = 'oauth',\n  SESSION = 'session',",
            "fullText": "\nexport enum AuthMethod {\n  API_KEY = 'api_key',\n  OAUTH = 'oauth',\n  SESSION = 'session',",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 172-176",
            "startLine": 172,
            "endLine": 176,
            "lines": 5,
            "text": "\nexport enum AuthMethod {\n  API_KEY = 'api_key',\n  OAUTH = 'oauth',\n  SESSION = 'session',",
            "fullText": "\nexport enum AuthMethod {\n  API_KEY = 'api_key',\n  OAUTH = 'oauth',\n  SESSION = 'session',",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3a41244f86f40c1667073e7b543bbcd2",
        "locations": [
          {
            "file": "src/auth/local-auth-manager.ts",
            "name": "lines 36-40",
            "startLine": 36,
            "endLine": 40,
            "lines": 5,
            "text": "    // Store auth in user's home directory\n    this.authDir = path.join(os.homedir(), '.aidev');\n    this.authFile = path.join(this.authDir, 'auth.json');\n    this.loadCredentials();\n  }",
            "fullText": "    // Store auth in user's home directory\n    this.authDir = path.join(os.homedir(), '.aidev');\n    this.authFile = path.join(this.authDir, 'auth.json');\n    this.loadCredentials();\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/auth/local-auth-manager.ts",
            "name": "lines 37-41",
            "startLine": 37,
            "endLine": 41,
            "lines": 5,
            "text": "    this.authDir = path.join(os.homedir(), '.aidev');\n    this.authFile = path.join(this.authDir, 'auth.json');\n    this.loadCredentials();\n  }\n",
            "fullText": "    this.authDir = path.join(os.homedir(), '.aidev');\n    this.authFile = path.join(this.authDir, 'auth.json');\n    this.loadCredentials();\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_46554d448c6737af1b07a7db6a71642c",
        "locations": [
          {
            "file": "src/auth/local-auth-manager.ts",
            "name": "lines 94-98",
            "startLine": 94,
            "endLine": 98,
            "lines": 5,
            "text": "  /**\n   * Get Anthropic authentication from various sources\n   * Returns both the auth token/key and the method used\n   */\n  async getAnthropicAuth(): Promise<{ token: string; method: AuthMethod } | ...",
            "fullText": "  /**\n   * Get Anthropic authentication from various sources\n   * Returns both the auth token/key and the method used\n   */\n  async getAnthropicAuth(): Promise<{ token: string; method: AuthMethod } | null> {",
            "isTextBlock": true
          },
          {
            "file": "src/auth/local-auth-manager.ts",
            "name": "lines 98-102",
            "startLine": 98,
            "endLine": 102,
            "lines": 5,
            "text": "  async getAnthropicAuth(): Promise<{ token: string; method: AuthMethod } | null> {\n    // Priority order:\n    // 1. Environment variable (API key)\n    // 2. OAuth tokens\n    // 3. Session cookies",
            "fullText": "  async getAnthropicAuth(): Promise<{ token: string; method: AuthMethod } | null> {\n    // Priority order:\n    // 1. Environment variable (API key)\n    // 2. OAuth tokens\n    // 3. Session cookies",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_5349ba3209deee7a721f0ef16e83ca1e",
        "locations": [
          {
            "file": "src/auth/local-auth-manager.ts",
            "name": "lines 165-169",
            "startLine": 165,
            "endLine": 169,
            "lines": 5,
            "text": "\n    if (this.credentials?.anthropicApiKey) {\n      console.log(chalk.blue('Using shared Anthropic API key from ~/.aidev/auth.json'));\n      return this.credentials.anthropicApiKey;\n    }",
            "fullText": "\n    if (this.credentials?.anthropicApiKey) {\n      console.log(chalk.blue('Using shared Anthropic API key from ~/.aidev/auth.json'));\n      return this.credentials.anthropicApiKey;\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/auth/local-auth-manager.ts",
            "name": "lines 166-170",
            "startLine": 166,
            "endLine": 170,
            "lines": 5,
            "text": "    if (this.credentials?.anthropicApiKey) {\n      console.log(chalk.blue('Using shared Anthropic API key from ~/.aidev/auth.json'));\n      return this.credentials.anthropicApiKey;\n    }\n",
            "fullText": "    if (this.credentials?.anthropicApiKey) {\n      console.log(chalk.blue('Using shared Anthropic API key from ~/.aidev/auth.json'));\n      return this.credentials.anthropicApiKey;\n    }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_049b808f33c491e4d0e83bd54cd89591",
        "locations": [
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 82-86",
            "startLine": 82,
            "endLine": 86,
            "lines": 5,
            "text": "\n      // Calculate expiration timestamp\n      if (tokens.expires_in && !tokens.expires_at) {\n        tokens.expires_at = Date.now() + (tokens.expires_in * 1000);\n      }",
            "fullText": "\n      // Calculate expiration timestamp\n      if (tokens.expires_in && !tokens.expires_at) {\n        tokens.expires_at = Date.now() + (tokens.expires_in * 1000);\n      }",
            "isTextBlock": true
          },
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 83-87",
            "startLine": 83,
            "endLine": 87,
            "lines": 5,
            "text": "      // Calculate expiration timestamp\n      if (tokens.expires_in && !tokens.expires_at) {\n        tokens.expires_at = Date.now() + (tokens.expires_in * 1000);\n      }\n",
            "fullText": "      // Calculate expiration timestamp\n      if (tokens.expires_in && !tokens.expires_at) {\n        tokens.expires_at = Date.now() + (tokens.expires_in * 1000);\n      }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_af25cc0d34548c3a5b22dcc6242c83f8",
        "locations": [
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 108-112",
            "startLine": 108,
            "endLine": 112,
            "lines": 5,
            "text": "\n    if (this.tokens.expires_at && Date.now() >= this.tokens.expires_at) {\n      console.log(chalk.yellow('OAuth tokens expired'));\n      return false;\n    }",
            "fullText": "\n    if (this.tokens.expires_at && Date.now() >= this.tokens.expires_at) {\n      console.log(chalk.yellow('OAuth tokens expired'));\n      return false;\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 109-113",
            "startLine": 109,
            "endLine": 113,
            "lines": 5,
            "text": "    if (this.tokens.expires_at && Date.now() >= this.tokens.expires_at) {\n      console.log(chalk.yellow('OAuth tokens expired'));\n      return false;\n    }\n",
            "fullText": "    if (this.tokens.expires_at && Date.now() >= this.tokens.expires_at) {\n      console.log(chalk.yellow('OAuth tokens expired'));\n      return false;\n    }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8bb1978ba2ed92fa9f0655184e2543c3",
        "locations": [
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 153-157",
            "startLine": 153,
            "endLine": 157,
            "lines": 5,
            "text": "\n          if (code) {\n            try {\n              // Exchange code for tokens\n              const tokens = await this.exchangeCodeForTokens(code as string);",
            "fullText": "\n          if (code) {\n            try {\n              // Exchange code for tokens\n              const tokens = await this.exchangeCodeForTokens(code as string);",
            "isTextBlock": true
          },
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 154-158",
            "startLine": 154,
            "endLine": 158,
            "lines": 5,
            "text": "          if (code) {\n            try {\n              // Exchange code for tokens\n              const tokens = await this.exchangeCodeForTokens(code as string);\n              ",
            "fullText": "          if (code) {\n            try {\n              // Exchange code for tokens\n              const tokens = await this.exchangeCodeForTokens(code as string);\n              ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_76652f978b3b958e7c98fa4092319e10",
        "locations": [
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 185-189",
            "startLine": 185,
            "endLine": 189,
            "lines": 5,
            "text": "        \n        console.log(chalk.cyan('🌐 Opening browser for authentication...'));\n        console.log(chalk.gray(`Auth URL: ${authUrl}`));\n        console.log(chalk.gray('If browser doesn\\'t open ...",
            "fullText": "        \n        console.log(chalk.cyan('🌐 Opening browser for authentication...'));\n        console.log(chalk.gray(`Auth URL: ${authUrl}`));\n        console.log(chalk.gray('If browser doesn\\'t open automatically, copy the URL above'));\n        console.log(chalk.gray('Waiting for authentication...\\n'));",
            "isTextBlock": true
          },
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 186-190",
            "startLine": 186,
            "endLine": 190,
            "lines": 5,
            "text": "        console.log(chalk.cyan('🌐 Opening browser for authentication...'));\n        console.log(chalk.gray(`Auth URL: ${authUrl}`));\n        console.log(chalk.gray('If browser doesn\\'t open automatic...",
            "fullText": "        console.log(chalk.cyan('🌐 Opening browser for authentication...'));\n        console.log(chalk.gray(`Auth URL: ${authUrl}`));\n        console.log(chalk.gray('If browser doesn\\'t open automatically, copy the URL above'));\n        console.log(chalk.gray('Waiting for authentication...\\n'));\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0011859c87005521a3abb46bc519ca63",
        "locations": [
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 202-206",
            "startLine": 202,
            "endLine": 206,
            "lines": 5,
            "text": "\n  /**\n   * Exchange authorization code for access tokens\n   */\n  private async exchangeCodeForTokens(_code: string): Promise<OAuthTokens> {",
            "fullText": "\n  /**\n   * Exchange authorization code for access tokens\n   */\n  private async exchangeCodeForTokens(_code: string): Promise<OAuthTokens> {",
            "isTextBlock": true
          },
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 203-207",
            "startLine": 203,
            "endLine": 207,
            "lines": 5,
            "text": "  /**\n   * Exchange authorization code for access tokens\n   */\n  private async exchangeCodeForTokens(_code: string): Promise<OAuthTokens> {\n    // In a real implementation, this would make an HTTP req...",
            "fullText": "  /**\n   * Exchange authorization code for access tokens\n   */\n  private async exchangeCodeForTokens(_code: string): Promise<OAuthTokens> {\n    // In a real implementation, this would make an HTTP request to the token endpoint",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ff91f75a6c4b759fc64c1c4dd0639540",
        "locations": [
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 207-211",
            "startLine": 207,
            "endLine": 211,
            "lines": 5,
            "text": "    // In a real implementation, this would make an HTTP request to the token endpoint\n    console.log(chalk.yellow('🔄 Exchanging authorization code for tokens...'));\n    \n    // Simulate API call de...",
            "fullText": "    // In a real implementation, this would make an HTTP request to the token endpoint\n    console.log(chalk.yellow('🔄 Exchanging authorization code for tokens...'));\n    \n    // Simulate API call delay\n    await new Promise(Working on => setTimeout(Working on, 1000));",
            "isTextBlock": true
          },
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 208-212",
            "startLine": 208,
            "endLine": 212,
            "lines": 5,
            "text": "    console.log(chalk.yellow('🔄 Exchanging authorization code for tokens...'));\n    \n    // Simulate API call delay\n    await new Promise(Working on => setTimeout(Working on, 1000));\n    ",
            "fullText": "    console.log(chalk.yellow('🔄 Exchanging authorization code for tokens...'));\n    \n    // Simulate API call delay\n    await new Promise(Working on => setTimeout(Working on, 1000));\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_75833f8ea4479d01d300640f554a8afa",
        "locations": [
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 232-236",
            "startLine": 232,
            "endLine": 236,
            "lines": 5,
            "text": "    \n    // Try different browsers based on platform\n    const platform = os.platform();\n    let command: string;\n    let args: string[];",
            "fullText": "    \n    // Try different browsers based on platform\n    const platform = os.platform();\n    let command: string;\n    let args: string[];",
            "isTextBlock": true
          },
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 233-237",
            "startLine": 233,
            "endLine": 237,
            "lines": 5,
            "text": "    // Try different browsers based on platform\n    const platform = os.platform();\n    let command: string;\n    let args: string[];\n",
            "fullText": "    // Try different browsers based on platform\n    const platform = os.platform();\n    let command: string;\n    let args: string[];\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_fab6b16fd171c2a27a172dfb484b6342",
        "locations": [
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 294-298",
            "startLine": 294,
            "endLine": 298,
            "lines": 5,
            "text": "    // Check if we have valid tokens\n    if (this.isTokenValid()) {\n      return this.tokens!.access_token;\n    }\n",
            "fullText": "    // Check if we have valid tokens\n    if (this.isTokenValid()) {\n      return this.tokens!.access_token;\n    }\n",
            "isTextBlock": true
          },
          {
            "file": "src/auth/oauth-auth-manager.ts",
            "name": "lines 295-299",
            "startLine": 295,
            "endLine": 299,
            "lines": 5,
            "text": "    if (this.isTokenValid()) {\n      return this.tokens!.access_token;\n    }\n\n    // Try to refresh if possible",
            "fullText": "    if (this.isTokenValid()) {\n      return this.tokens!.access_token;\n    }\n\n    // Try to refresh if possible",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ee4cc55202a2a4e9f24fc6633b28f40a",
        "locations": [
          {
            "file": "src/auth/session-auth-manager.ts",
            "name": "lines 144-148",
            "startLine": 144,
            "endLine": 148,
            "lines": 5,
            "text": "    \n    if (profiles.length === 0) {\n      console.log(chalk.yellow('⚠️  No browser cookie databases found'));\n      return null;\n    }",
            "fullText": "    \n    if (profiles.length === 0) {\n      console.log(chalk.yellow('⚠️  No browser cookie databases found'));\n      return null;\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/auth/session-auth-manager.ts",
            "name": "lines 145-149",
            "startLine": 145,
            "endLine": 149,
            "lines": 5,
            "text": "    if (profiles.length === 0) {\n      console.log(chalk.yellow('⚠️  No browser cookie databases found'));\n      return null;\n    }\n",
            "fullText": "    if (profiles.length === 0) {\n      console.log(chalk.yellow('⚠️  No browser cookie databases found'));\n      return null;\n    }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3c9225a6c7a251a4413147212c0bd662",
        "locations": [
          {
            "file": "src/auth/session-auth-manager.ts",
            "name": "lines 149-153",
            "startLine": 149,
            "endLine": 153,
            "lines": 5,
            "text": "\n    console.log(chalk.gray(`Found ${profiles.length} browser profile(s):`));\n    profiles.forEach(p => console.log(chalk.gray(`  - ${p.name}`)));\n\n    // In a real implementation, this would:",
            "fullText": "\n    console.log(chalk.gray(`Found ${profiles.length} browser profile(s):`));\n    profiles.forEach(p => console.log(chalk.gray(`  - ${p.name}`)));\n\n    // In a real implementation, this would:",
            "isTextBlock": true
          },
          {
            "file": "src/auth/session-auth-manager.ts",
            "name": "lines 150-154",
            "startLine": 150,
            "endLine": 154,
            "lines": 5,
            "text": "    console.log(chalk.gray(`Found ${profiles.length} browser profile(s):`));\n    profiles.forEach(p => console.log(chalk.gray(`  - ${p.name}`)));\n\n    // In a real implementation, this would:\n    // 1...",
            "fullText": "    console.log(chalk.gray(`Found ${profiles.length} browser profile(s):`));\n    profiles.forEach(p => console.log(chalk.gray(`  - ${p.name}`)));\n\n    // In a real implementation, this would:\n    // 1. Connect to browser SQLite databases",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ad098a5bc5c9204cf8589b14ec588ca0",
        "locations": [
          {
            "file": "src/auth/session-auth-manager.ts",
            "name": "lines 170-174",
            "startLine": 170,
            "endLine": 174,
            "lines": 5,
            "text": "\n    console.log(chalk.green('🔄 In Progress extracted Claude session cookies'));\n    this.saveSession(extractedCookies);\n    return extractedCookies;\n  }",
            "fullText": "\n    console.log(chalk.green('🔄 In Progress extracted Claude session cookies'));\n    this.saveSession(extractedCookies);\n    return extractedCookies;\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/auth/session-auth-manager.ts",
            "name": "lines 171-175",
            "startLine": 171,
            "endLine": 175,
            "lines": 5,
            "text": "    console.log(chalk.green('🔄 In Progress extracted Claude session cookies'));\n    this.saveSession(extractedCookies);\n    return extractedCookies;\n  }\n",
            "fullText": "    console.log(chalk.green('🔄 In Progress extracted Claude session cookies'));\n    this.saveSession(extractedCookies);\n    return extractedCookies;\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_7db380f22bdce7fb43315218b7b76a7c",
        "locations": [
          {
            "file": "src/cli/claude-auth.ts",
            "name": "lines 7-11",
            "startLine": 7,
            "endLine": 11,
            "lines": 5,
            "text": "\nimport chalk from 'chalk';\nimport { authManager, AuthMethod } from '../auth/local-auth-manager';\nimport { oauthManager } from '../auth/oauth-auth-manager';\nimport { sessionManager } from '../auth/ses...",
            "fullText": "\nimport chalk from 'chalk';\nimport { authManager, AuthMethod } from '../auth/local-auth-manager';\nimport { oauthManager } from '../auth/oauth-auth-manager';\nimport { sessionManager } from '../auth/session-auth-manager';",
            "isTextBlock": true
          },
          {
            "file": "src/cli/claude-auth.ts",
            "name": "lines 8-12",
            "startLine": 8,
            "endLine": 12,
            "lines": 5,
            "text": "import chalk from 'chalk';\nimport { authManager, AuthMethod } from '../auth/local-auth-manager';\nimport { oauthManager } from '../auth/oauth-auth-manager';\nimport { sessionManager } from '../auth/sess...",
            "fullText": "import chalk from 'chalk';\nimport { authManager, AuthMethod } from '../auth/local-auth-manager';\nimport { oauthManager } from '../auth/oauth-auth-manager';\nimport { sessionManager } from '../auth/session-auth-manager';\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9171c126590288ee646dcc726d0f93c3",
        "locations": [
          {
            "file": "src/cli/claude-auth.ts",
            "name": "lines 18-22",
            "startLine": 18,
            "endLine": 22,
            "lines": 5,
            "text": "\n  switch (command) {\n    case 'setup':\n      await authManager.setupAuth();\n      break;",
            "fullText": "\n  switch (command) {\n    case 'setup':\n      await authManager.setupAuth();\n      break;",
            "isTextBlock": true
          },
          {
            "file": "src/cli/claude-auth.ts",
            "name": "lines 19-23",
            "startLine": 19,
            "endLine": 23,
            "lines": 5,
            "text": "  switch (command) {\n    case 'setup':\n      await authManager.setupAuth();\n      break;\n",
            "fullText": "  switch (command) {\n    case 'setup':\n      await authManager.setupAuth();\n      break;\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b5c7abb731756bfb02333da532ee9d4a",
        "locations": [
          {
            "file": "src/cli/claude-auth.ts",
            "name": "lines 65-69",
            "startLine": 65,
            "endLine": 69,
            "lines": 5,
            "text": "\n  // Check all authentication methods\n  const auth = await authManager.getAnthropicAuth();\n  const oauthStatus = oauthManager.getOAuthStatus();\n  const sessionStatus = sessionManager.getSessionStatus...",
            "fullText": "\n  // Check all authentication methods\n  const auth = await authManager.getAnthropicAuth();\n  const oauthStatus = oauthManager.getOAuthStatus();\n  const sessionStatus = sessionManager.getSessionStatus();",
            "isTextBlock": true
          },
          {
            "file": "src/cli/claude-auth.ts",
            "name": "lines 66-70",
            "startLine": 66,
            "endLine": 70,
            "lines": 5,
            "text": "  // Check all authentication methods\n  const auth = await authManager.getAnthropicAuth();\n  const oauthStatus = oauthManager.getOAuthStatus();\n  const sessionStatus = sessionManager.getSessionStatus(...",
            "fullText": "  // Check all authentication methods\n  const auth = await authManager.getAnthropicAuth();\n  const oauthStatus = oauthManager.getOAuthStatus();\n  const sessionStatus = sessionManager.getSessionStatus();\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_d2d7c1a92b0f1f15bf6e2c51b1be0f83",
        "locations": [
          {
            "file": "src/cli/claude-auth.ts",
            "name": "lines 80-84",
            "startLine": 80,
            "endLine": 84,
            "lines": 5,
            "text": "\n  // Show detailed status for each method\n  console.log(chalk.bold('📋 Available Methods:'));\n  console.log();\n",
            "fullText": "\n  // Show detailed status for each method\n  console.log(chalk.bold('📋 Available Methods:'));\n  console.log();\n",
            "isTextBlock": true
          },
          {
            "file": "src/cli/claude-auth.ts",
            "name": "lines 81-85",
            "startLine": 81,
            "endLine": 85,
            "lines": 5,
            "text": "  // Show detailed status for each method\n  console.log(chalk.bold('📋 Available Methods:'));\n  console.log();\n\n  // Environment variable",
            "fullText": "  // Show detailed status for each method\n  console.log(chalk.bold('📋 Available Methods:'));\n  console.log();\n\n  // Environment variable",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a1e4a3927ada31de14b15a7cd56e50c3",
        "locations": [
          {
            "file": "src/cli/claude-auth.ts",
            "name": "lines 85-89",
            "startLine": 85,
            "endLine": 89,
            "lines": 5,
            "text": "  // Environment variable\n  const envKey = process.env.ANTHROPIC_API_KEY;\n  console.log(chalk.cyan('🔑 Environment Variable (ANTHROPIC_API_KEY)'));\n  console.log(chalk.gray(`   Status: ${envKey ? '🔄 S...",
            "fullText": "  // Environment variable\n  const envKey = process.env.ANTHROPIC_API_KEY;\n  console.log(chalk.cyan('🔑 Environment Variable (ANTHROPIC_API_KEY)'));\n  console.log(chalk.gray(`   Status: ${envKey ? '🔄 Set' : '❌ Not set'}`));\n  console.log();",
            "isTextBlock": true
          },
          {
            "file": "src/cli/claude-auth.ts",
            "name": "lines 86-90",
            "startLine": 86,
            "endLine": 90,
            "lines": 5,
            "text": "  const envKey = process.env.ANTHROPIC_API_KEY;\n  console.log(chalk.cyan('🔑 Environment Variable (ANTHROPIC_API_KEY)'));\n  console.log(chalk.gray(`   Status: ${envKey ? '🔄 Set' : '❌ Not set'}`));\n  c...",
            "fullText": "  const envKey = process.env.ANTHROPIC_API_KEY;\n  console.log(chalk.cyan('🔑 Environment Variable (ANTHROPIC_API_KEY)'));\n  console.log(chalk.gray(`   Status: ${envKey ? '🔄 Set' : '❌ Not set'}`));\n  console.log();\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_2a0fa1dbe7871d98c901dae0593d1010",
        "locations": [
          {
            "file": "src/cli/claude-auth.ts",
            "name": "lines 147-151",
            "startLine": 147,
            "endLine": 151,
            "lines": 5,
            "text": "  \n  if (!apiKey) {\n    console.log(chalk.red('✗ No API key found'));\n    return;\n  }",
            "fullText": "  \n  if (!apiKey) {\n    console.log(chalk.red('✗ No API key found'));\n    return;\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/cli/claude-auth.ts",
            "name": "lines 148-152",
            "startLine": 148,
            "endLine": 152,
            "lines": 5,
            "text": "  if (!apiKey) {\n    console.log(chalk.red('✗ No API key found'));\n    return;\n  }\n",
            "fullText": "  if (!apiKey) {\n    console.log(chalk.red('✗ No API key found'));\n    return;\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_1ba0504cb1e027d3fdf540932a89c58c",
        "locations": [
          {
            "file": "src/cli/claude-auth.ts",
            "name": "lines 189-193",
            "startLine": 189,
            "endLine": 193,
            "lines": 5,
            "text": "    \n    case 'logout':\n      oauthManager.clearTokens();\n      console.log(chalk.green('🔄 OAuth tokens cleared'));\n      break;",
            "fullText": "    \n    case 'logout':\n      oauthManager.clearTokens();\n      console.log(chalk.green('🔄 OAuth tokens cleared'));\n      break;",
            "isTextBlock": true
          },
          {
            "file": "src/cli/claude-auth.ts",
            "name": "lines 190-194",
            "startLine": 190,
            "endLine": 194,
            "lines": 5,
            "text": "    case 'logout':\n      oauthManager.clearTokens();\n      console.log(chalk.green('🔄 OAuth tokens cleared'));\n      break;\n    ",
            "fullText": "    case 'logout':\n      oauthManager.clearTokens();\n      console.log(chalk.green('🔄 OAuth tokens cleared'));\n      break;\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8162797dacd44f8c0a87bb40bc9e436e",
        "locations": [
          {
            "file": "src/cli/claude-auth.ts",
            "name": "lines 249-253",
            "startLine": 249,
            "endLine": 253,
            "lines": 5,
            "text": "    \n    case 'clear':\n      sessionManager.clearSession();\n      console.log(chalk.green('🔄 Session cookies cleared'));\n      break;",
            "fullText": "    \n    case 'clear':\n      sessionManager.clearSession();\n      console.log(chalk.green('🔄 Session cookies cleared'));\n      break;",
            "isTextBlock": true
          },
          {
            "file": "src/cli/claude-auth.ts",
            "name": "lines 250-254",
            "startLine": 250,
            "endLine": 254,
            "lines": 5,
            "text": "    case 'clear':\n      sessionManager.clearSession();\n      console.log(chalk.green('🔄 Session cookies cleared'));\n      break;\n    ",
            "fullText": "    case 'clear':\n      sessionManager.clearSession();\n      console.log(chalk.green('🔄 Session cookies cleared'));\n      break;\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_4626a2366d378d4159e3d811bfa144e5",
        "locations": [
          {
            "file": "src/cli/ollama-coordinator-cli.ts",
            "name": "lines 33-37",
            "startLine": 33,
            "endLine": 37,
            "lines": 5,
            "text": "      // Handle special commands\n      if (options.gpuInfo) {\n        const { OllamaClient } = await import('../services/ollama-client');\n        const client = new OllamaClient({ baseUrl: options.oll...",
            "fullText": "      // Handle special commands\n      if (options.gpuInfo) {\n        const { OllamaClient } = await import('../services/ollama-client');\n        const client = new OllamaClient({ baseUrl: options.ollamaUrl });\n        const gpuInfo = await client.checkGPU();",
            "isTextBlock": true
          },
          {
            "file": "src/cli/ollama-coordinator-cli.ts",
            "name": "lines 34-38",
            "startLine": 34,
            "endLine": 38,
            "lines": 5,
            "text": "      if (options.gpuInfo) {\n        const { OllamaClient } = await import('../services/ollama-client');\n        const client = new OllamaClient({ baseUrl: options.ollamaUrl });\n        const gpuInfo ...",
            "fullText": "      if (options.gpuInfo) {\n        const { OllamaClient } = await import('../services/ollama-client');\n        const client = new OllamaClient({ baseUrl: options.ollamaUrl });\n        const gpuInfo = await client.checkGPU();\n        ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8a0068d42b8f8fa8c38e24882dca8b15",
        "locations": [
          {
            "file": "src/cli/ollama-coordinator-cli.ts",
            "name": "lines 93-97",
            "startLine": 93,
            "endLine": 97,
            "lines": 5,
            "text": "      // Start the coordinator\n      await coordinator.start();\n      \n      console.log(chalk.green('\\n🔄 Coordinator is running!'));\n      console.log(chalk.gray('Press Ctrl+C to stop\\n'));",
            "fullText": "      // Start the coordinator\n      await coordinator.start();\n      \n      console.log(chalk.green('\\n🔄 Coordinator is running!'));\n      console.log(chalk.gray('Press Ctrl+C to stop\\n'));",
            "isTextBlock": true
          },
          {
            "file": "src/cli/ollama-coordinator-cli.ts",
            "name": "lines 94-98",
            "startLine": 94,
            "endLine": 98,
            "lines": 5,
            "text": "      await coordinator.start();\n      \n      console.log(chalk.green('\\n🔄 Coordinator is running!'));\n      console.log(chalk.gray('Press Ctrl+C to stop\\n'));\n      ",
            "fullText": "      await coordinator.start();\n      \n      console.log(chalk.green('\\n🔄 Coordinator is running!'));\n      console.log(chalk.gray('Press Ctrl+C to stop\\n'));\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b74c9fe3fca1533d7b6c92a50eb037ae",
        "locations": [
          {
            "file": "src/cli/ollama-coordinator-cli.ts",
            "name": "lines 106-110",
            "startLine": 106,
            "endLine": 110,
            "lines": 5,
            "text": "      // Keep the process running\n      await new Promise(() => {});\n      \n    } catch (error: any) {\n      console.error(chalk.red('\\n❌ Error:'), error.message);",
            "fullText": "      // Keep the process running\n      await new Promise(() => {});\n      \n    } catch (error: any) {\n      console.error(chalk.red('\\n❌ Error:'), error.message);",
            "isTextBlock": true
          },
          {
            "file": "src/cli/ollama-coordinator-cli.ts",
            "name": "lines 107-111",
            "startLine": 107,
            "endLine": 111,
            "lines": 5,
            "text": "      await new Promise(() => {});\n      \n    } catch (error: any) {\n      console.error(chalk.red('\\n❌ Error:'), error.message);\n      ",
            "fullText": "      await new Promise(() => {});\n      \n    } catch (error: any) {\n      console.error(chalk.red('\\n❌ Error:'), error.message);\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6c39dc5aebc3b65100acec9a5977c515",
        "locations": [
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 45-49",
            "startLine": 45,
            "endLine": 49,
            "lines": 5,
            "text": "\n      // Handle commands\n      if (trimmed.startsWith('/')) {\n        this.handleCommand(trimmed);\n      } else {",
            "fullText": "\n      // Handle commands\n      if (trimmed.startsWith('/')) {\n        this.handleCommand(trimmed);\n      } else {",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 46-50",
            "startLine": 46,
            "endLine": 50,
            "lines": 5,
            "text": "      // Handle commands\n      if (trimmed.startsWith('/')) {\n        this.handleCommand(trimmed);\n      } else {\n        // Send regular message",
            "fullText": "      // Handle commands\n      if (trimmed.startsWith('/')) {\n        this.handleCommand(trimmed);\n      } else {\n        // Send regular message",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b262f7eaa69320e35eff9b4a44304a33",
        "locations": [
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 72-76",
            "startLine": 72,
            "endLine": 76,
            "lines": 5,
            "text": "\n      this.ws.on('open', () => {\n        console.log(chalk.green('Connected to server!'));\n        this.connected = true;\n        this.reconnectAttempts = 0;",
            "fullText": "\n      this.ws.on('open', () => {\n        console.log(chalk.green('Connected to server!'));\n        this.connected = true;\n        this.reconnectAttempts = 0;",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 73-77",
            "startLine": 73,
            "endLine": 77,
            "lines": 5,
            "text": "      this.ws.on('open', () => {\n        console.log(chalk.green('Connected to server!'));\n        this.connected = true;\n        this.reconnectAttempts = 0;\n",
            "fullText": "      this.ws.on('open', () => {\n        console.log(chalk.green('Connected to server!'));\n        this.connected = true;\n        this.reconnectAttempts = 0;\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_29a2aef5ef28060e7794ff2a529dcc56",
        "locations": [
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 148-152",
            "startLine": 148,
            "endLine": 152,
            "lines": 5,
            "text": "\n  private displayRoomState(room: any) {\n    console.clear();\n    console.log(chalk.bold.white(`\\n=== ${room.name} ===`));\n    console.log(chalk.gray(`Users: ${room.users.map((u: any) => u.username).j...",
            "fullText": "\n  private displayRoomState(room: any) {\n    console.clear();\n    console.log(chalk.bold.white(`\\n=== ${room.name} ===`));\n    console.log(chalk.gray(`Users: ${room.users.map((u: any) => u.username).join(', ')}`));",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 149-153",
            "startLine": 149,
            "endLine": 153,
            "lines": 5,
            "text": "  private displayRoomState(room: any) {\n    console.clear();\n    console.log(chalk.bold.white(`\\n=== ${room.name} ===`));\n    console.log(chalk.gray(`Users: ${room.users.map((u: any) => u.username).jo...",
            "fullText": "  private displayRoomState(room: any) {\n    console.clear();\n    console.log(chalk.bold.white(`\\n=== ${room.name} ===`));\n    console.log(chalk.gray(`Users: ${room.users.map((u: any) => u.username).join(', ')}`));\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a278b4d531bfa00414bdc225464cfe41",
        "locations": [
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 161-165",
            "startLine": 161,
            "endLine": 165,
            "lines": 5,
            "text": "    // Display last 10 messages\n    const recentMessages = room.messages.slice(-10);\n    recentMessages.forEach((msg: any) => {\n      this.displayMessage(msg, false);\n    });",
            "fullText": "    // Display last 10 messages\n    const recentMessages = room.messages.slice(-10);\n    recentMessages.forEach((msg: any) => {\n      this.displayMessage(msg, false);\n    });",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 162-166",
            "startLine": 162,
            "endLine": 166,
            "lines": 5,
            "text": "    const recentMessages = room.messages.slice(-10);\n    recentMessages.forEach((msg: any) => {\n      this.displayMessage(msg, false);\n    });\n",
            "fullText": "    const recentMessages = room.messages.slice(-10);\n    recentMessages.forEach((msg: any) => {\n      this.displayMessage(msg, false);\n    });\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9355078f5cfb6c854da4e93ba3e6af48",
        "locations": [
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 170-174",
            "startLine": 170,
            "endLine": 174,
            "lines": 5,
            "text": "\n  private displayMessage(message: any, withTimestamp: boolean = true) {\n    const time = withTimestamp \n      ? chalk.gray(`[${new Date(message.timestamp).toLocaleTimeString()}] `)\n      : '';",
            "fullText": "\n  private displayMessage(message: any, withTimestamp: boolean = true) {\n    const time = withTimestamp \n      ? chalk.gray(`[${new Date(message.timestamp).toLocaleTimeString()}] `)\n      : '';",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 171-175",
            "startLine": 171,
            "endLine": 175,
            "lines": 5,
            "text": "  private displayMessage(message: any, withTimestamp: boolean = true) {\n    const time = withTimestamp \n      ? chalk.gray(`[${new Date(message.timestamp).toLocaleTimeString()}] `)\n      : '';\n",
            "fullText": "  private displayMessage(message: any, withTimestamp: boolean = true) {\n    const time = withTimestamp \n      ? chalk.gray(`[${new Date(message.timestamp).toLocaleTimeString()}] `)\n      : '';\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_96dd844b037aa43533291df477128047",
        "locations": [
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 175-179",
            "startLine": 175,
            "endLine": 179,
            "lines": 5,
            "text": "\n    switch (message.type) {\n      case MessageType.USER_MESSAGE:\n        console.log(`${time}${chalk.white(message.username)}: ${message.content}`);\n        break;",
            "fullText": "\n    switch (message.type) {\n      case MessageType.USER_MESSAGE:\n        console.log(`${time}${chalk.white(message.username)}: ${message.content}`);\n        break;",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 176-180",
            "startLine": 176,
            "endLine": 180,
            "lines": 5,
            "text": "    switch (message.type) {\n      case MessageType.USER_MESSAGE:\n        console.log(`${time}${chalk.white(message.username)}: ${message.content}`);\n        break;\n",
            "fullText": "    switch (message.type) {\n      case MessageType.USER_MESSAGE:\n        console.log(`${time}${chalk.white(message.username)}: ${message.content}`);\n        break;\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8b8bd03d26f83d43c671b0883fcbd9bd",
        "locations": [
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 203-207",
            "startLine": 203,
            "endLine": 207,
            "lines": 5,
            "text": "\n  private handleCommand(input: string) {\n    const parts = input.split(' ');\n    const command = parts[0];\n    const args = parts.slice(1);",
            "fullText": "\n  private handleCommand(input: string) {\n    const parts = input.split(' ');\n    const command = parts[0];\n    const args = parts.slice(1);",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 204-208",
            "startLine": 204,
            "endLine": 208,
            "lines": 5,
            "text": "  private handleCommand(input: string) {\n    const parts = input.split(' ');\n    const command = parts[0];\n    const args = parts.slice(1);\n",
            "fullText": "  private handleCommand(input: string) {\n    const parts = input.split(' ');\n    const command = parts[0];\n    const args = parts.slice(1);\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_86cd730d9c4683d24a1aa997df1a69ee",
        "locations": [
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 208-212",
            "startLine": 208,
            "endLine": 212,
            "lines": 5,
            "text": "\n    switch (command) {\n      case '/help':\n        this.displayHelp();\n        break;",
            "fullText": "\n    switch (command) {\n      case '/help':\n        this.displayHelp();\n        break;",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 209-213",
            "startLine": 209,
            "endLine": 213,
            "lines": 5,
            "text": "    switch (command) {\n      case '/help':\n        this.displayHelp();\n        break;\n",
            "fullText": "    switch (command) {\n      case '/help':\n        this.displayHelp();\n        break;\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_da44cc770c6af751b0fee92cf8581708",
        "locations": [
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 248-252",
            "startLine": 248,
            "endLine": 252,
            "lines": 5,
            "text": "\n  private handleAgentRequest(action: any) {\n    // Agent-specific handling\n    console.log(chalk.magenta(`\\n[Agent Request] ${action.type}`));\n    ",
            "fullText": "\n  private handleAgentRequest(action: any) {\n    // Agent-specific handling\n    console.log(chalk.magenta(`\\n[Agent Request] ${action.type}`));\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 249-253",
            "startLine": 249,
            "endLine": 253,
            "lines": 5,
            "text": "  private handleAgentRequest(action: any) {\n    // Agent-specific handling\n    console.log(chalk.magenta(`\\n[Agent Request] ${action.type}`));\n    \n    // Simulate processing",
            "fullText": "  private handleAgentRequest(action: any) {\n    // Agent-specific handling\n    console.log(chalk.magenta(`\\n[Agent Request] ${action.type}`));\n    \n    // Simulate processing",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a9b51e05e7f1ed376b079ac6d650897a",
        "locations": [
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 324-328",
            "startLine": 324,
            "endLine": 328,
            "lines": 5,
            "text": "  \n  if (args.length < 2) {\n    console.log(chalk.red('Usage: chat-client <username> <roomId> [--agent]'));\n    process.exit(1);\n  }",
            "fullText": "  \n  if (args.length < 2) {\n    console.log(chalk.red('Usage: chat-client <username> <roomId> [--agent]'));\n    process.exit(1);\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/client/chat-client.ts",
            "name": "lines 325-329",
            "startLine": 325,
            "endLine": 329,
            "lines": 5,
            "text": "  if (args.length < 2) {\n    console.log(chalk.red('Usage: chat-client <username> <roomId> [--agent]'));\n    process.exit(1);\n  }\n",
            "fullText": "  if (args.length < 2) {\n    console.log(chalk.red('Usage: chat-client <username> <roomId> [--agent]'));\n    process.exit(1);\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_4c75c7c6ae4caa98dfbb2a72ced223e7",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 16-20",
            "startLine": 16,
            "endLine": 20,
            "lines": 5,
            "text": "  /** Server configuration */\n  server?: ServerConfig;\n  \n  /** Coordinator agent configuration */\n  coordinator?: CoordinatorConfig;",
            "fullText": "  /** Server configuration */\n  server?: ServerConfig;\n  \n  /** Coordinator agent configuration */\n  coordinator?: CoordinatorConfig;",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 17-21",
            "startLine": 17,
            "endLine": 21,
            "lines": 5,
            "text": "  server?: ServerConfig;\n  \n  /** Coordinator agent configuration */\n  coordinator?: CoordinatorConfig;\n  ",
            "fullText": "  server?: ServerConfig;\n  \n  /** Coordinator agent configuration */\n  coordinator?: CoordinatorConfig;\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b20b328ed875968a27976eebcf8c8290",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 19-23",
            "startLine": 19,
            "endLine": 23,
            "lines": 5,
            "text": "  /** Coordinator agent configuration */\n  coordinator?: CoordinatorConfig;\n  \n  /** Client configuration */\n  client?: ClientConfig;",
            "fullText": "  /** Coordinator agent configuration */\n  coordinator?: CoordinatorConfig;\n  \n  /** Client configuration */\n  client?: ClientConfig;",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 20-24",
            "startLine": 20,
            "endLine": 24,
            "lines": 5,
            "text": "  coordinator?: CoordinatorConfig;\n  \n  /** Client configuration */\n  client?: ClientConfig;\n  ",
            "fullText": "  coordinator?: CoordinatorConfig;\n  \n  /** Client configuration */\n  client?: ClientConfig;\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f39a08c3f7df270986ad52c75e831b6e",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 28-32",
            "startLine": 28,
            "endLine": 32,
            "lines": 5,
            "text": "  /** Advanced settings */\n  advanced?: AdvancedConfig;\n}\n\nexport interface ServerConfig {",
            "fullText": "  /** Advanced settings */\n  advanced?: AdvancedConfig;\n}\n\nexport interface ServerConfig {",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 29-33",
            "startLine": 29,
            "endLine": 33,
            "lines": 5,
            "text": "  advanced?: AdvancedConfig;\n}\n\nexport interface ServerConfig {\n  /** WebSocket server port */",
            "fullText": "  advanced?: AdvancedConfig;\n}\n\nexport interface ServerConfig {\n  /** WebSocket server port */",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_e2bd568b838bd25e2b981775e7f4a1cb",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 48-52",
            "startLine": 48,
            "endLine": 52,
            "lines": 5,
            "text": "  /** Connection timeout in ms */\n  connectionTimeout?: number;\n}\n\nexport interface CoordinatorConfig {",
            "fullText": "  /** Connection timeout in ms */\n  connectionTimeout?: number;\n}\n\nexport interface CoordinatorConfig {",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 49-53",
            "startLine": 49,
            "endLine": 53,
            "lines": 5,
            "text": "  connectionTimeout?: number;\n}\n\nexport interface CoordinatorConfig {\n  /** Coordinator agent type */",
            "fullText": "  connectionTimeout?: number;\n}\n\nexport interface CoordinatorConfig {\n  /** Coordinator agent type */",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9e92b3744ba95ce38a74228f4f864bb6",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 51-55",
            "startLine": 51,
            "endLine": 55,
            "lines": 5,
            "text": "\nexport interface CoordinatorConfig {\n  /** Coordinator agent type */\n  type: CoordinatorType;\n  ",
            "fullText": "\nexport interface CoordinatorConfig {\n  /** Coordinator agent type */\n  type: CoordinatorType;\n  ",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 52-56",
            "startLine": 52,
            "endLine": 56,
            "lines": 5,
            "text": "export interface CoordinatorConfig {\n  /** Coordinator agent type */\n  type: CoordinatorType;\n  \n  /** Agent display name */",
            "fullText": "export interface CoordinatorConfig {\n  /** Coordinator agent type */\n  type: CoordinatorType;\n  \n  /** Agent display name */",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_180afed6ee13f14ee488e1a8db12b4ea",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 59-63",
            "startLine": 59,
            "endLine": 63,
            "lines": 5,
            "text": "  /** Enable coordinator */\n  enabled?: boolean;\n  \n  /** Agent-specific configuration */\n  config?: ClaudeConfig | OllamaConfig | CustomConfig;",
            "fullText": "  /** Enable coordinator */\n  enabled?: boolean;\n  \n  /** Agent-specific configuration */\n  config?: ClaudeConfig | OllamaConfig | CustomConfig;",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 60-64",
            "startLine": 60,
            "endLine": 64,
            "lines": 5,
            "text": "  enabled?: boolean;\n  \n  /** Agent-specific configuration */\n  config?: ClaudeConfig | OllamaConfig | CustomConfig;\n  ",
            "fullText": "  enabled?: boolean;\n  \n  /** Agent-specific configuration */\n  config?: ClaudeConfig | OllamaConfig | CustomConfig;\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_676fad1e52dbab568bea56e6436a1ed5",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 62-66",
            "startLine": 62,
            "endLine": 66,
            "lines": 5,
            "text": "  /** Agent-specific configuration */\n  config?: ClaudeConfig | OllamaConfig | CustomConfig;\n  \n  /** Response behavior */\n  behavior?: CoordinatorBehavior;",
            "fullText": "  /** Agent-specific configuration */\n  config?: ClaudeConfig | OllamaConfig | CustomConfig;\n  \n  /** Response behavior */\n  behavior?: CoordinatorBehavior;",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 63-67",
            "startLine": 63,
            "endLine": 67,
            "lines": 5,
            "text": "  config?: ClaudeConfig | OllamaConfig | CustomConfig;\n  \n  /** Response behavior */\n  behavior?: CoordinatorBehavior;\n  ",
            "fullText": "  config?: ClaudeConfig | OllamaConfig | CustomConfig;\n  \n  /** Response behavior */\n  behavior?: CoordinatorBehavior;\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_68ef00ddb841253372412f3a35c836c0",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 107-111",
            "startLine": 107,
            "endLine": 111,
            "lines": 5,
            "text": "    top_p?: number;\n    top_k?: number;\n    num_predict?: number;\n    stop?: string[];\n  };",
            "fullText": "    top_p?: number;\n    top_k?: number;\n    num_predict?: number;\n    stop?: string[];\n  };",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 71-75",
            "startLine": 71,
            "endLine": 75,
            "lines": 5,
            "text": "    top_p?: number;\n    top_k?: number;\n    num_predict?: number;\n    stop?: string[];\n  };",
            "fullText": "    top_p?: number;\n    top_k?: number;\n    num_predict?: number;\n    stop?: string[];\n  };",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_78c17c9d779b18aa6a89ed5b401cb57b",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 119-123",
            "startLine": 119,
            "endLine": 123,
            "lines": 5,
            "text": "\nexport interface CustomConfig {\n  /** Custom agent implementation path */\n  implementationPath: string;\n  ",
            "fullText": "\nexport interface CustomConfig {\n  /** Custom agent implementation path */\n  implementationPath: string;\n  ",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 120-124",
            "startLine": 120,
            "endLine": 124,
            "lines": 5,
            "text": "export interface CustomConfig {\n  /** Custom agent implementation path */\n  implementationPath: string;\n  \n  /** Custom configuration object */",
            "fullText": "export interface CustomConfig {\n  /** Custom agent implementation path */\n  implementationPath: string;\n  \n  /** Custom configuration object */",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_77630595da8e9d502c50cb97420d033f",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 124-128",
            "startLine": 124,
            "endLine": 128,
            "lines": 5,
            "text": "  /** Custom configuration object */\n  customConfig?: Record<string, any>;\n}\n\nexport interface CoordinatorBehavior {",
            "fullText": "  /** Custom configuration object */\n  customConfig?: Record<string, any>;\n}\n\nexport interface CoordinatorBehavior {",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 125-129",
            "startLine": 125,
            "endLine": 129,
            "lines": 5,
            "text": "  customConfig?: Record<string, any>;\n}\n\nexport interface CoordinatorBehavior {\n  /** Auto-respond to mentions */",
            "fullText": "  customConfig?: Record<string, any>;\n}\n\nexport interface CoordinatorBehavior {\n  /** Auto-respond to mentions */",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a6e798d2c44bafe5bca0c56e51ceb45b",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 127-131",
            "startLine": 127,
            "endLine": 131,
            "lines": 5,
            "text": "\nexport interface CoordinatorBehavior {\n  /** Auto-respond to mentions */\n  respondToMentions?: boolean;\n  ",
            "fullText": "\nexport interface CoordinatorBehavior {\n  /** Auto-respond to mentions */\n  respondToMentions?: boolean;\n  ",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 128-132",
            "startLine": 128,
            "endLine": 132,
            "lines": 5,
            "text": "export interface CoordinatorBehavior {\n  /** Auto-respond to mentions */\n  respondToMentions?: boolean;\n  \n  /** Auto-respond to questions */",
            "fullText": "export interface CoordinatorBehavior {\n  /** Auto-respond to mentions */\n  respondToMentions?: boolean;\n  \n  /** Auto-respond to questions */",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_72629a22d564f15df1ebd17bcf573989",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 129-133",
            "startLine": 129,
            "endLine": 133,
            "lines": 5,
            "text": "  /** Auto-respond to mentions */\n  respondToMentions?: boolean;\n  \n  /** Auto-respond to questions */\n  respondToQuestions?: boolean;",
            "fullText": "  /** Auto-respond to mentions */\n  respondToMentions?: boolean;\n  \n  /** Auto-respond to questions */\n  respondToQuestions?: boolean;",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 130-134",
            "startLine": 130,
            "endLine": 134,
            "lines": 5,
            "text": "  respondToMentions?: boolean;\n  \n  /** Auto-respond to questions */\n  respondToQuestions?: boolean;\n  ",
            "fullText": "  respondToMentions?: boolean;\n  \n  /** Auto-respond to questions */\n  respondToQuestions?: boolean;\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_56e874764807a3153ad7b8eaca237fce",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 141-145",
            "startLine": 141,
            "endLine": 145,
            "lines": 5,
            "text": "  /** Typing indicator */\n  showTypingIndicator?: boolean;\n  \n  /** Maximum conversation context */\n  maxContextMessages?: number;",
            "fullText": "  /** Typing indicator */\n  showTypingIndicator?: boolean;\n  \n  /** Maximum conversation context */\n  maxContextMessages?: number;",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 142-146",
            "startLine": 142,
            "endLine": 146,
            "lines": 5,
            "text": "  showTypingIndicator?: boolean;\n  \n  /** Maximum conversation context */\n  maxContextMessages?: number;\n  ",
            "fullText": "  showTypingIndicator?: boolean;\n  \n  /** Maximum conversation context */\n  maxContextMessages?: number;\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_7a1b84394f5e153c8b209509b0eeba32",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 187-191",
            "startLine": 187,
            "endLine": 191,
            "lines": 5,
            "text": "\nexport interface ClientConfig {\n  /** Default username prefix */\n  usernamePrefix?: string;\n  ",
            "fullText": "\nexport interface ClientConfig {\n  /** Default username prefix */\n  usernamePrefix?: string;\n  ",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 188-192",
            "startLine": 188,
            "endLine": 192,
            "lines": 5,
            "text": "export interface ClientConfig {\n  /** Default username prefix */\n  usernamePrefix?: string;\n  \n  /** Auto-reconnect on disconnect */",
            "fullText": "export interface ClientConfig {\n  /** Default username prefix */\n  usernamePrefix?: string;\n  \n  /** Auto-reconnect on disconnect */",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_69b462e5992ddd89af1208491b26b11d",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 195-199",
            "startLine": 195,
            "endLine": 199,
            "lines": 5,
            "text": "  /** Reconnect delay in ms */\n  reconnectDelay?: number;\n  \n  /** Maximum reconnect attempts */\n  maxReconnectAttempts?: number;",
            "fullText": "  /** Reconnect delay in ms */\n  reconnectDelay?: number;\n  \n  /** Maximum reconnect attempts */\n  maxReconnectAttempts?: number;",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 196-200",
            "startLine": 196,
            "endLine": 200,
            "lines": 5,
            "text": "  reconnectDelay?: number;\n  \n  /** Maximum reconnect attempts */\n  maxReconnectAttempts?: number;\n  ",
            "fullText": "  reconnectDelay?: number;\n  \n  /** Maximum reconnect attempts */\n  maxReconnectAttempts?: number;\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_2a03d6b2ed097651639012eed0b8c4b3",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 224-228",
            "startLine": 224,
            "endLine": 228,
            "lines": 5,
            "text": "  /** Allowed message types */\n  allowedMessageTypes?: string[];\n}\n\nexport interface AdvancedConfig {",
            "fullText": "  /** Allowed message types */\n  allowedMessageTypes?: string[];\n}\n\nexport interface AdvancedConfig {",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 225-229",
            "startLine": 225,
            "endLine": 229,
            "lines": 5,
            "text": "  allowedMessageTypes?: string[];\n}\n\nexport interface AdvancedConfig {\n  /** Enable message persistence */",
            "fullText": "  allowedMessageTypes?: string[];\n}\n\nexport interface AdvancedConfig {\n  /** Enable message persistence */",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_92fb68ac13bc1582457d252aa9f43106",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 320-324",
            "startLine": 320,
            "endLine": 324,
            "lines": 5,
            "text": "    },\n    client: {\n      autoReconnect: true,\n      reconnectDelay: 1000,\n      maxReconnectAttempts: 5",
            "fullText": "    },\n    client: {\n      autoReconnect: true,\n      reconnectDelay: 1000,\n      maxReconnectAttempts: 5",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 396-400",
            "startLine": 396,
            "endLine": 400,
            "lines": 5,
            "text": "  },\n  client: {\n    autoReconnect: true,\n    reconnectDelay: 1000,\n    maxReconnectAttempts: 5",
            "fullText": "  },\n  client: {\n    autoReconnect: true,\n    reconnectDelay: 1000,\n    maxReconnectAttempts: 5",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0b2cf7b9ce65ea36c3f0df0b0733392f",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 321-325",
            "startLine": 321,
            "endLine": 325,
            "lines": 5,
            "text": "    client: {\n      autoReconnect: true,\n      reconnectDelay: 1000,\n      maxReconnectAttempts: 5\n    },",
            "fullText": "    client: {\n      autoReconnect: true,\n      reconnectDelay: 1000,\n      maxReconnectAttempts: 5\n    },",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 397-401",
            "startLine": 397,
            "endLine": 401,
            "lines": 5,
            "text": "  client: {\n    autoReconnect: true,\n    reconnectDelay: 1000,\n    maxReconnectAttempts: 5\n  },",
            "fullText": "  client: {\n    autoReconnect: true,\n    reconnectDelay: 1000,\n    maxReconnectAttempts: 5\n  },",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_7a5dba2adf45242ebb411e49c6f3c7f7",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 322-326",
            "startLine": 322,
            "endLine": 326,
            "lines": 5,
            "text": "      autoReconnect: true,\n      reconnectDelay: 1000,\n      maxReconnectAttempts: 5\n    },\n    rules: {",
            "fullText": "      autoReconnect: true,\n      reconnectDelay: 1000,\n      maxReconnectAttempts: 5\n    },\n    rules: {",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 398-402",
            "startLine": 398,
            "endLine": 402,
            "lines": 5,
            "text": "    autoReconnect: true,\n    reconnectDelay: 1000,\n    maxReconnectAttempts: 5\n  },\n  rules: {",
            "fullText": "    autoReconnect: true,\n    reconnectDelay: 1000,\n    maxReconnectAttempts: 5\n  },\n  rules: {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_99aca149ec5ab50b9faf1f3776879b99",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 323-327",
            "startLine": 323,
            "endLine": 327,
            "lines": 5,
            "text": "      reconnectDelay: 1000,\n      maxReconnectAttempts: 5\n    },\n    rules: {\n      allowGuests: true,",
            "fullText": "      reconnectDelay: 1000,\n      maxReconnectAttempts: 5\n    },\n    rules: {\n      allowGuests: true,",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 399-403",
            "startLine": 399,
            "endLine": 403,
            "lines": 5,
            "text": "    reconnectDelay: 1000,\n    maxReconnectAttempts: 5\n  },\n  rules: {\n    allowGuests: true,",
            "fullText": "    reconnectDelay: 1000,\n    maxReconnectAttempts: 5\n  },\n  rules: {\n    allowGuests: true,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_e44e6d48ddbd6bb7e06fd50ad465b14f",
        "locations": [
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 348-352",
            "startLine": 348,
            "endLine": 352,
            "lines": 5,
            "text": "  \n  if (config.coordinator) {\n    if (!Object.values(CoordinatorType).includes(config.coordinator.type)) {\n      return false;\n    }",
            "fullText": "  \n  if (config.coordinator) {\n    if (!Object.values(CoordinatorType).includes(config.coordinator.type)) {\n      return false;\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/config/room-config.schema.ts",
            "name": "lines 349-353",
            "startLine": 349,
            "endLine": 353,
            "lines": 5,
            "text": "  if (config.coordinator) {\n    if (!Object.values(CoordinatorType).includes(config.coordinator.type)) {\n      return false;\n    }\n    ",
            "fullText": "  if (config.coordinator) {\n    if (!Object.values(CoordinatorType).includes(config.coordinator.type)) {\n      return false;\n    }\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_50ccc0ce6082e6919fcfb7ad1bbd51b6",
        "locations": [
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 99-103",
            "startLine": 99,
            "endLine": 103,
            "lines": 5,
            "text": "    // Apply intelligent defaults\n    this.applyIntelligentDefaults();\n\n    // Generate interception rules\n    this.generateInterceptRules();",
            "fullText": "    // Apply intelligent defaults\n    this.applyIntelligentDefaults();\n\n    // Generate interception rules\n    this.generateInterceptRules();",
            "isTextBlock": true
          },
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 100-104",
            "startLine": 100,
            "endLine": 104,
            "lines": 5,
            "text": "    this.applyIntelligentDefaults();\n\n    // Generate interception rules\n    this.generateInterceptRules();\n",
            "fullText": "    this.applyIntelligentDefaults();\n\n    // Generate interception rules\n    this.generateInterceptRules();\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ade64ea3f2af2a961a0342b497f9d240",
        "locations": [
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 128-132",
            "startLine": 128,
            "endLine": 132,
            "lines": 5,
            "text": "\n    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n    \n    // Detect framework\n    const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };",
            "fullText": "\n    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n    \n    // Detect framework\n    const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };",
            "isTextBlock": true
          },
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 129-133",
            "startLine": 129,
            "endLine": 133,
            "lines": 5,
            "text": "    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n    \n    // Detect framework\n    const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };\n   ...",
            "fullText": "    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n    \n    // Detect framework\n    const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b9285286fb6a5e535e8c067a51ef2ad3",
        "locations": [
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 203-207",
            "startLine": 203,
            "endLine": 207,
            "lines": 5,
            "text": "\n  /**\n   * Parse environment variables for connections\n   */\n  private parseEnvVariables(env: Record<string, string>, source: string): void {",
            "fullText": "\n  /**\n   * Parse environment variables for connections\n   */\n  private parseEnvVariables(env: Record<string, string>, source: string): void {",
            "isTextBlock": true
          },
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 204-208",
            "startLine": 204,
            "endLine": 208,
            "lines": 5,
            "text": "  /**\n   * Parse environment variables for connections\n   */\n  private parseEnvVariables(env: Record<string, string>, source: string): void {\n    // Database URLs",
            "fullText": "  /**\n   * Parse environment variables for connections\n   */\n  private parseEnvVariables(env: Record<string, string>, source: string): void {\n    // Database URLs",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_7eea239707d4a532f116923630c3b447",
        "locations": [
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 263-267",
            "startLine": 263,
            "endLine": 267,
            "lines": 5,
            "text": "          this.config.services.push({\n            name: key,\n            type: 'http',\n            url: value,\n            source",
            "fullText": "          this.config.services.push({\n            name: key,\n            type: 'http',\n            url: value,\n            source",
            "isTextBlock": true
          },
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 662-666",
            "startLine": 662,
            "endLine": 666,
            "lines": 5,
            "text": "            this.config.services.push({\n              name: key,\n              type: 'http',\n              url: value,\n              source",
            "fullText": "            this.config.services.push({\n              name: key,\n              type: 'http',\n              url: value,\n              source",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0f5c85c1cf05c4464d61f1fbcc3b2096",
        "locations": [
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 340-344",
            "startLine": 340,
            "endLine": 344,
            "lines": 5,
            "text": "\n      if (config) {\n        this.extractConfigData(config, path.basename(filePath));\n      }\n    } catch (error) {",
            "fullText": "\n      if (config) {\n        this.extractConfigData(config, path.basename(filePath));\n      }\n    } catch (error) {",
            "isTextBlock": true
          },
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 341-345",
            "startLine": 341,
            "endLine": 345,
            "lines": 5,
            "text": "      if (config) {\n        this.extractConfigData(config, path.basename(filePath));\n      }\n    } catch (error) {\n      // Ignore parse errors",
            "fullText": "      if (config) {\n        this.extractConfigData(config, path.basename(filePath));\n      }\n    } catch (error) {\n      // Ignore parse errors",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_46ef6f2ce259c2bc299a503524dc2220",
        "locations": [
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 348-352",
            "startLine": 348,
            "endLine": 352,
            "lines": 5,
            "text": "\n  /**\n   * Extract configuration data\n   */\n  private extractConfigData(config: any, source: string): void {",
            "fullText": "\n  /**\n   * Extract configuration data\n   */\n  private extractConfigData(config: any, source: string): void {",
            "isTextBlock": true
          },
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 349-353",
            "startLine": 349,
            "endLine": 353,
            "lines": 5,
            "text": "  /**\n   * Extract configuration data\n   */\n  private extractConfigData(config: any, source: string): void {\n    // Look for database configs",
            "fullText": "  /**\n   * Extract configuration data\n   */\n  private extractConfigData(config: any, source: string): void {\n    // Look for database configs",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6141f3ac08b8f512a4b96f0e3e4c0411",
        "locations": [
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 575-579",
            "startLine": 575,
            "endLine": 579,
            "lines": 5,
            "text": "\n  /**\n   * Detect from installed dependencies\n   */\n  private async detectFromDependencies(): Promise<void> {",
            "fullText": "\n  /**\n   * Detect from installed dependencies\n   */\n  private async detectFromDependencies(): Promise<void> {",
            "isTextBlock": true
          },
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 576-580",
            "startLine": 576,
            "endLine": 580,
            "lines": 5,
            "text": "  /**\n   * Detect from installed dependencies\n   */\n  private async detectFromDependencies(): Promise<void> {\n    // Check node_modules for hints",
            "fullText": "  /**\n   * Detect from installed dependencies\n   */\n  private async detectFromDependencies(): Promise<void> {\n    // Check node_modules for hints",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ec5a42fd271fc889a7f4c1c3c0a8a35c",
        "locations": [
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 713-717",
            "startLine": 713,
            "endLine": 717,
            "lines": 5,
            "text": "\n    // Add redaction patterns\n    this.config.security.redactPatterns = [\n      // Credit cards\n      '\\\\b(?:\\\\d[ -]*?){13,19}\\\\b',",
            "fullText": "\n    // Add redaction patterns\n    this.config.security.redactPatterns = [\n      // Credit cards\n      '\\\\b(?:\\\\d[ -]*?){13,19}\\\\b',",
            "isTextBlock": true
          },
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 714-718",
            "startLine": 714,
            "endLine": 718,
            "lines": 5,
            "text": "    // Add redaction patterns\n    this.config.security.redactPatterns = [\n      // Credit cards\n      '\\\\b(?:\\\\d[ -]*?){13,19}\\\\b',\n      // SSN",
            "fullText": "    // Add redaction patterns\n    this.config.security.redactPatterns = [\n      // Credit cards\n      '\\\\b(?:\\\\d[ -]*?){13,19}\\\\b',\n      // SSN",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_d6d0798396f21427b6dde5785df01751",
        "locations": [
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 720-724",
            "startLine": 720,
            "endLine": 724,
            "lines": 5,
            "text": "      // Email (partial redaction)\n      '([a-zA-Z0-9._%+-]+)@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}',\n      // JWT tokens\n      'eyJ[a-zA-Z0-9_-]*\\\\.[a-zA-Z0-9_-]*\\\\.[a-zA-Z0-9_-]*'\n    ];",
            "fullText": "      // Email (partial redaction)\n      '([a-zA-Z0-9._%+-]+)@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}',\n      // JWT tokens\n      'eyJ[a-zA-Z0-9_-]*\\\\.[a-zA-Z0-9_-]*\\\\.[a-zA-Z0-9_-]*'\n    ];",
            "isTextBlock": true
          },
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 721-725",
            "startLine": 721,
            "endLine": 725,
            "lines": 5,
            "text": "      '([a-zA-Z0-9._%+-]+)@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}',\n      // JWT tokens\n      'eyJ[a-zA-Z0-9_-]*\\\\.[a-zA-Z0-9_-]*\\\\.[a-zA-Z0-9_-]*'\n    ];\n",
            "fullText": "      '([a-zA-Z0-9._%+-]+)@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}',\n      // JWT tokens\n      'eyJ[a-zA-Z0-9_-]*\\\\.[a-zA-Z0-9_-]*\\\\.[a-zA-Z0-9_-]*'\n    ];\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_525d3c3905ca7620b913b88e3ee49870",
        "locations": [
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 726-730",
            "startLine": 726,
            "endLine": 730,
            "lines": 5,
            "text": "    // Detect compliance requirements\n    if (this.config.services.some(s => s.name.toLowerCase().includes('stripe'))) {\n      this.config.security.complianceMode = 'pci';\n    }\n  }",
            "fullText": "    // Detect compliance requirements\n    if (this.config.services.some(s => s.name.toLowerCase().includes('stripe'))) {\n      this.config.security.complianceMode = 'pci';\n    }\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/auto-config-detector.ts",
            "name": "lines 727-731",
            "startLine": 727,
            "endLine": 731,
            "lines": 5,
            "text": "    if (this.config.services.some(s => s.name.toLowerCase().includes('stripe'))) {\n      this.config.security.complianceMode = 'pci';\n    }\n  }\n",
            "fullText": "    if (this.config.services.some(s => s.name.toLowerCase().includes('stripe'))) {\n      this.config.security.complianceMode = 'pci';\n    }\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8c426af6b54702c22fbd06d0acad5696",
        "locations": [
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 94-98",
            "startLine": 94,
            "endLine": 98,
            "lines": 5,
            "text": "      // Begin transaction or savepoint\n      await this.beginTransaction(connection);\n      \n      // Capture before state\n      const before = await this.captureState(connection, options);",
            "fullText": "      // Begin transaction or savepoint\n      await this.beginTransaction(connection);\n      \n      // Capture before state\n      const before = await this.captureState(connection, options);",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 95-99",
            "startLine": 95,
            "endLine": 99,
            "lines": 5,
            "text": "      await this.beginTransaction(connection);\n      \n      // Capture before state\n      const before = await this.captureState(connection, options);\n      ",
            "fullText": "      await this.beginTransaction(connection);\n      \n      // Capture before state\n      const before = await this.captureState(connection, options);\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a3584e6658d9f2069bb57a89292c2e34",
        "locations": [
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 97-101",
            "startLine": 97,
            "endLine": 101,
            "lines": 5,
            "text": "      // Capture before state\n      const before = await this.captureState(connection, options);\n      \n      // Execute operation\n      const result = await operation();",
            "fullText": "      // Capture before state\n      const before = await this.captureState(connection, options);\n      \n      // Execute operation\n      const result = await operation();",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 98-102",
            "startLine": 98,
            "endLine": 102,
            "lines": 5,
            "text": "      const before = await this.captureState(connection, options);\n      \n      // Execute operation\n      const result = await operation();\n      ",
            "fullText": "      const before = await this.captureState(connection, options);\n      \n      // Execute operation\n      const result = await operation();\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_d8a30ccb18e4cb80f487e4feb2060369",
        "locations": [
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 100-104",
            "startLine": 100,
            "endLine": 104,
            "lines": 5,
            "text": "      // Execute operation\n      const result = await operation();\n      \n      // Capture after state\n      const after = await this.captureState(connection, options);",
            "fullText": "      // Execute operation\n      const result = await operation();\n      \n      // Capture after state\n      const after = await this.captureState(connection, options);",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 101-105",
            "startLine": 101,
            "endLine": 105,
            "lines": 5,
            "text": "      const result = await operation();\n      \n      // Capture after state\n      const after = await this.captureState(connection, options);\n      ",
            "fullText": "      const result = await operation();\n      \n      // Capture after state\n      const after = await this.captureState(connection, options);\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_658f7c772786ab3e52673b2135c5b32a",
        "locations": [
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 205-209",
            "startLine": 205,
            "endLine": 209,
            "lines": 5,
            "text": "    \n    // Auto-capture table if specified\n    if (options.tableName) {\n      states.table = await this.captureTable(connection, options.tableName);\n    }",
            "fullText": "    \n    // Auto-capture table if specified\n    if (options.tableName) {\n      states.table = await this.captureTable(connection, options.tableName);\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 206-210",
            "startLine": 206,
            "endLine": 210,
            "lines": 5,
            "text": "    // Auto-capture table if specified\n    if (options.tableName) {\n      states.table = await this.captureTable(connection, options.tableName);\n    }\n    ",
            "fullText": "    // Auto-capture table if specified\n    if (options.tableName) {\n      states.table = await this.captureTable(connection, options.tableName);\n    }\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b4e51234c9ec70851f658dd134f54d0c",
        "locations": [
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 210-214",
            "startLine": 210,
            "endLine": 214,
            "lines": 5,
            "text": "    \n    return states;\n  }\n\n  private async executeQuery(connection: any, query: string): Promise<any> {",
            "fullText": "    \n    return states;\n  }\n\n  private async executeQuery(connection: any, query: string): Promise<any> {",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 211-215",
            "startLine": 211,
            "endLine": 215,
            "lines": 5,
            "text": "    return states;\n  }\n\n  private async executeQuery(connection: any, query: string): Promise<any> {\n    // PostgreSQL",
            "fullText": "    return states;\n  }\n\n  private async executeQuery(connection: any, query: string): Promise<any> {\n    // PostgreSQL",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_316195cf534e62687e1caa465361427f",
        "locations": [
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 215-219",
            "startLine": 215,
            "endLine": 219,
            "lines": 5,
            "text": "    // PostgreSQL\n    if (connection.query && connection.constructor.name === 'Client') {\n      const result = await connection.query(query);\n      return result.rows;\n    }",
            "fullText": "    // PostgreSQL\n    if (connection.query && connection.constructor.name === 'Client') {\n      const result = await connection.query(query);\n      return result.rows;\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 216-220",
            "startLine": 216,
            "endLine": 220,
            "lines": 5,
            "text": "    if (connection.query && connection.constructor.name === 'Client') {\n      const result = await connection.query(query);\n      return result.rows;\n    }\n    // MySQL",
            "fullText": "    if (connection.query && connection.constructor.name === 'Client') {\n      const result = await connection.query(query);\n      return result.rows;\n    }\n    // MySQL",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c9f71d3481a6d7eb1fb00ca924cf4c56",
        "locations": [
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 218-222",
            "startLine": 218,
            "endLine": 222,
            "lines": 5,
            "text": "      return result.rows;\n    }\n    // MySQL\n    else if (connection.query && !connection.startSession) {\n      return new Promise((Working on, reject) => {",
            "fullText": "      return result.rows;\n    }\n    // MySQL\n    else if (connection.query && !connection.startSession) {\n      return new Promise((Working on, reject) => {",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 246-250",
            "startLine": 246,
            "endLine": 250,
            "lines": 5,
            "text": "      return result.rows;\n    }\n    // MySQL\n    else if (connection.query && !connection.startSession) {\n      return new Promise((Working on, reject) => {",
            "fullText": "      return result.rows;\n    }\n    // MySQL\n    else if (connection.query && !connection.startSession) {\n      return new Promise((Working on, reject) => {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_957e0279d0de1598d5511c2b0442dc93",
        "locations": [
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 238-242",
            "startLine": 238,
            "endLine": 242,
            "lines": 5,
            "text": "    \n    return null;\n  }\n\n  private async captureTable(connection: any, tableName: string): Promise<any> {",
            "fullText": "    \n    return null;\n  }\n\n  private async captureTable(connection: any, tableName: string): Promise<any> {",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 239-243",
            "startLine": 239,
            "endLine": 243,
            "lines": 5,
            "text": "    return null;\n  }\n\n  private async captureTable(connection: any, tableName: string): Promise<any> {\n    // PostgreSQL",
            "fullText": "    return null;\n  }\n\n  private async captureTable(connection: any, tableName: string): Promise<any> {\n    // PostgreSQL",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3ffc65e301d412593e6740b85132cccb",
        "locations": [
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 243-247",
            "startLine": 243,
            "endLine": 247,
            "lines": 5,
            "text": "    // PostgreSQL\n    if (connection.query && connection.constructor.name === 'Client') {\n      const result = await connection.query(`SELECT * FROM ${tableName} ORDER BY 1`);\n      return result.rows...",
            "fullText": "    // PostgreSQL\n    if (connection.query && connection.constructor.name === 'Client') {\n      const result = await connection.query(`SELECT * FROM ${tableName} ORDER BY 1`);\n      return result.rows;\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 244-248",
            "startLine": 244,
            "endLine": 248,
            "lines": 5,
            "text": "    if (connection.query && connection.constructor.name === 'Client') {\n      const result = await connection.query(`SELECT * FROM ${tableName} ORDER BY 1`);\n      return result.rows;\n    }\n    // MyS...",
            "fullText": "    if (connection.query && connection.constructor.name === 'Client') {\n      const result = await connection.query(`SELECT * FROM ${tableName} ORDER BY 1`);\n      return result.rows;\n    }\n    // MySQL",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_cb22c7bb6c42d1b95983a5256c3ea901",
        "locations": [
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 268-272",
            "startLine": 268,
            "endLine": 272,
            "lines": 5,
            "text": "    const changes: DiffChange[] = [];\n    const summary: DiffSummary = {\n      rowsAdded: 0,\n      rowsRemoved: 0,\n      rowsModified: 0,",
            "fullText": "    const changes: DiffChange[] = [];\n    const summary: DiffSummary = {\n      rowsAdded: 0,\n      rowsRemoved: 0,\n      rowsModified: 0,",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 301-305",
            "startLine": 301,
            "endLine": 305,
            "lines": 5,
            "text": "    const changes: DiffChange[] = [];\n    const summary: DiffSummary = {\n      rowsAdded: 0,\n      rowsRemoved: 0,\n      rowsModified: 0,",
            "fullText": "    const changes: DiffChange[] = [];\n    const summary: DiffSummary = {\n      rowsAdded: 0,\n      rowsRemoved: 0,\n      rowsModified: 0,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_1daa6e54d2ad8891dc47495ec9391bd9",
        "locations": [
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 279-283",
            "startLine": 279,
            "endLine": 283,
            "lines": 5,
            "text": "      // Table diff\n      const tableDiff = this.diffTables(data.before.table, data.after.table);\n      changes.push(...tableDiff.changes);\n      Object.assign(summary, tableDiff.summary);\n    } else ...",
            "fullText": "      // Table diff\n      const tableDiff = this.diffTables(data.before.table, data.after.table);\n      changes.push(...tableDiff.changes);\n      Object.assign(summary, tableDiff.summary);\n    } else {",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 280-284",
            "startLine": 280,
            "endLine": 284,
            "lines": 5,
            "text": "      const tableDiff = this.diffTables(data.before.table, data.after.table);\n      changes.push(...tableDiff.changes);\n      Object.assign(summary, tableDiff.summary);\n    } else {\n      // Generic J...",
            "fullText": "      const tableDiff = this.diffTables(data.before.table, data.after.table);\n      changes.push(...tableDiff.changes);\n      Object.assign(summary, tableDiff.summary);\n    } else {\n      // Generic JSON diff",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_cfde4353d38d7d775ac5fecd0acf66df",
        "locations": [
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 284-288",
            "startLine": 284,
            "endLine": 288,
            "lines": 5,
            "text": "      // Generic JSON diff\n      const jsonDiff = this.diffJson(data.before, data.after);\n      changes.push(...jsonDiff);\n      summary.totalChanges = changes.length;\n    }",
            "fullText": "      // Generic JSON diff\n      const jsonDiff = this.diffJson(data.before, data.after);\n      changes.push(...jsonDiff);\n      summary.totalChanges = changes.length;\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 285-289",
            "startLine": 285,
            "endLine": 289,
            "lines": 5,
            "text": "      const jsonDiff = this.diffJson(data.before, data.after);\n      changes.push(...jsonDiff);\n      summary.totalChanges = changes.length;\n    }\n",
            "fullText": "      const jsonDiff = this.diffJson(data.before, data.after);\n      changes.push(...jsonDiff);\n      summary.totalChanges = changes.length;\n    }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a7e3346fae6af6b254d9f322cdfb7798",
        "locations": [
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 309-313",
            "startLine": 309,
            "endLine": 313,
            "lines": 5,
            "text": "\n    // Create maps for efficient lookup\n    const beforeMap = new Map(before.map(row => [this.getRowKey(row), row]));\n    const afterMap = new Map(after.map(row => [this.getRowKey(row), row]));\n",
            "fullText": "\n    // Create maps for efficient lookup\n    const beforeMap = new Map(before.map(row => [this.getRowKey(row), row]));\n    const afterMap = new Map(after.map(row => [this.getRowKey(row), row]));\n",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 310-314",
            "startLine": 310,
            "endLine": 314,
            "lines": 5,
            "text": "    // Create maps for efficient lookup\n    const beforeMap = new Map(before.map(row => [this.getRowKey(row), row]));\n    const afterMap = new Map(after.map(row => [this.getRowKey(row), row]));\n\n    /...",
            "fullText": "    // Create maps for efficient lookup\n    const beforeMap = new Map(before.map(row => [this.getRowKey(row), row]));\n    const afterMap = new Map(after.map(row => [this.getRowKey(row), row]));\n\n    // Find removed rows",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c00ef30fb533c9ac155d5350320db7de",
        "locations": [
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 364-368",
            "startLine": 364,
            "endLine": 368,
            "lines": 5,
            "text": "    // Try common ID fields\n    if (row.id !== undefined) return `id:${row.id}`;\n    if (row._id !== undefined) return `_id:${row._id}`;\n    if (row.uuid !== undefined) return `uuid:${row.uuid}`;\n    ",
            "fullText": "    // Try common ID fields\n    if (row.id !== undefined) return `id:${row.id}`;\n    if (row._id !== undefined) return `_id:${row._id}`;\n    if (row.uuid !== undefined) return `uuid:${row.uuid}`;\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 365-369",
            "startLine": 365,
            "endLine": 369,
            "lines": 5,
            "text": "    if (row.id !== undefined) return `id:${row.id}`;\n    if (row._id !== undefined) return `_id:${row._id}`;\n    if (row.uuid !== undefined) return `uuid:${row.uuid}`;\n    \n    // Fallback to hash of ...",
            "fullText": "    if (row.id !== undefined) return `id:${row.id}`;\n    if (row._id !== undefined) return `_id:${row._id}`;\n    if (row.uuid !== undefined) return `uuid:${row.uuid}`;\n    \n    // Fallback to hash of entire row",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_867dd614302fd18067ac60fda8355165",
        "locations": [
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 507-511",
            "startLine": 507,
            "endLine": 511,
            "lines": 5,
            "text": "    // Check memory cache first\n    if (this.snapshots.has(name)) {\n      return this.snapshots.get(name);\n    }\n",
            "fullText": "    // Check memory cache first\n    if (this.snapshots.has(name)) {\n      return this.snapshots.get(name);\n    }\n",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 508-512",
            "startLine": 508,
            "endLine": 512,
            "lines": 5,
            "text": "    if (this.snapshots.has(name)) {\n      return this.snapshots.get(name);\n    }\n\n    // Load from disk",
            "fullText": "    if (this.snapshots.has(name)) {\n      return this.snapshots.get(name);\n    }\n\n    // Load from disk",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_4715a7c39a337f76e063a04dfaf46b10",
        "locations": [
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 556-560",
            "startLine": 556,
            "endLine": 560,
            "lines": 5,
            "text": "      \n      if (diff.summary.totalChanges === 0) {\n        output += chalk.green('No changes detected\\n');\n        return output;\n      }",
            "fullText": "      \n      if (diff.summary.totalChanges === 0) {\n        output += chalk.green('No changes detected\\n');\n        return output;\n      }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 557-561",
            "startLine": 557,
            "endLine": 561,
            "lines": 5,
            "text": "      if (diff.summary.totalChanges === 0) {\n        output += chalk.green('No changes detected\\n');\n        return output;\n      }\n",
            "fullText": "      if (diff.summary.totalChanges === 0) {\n        output += chalk.green('No changes detected\\n');\n        return output;\n      }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b2860740196b655958d97dce709e0e4f",
        "locations": [
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 561-565",
            "startLine": 561,
            "endLine": 565,
            "lines": 5,
            "text": "\n      output += chalk.yellow(`\\nSummary:\\n`);\n      output += `  Rows added: ${diff.summary.rowsAdded}\\n`;\n      output += `  Rows removed: ${diff.summary.rowsRemoved}\\n`;\n      output += `  Rows mod...",
            "fullText": "\n      output += chalk.yellow(`\\nSummary:\\n`);\n      output += `  Rows added: ${diff.summary.rowsAdded}\\n`;\n      output += `  Rows removed: ${diff.summary.rowsRemoved}\\n`;\n      output += `  Rows modified: ${diff.summary.rowsModified}\\n`;",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 562-566",
            "startLine": 562,
            "endLine": 566,
            "lines": 5,
            "text": "      output += chalk.yellow(`\\nSummary:\\n`);\n      output += `  Rows added: ${diff.summary.rowsAdded}\\n`;\n      output += `  Rows removed: ${diff.summary.rowsRemoved}\\n`;\n      output += `  Rows modi...",
            "fullText": "      output += chalk.yellow(`\\nSummary:\\n`);\n      output += `  Rows added: ${diff.summary.rowsAdded}\\n`;\n      output += `  Rows removed: ${diff.summary.rowsRemoved}\\n`;\n      output += `  Rows modified: ${diff.summary.rowsModified}\\n`;\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_d1e51932fcfdac4e7c61066a5c692468",
        "locations": [
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 616-620",
            "startLine": 616,
            "endLine": 620,
            "lines": 5,
            "text": "\n  private generateId(): string {\n    return `diff_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}",
            "fullText": "\n  private generateId(): string {\n    return `diff_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-diff.ts",
            "name": "lines 617-621",
            "startLine": 617,
            "endLine": 621,
            "lines": 5,
            "text": "  private generateId(): string {\n    return `diff_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n",
            "fullText": "  private generateId(): string {\n    return `diff_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_99a71f558b6acf271aa8b30662dc3fec",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 67-71",
            "startLine": 67,
            "endLine": 71,
            "lines": 5,
            "text": "\n    // Override require to intercept database modules\n    (Module.prototype as any).require = function(id: string) {\n      const module = originalRequire.apply(this, arguments);\n      ",
            "fullText": "\n    // Override require to intercept database modules\n    (Module.prototype as any).require = function(id: string) {\n      const module = originalRequire.apply(this, arguments);\n      ",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 68-72",
            "startLine": 68,
            "endLine": 72,
            "lines": 5,
            "text": "    // Override require to intercept database modules\n    (Module.prototype as any).require = function(id: string) {\n      const module = originalRequire.apply(this, arguments);\n      \n      // Interc...",
            "fullText": "    // Override require to intercept database modules\n    (Module.prototype as any).require = function(id: string) {\n      const module = originalRequire.apply(this, arguments);\n      \n      // Intercept known database modules",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_693897f3a8fbfe72c329fe6e463b3f34",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 138-142",
            "startLine": 138,
            "endLine": 142,
            "lines": 5,
            "text": "              self.emit('database', log);\n              self.logs.push(log);\n              self.activeConnections.set(connectionId, this);\n              return result;\n            } catch (error: any)...",
            "fullText": "              self.emit('database', log);\n              self.logs.push(log);\n              self.activeConnections.set(connectionId, this);\n              return result;\n            } catch (error: any) {",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 383-387",
            "startLine": 383,
            "endLine": 387,
            "lines": 5,
            "text": "            self.emit('database', log);\n            self.logs.push(log);\n            self.activeConnections.set(connectionId, this);\n            return result;\n          } catch (error: any) {",
            "fullText": "            self.emit('database', log);\n            self.logs.push(log);\n            self.activeConnections.set(connectionId, this);\n            return result;\n          } catch (error: any) {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_2ba4bdc9f4a6818aa68a09470d3b7b2d",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 139-143",
            "startLine": 139,
            "endLine": 143,
            "lines": 5,
            "text": "              self.logs.push(log);\n              self.activeConnections.set(connectionId, this);\n              return result;\n            } catch (error: any) {\n              log.error = error.message...",
            "fullText": "              self.logs.push(log);\n              self.activeConnections.set(connectionId, this);\n              return result;\n            } catch (error: any) {\n              log.error = error.message;",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 384-388",
            "startLine": 384,
            "endLine": 388,
            "lines": 5,
            "text": "            self.logs.push(log);\n            self.activeConnections.set(connectionId, this);\n            return result;\n          } catch (error: any) {\n            log.error = error.message;",
            "fullText": "            self.logs.push(log);\n            self.activeConnections.set(connectionId, this);\n            return result;\n          } catch (error: any) {\n            log.error = error.message;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0fedb9a57f2323d8bcc3d2e221c7f34c",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 140-144",
            "startLine": 140,
            "endLine": 144,
            "lines": 5,
            "text": "              self.activeConnections.set(connectionId, this);\n              return result;\n            } catch (error: any) {\n              log.error = error.message;\n              self.emit('database...",
            "fullText": "              self.activeConnections.set(connectionId, this);\n              return result;\n            } catch (error: any) {\n              log.error = error.message;\n              self.emit('database', log);",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 385-389",
            "startLine": 385,
            "endLine": 389,
            "lines": 5,
            "text": "            self.activeConnections.set(connectionId, this);\n            return result;\n          } catch (error: any) {\n            log.error = error.message;\n            self.emit('database', log);",
            "fullText": "            self.activeConnections.set(connectionId, this);\n            return result;\n          } catch (error: any) {\n            log.error = error.message;\n            self.emit('database', log);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_459dbcf1a9dde79d4585726f95ff36ca",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 141-145",
            "startLine": 141,
            "endLine": 145,
            "lines": 5,
            "text": "              return result;\n            } catch (error: any) {\n              log.error = error.message;\n              self.emit('database', log);\n              self.logs.push(log);",
            "fullText": "              return result;\n            } catch (error: any) {\n              log.error = error.message;\n              self.emit('database', log);\n              self.logs.push(log);",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 386-390",
            "startLine": 386,
            "endLine": 390,
            "lines": 5,
            "text": "            return result;\n          } catch (error: any) {\n            log.error = error.message;\n            self.emit('database', log);\n            self.logs.push(log);",
            "fullText": "            return result;\n          } catch (error: any) {\n            log.error = error.message;\n            self.emit('database', log);\n            self.logs.push(log);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ddeb44d10345ab17978f1ae4a94c5c22",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 142-146",
            "startLine": 142,
            "endLine": 146,
            "lines": 5,
            "text": "            } catch (error: any) {\n              log.error = error.message;\n              self.emit('database', log);\n              self.logs.push(log);\n              throw error;",
            "fullText": "            } catch (error: any) {\n              log.error = error.message;\n              self.emit('database', log);\n              self.logs.push(log);\n              throw error;",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 387-391",
            "startLine": 387,
            "endLine": 391,
            "lines": 5,
            "text": "          } catch (error: any) {\n            log.error = error.message;\n            self.emit('database', log);\n            self.logs.push(log);\n            throw error;",
            "fullText": "          } catch (error: any) {\n            log.error = error.message;\n            self.emit('database', log);\n            self.logs.push(log);\n            throw error;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9b5490e88a31a4d98171b2ba36078181",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 143-147",
            "startLine": 143,
            "endLine": 147,
            "lines": 5,
            "text": "              log.error = error.message;\n              self.emit('database', log);\n              self.logs.push(log);\n              throw error;\n            }",
            "fullText": "              log.error = error.message;\n              self.emit('database', log);\n              self.logs.push(log);\n              throw error;\n            }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 388-392",
            "startLine": 388,
            "endLine": 392,
            "lines": 5,
            "text": "            log.error = error.message;\n            self.emit('database', log);\n            self.logs.push(log);\n            throw error;\n          }",
            "fullText": "            log.error = error.message;\n            self.emit('database', log);\n            self.logs.push(log);\n            throw error;\n          }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_d6917a2d0d2388e665d05aa4fea9c1a6",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 174-178",
            "startLine": 174,
            "endLine": 178,
            "lines": 5,
            "text": "\n            // Check if this is a modifying query that should be diffed\n            const shouldDiff = self.enableDiff && self.isModifyingQuery(queryLog.query);\n\n            if (shouldDiff && !hasCal...",
            "fullText": "\n            // Check if this is a modifying query that should be diffed\n            const shouldDiff = self.enableDiff && self.isModifyingQuery(queryLog.query);\n\n            if (shouldDiff && !hasCallback) {",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 175-179",
            "startLine": 175,
            "endLine": 179,
            "lines": 5,
            "text": "            // Check if this is a modifying query that should be diffed\n            const shouldDiff = self.enableDiff && self.isModifyingQuery(queryLog.query);\n\n            if (shouldDiff && !hasCall...",
            "fullText": "            // Check if this is a modifying query that should be diffed\n            const shouldDiff = self.enableDiff && self.isModifyingQuery(queryLog.query);\n\n            if (shouldDiff && !hasCallback) {\n              // Wrap in transaction diff for promise style",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_996fff3f8fd633976a785596b680e356",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 229-233",
            "startLine": 229,
            "endLine": 233,
            "lines": 5,
            "text": "                },\n                (err: any) => {\n                  queryLog.duration = Date.now() - startTime;\n                  queryLog.error = err.message;\n                  self.emit('database',...",
            "fullText": "                },\n                (err: any) => {\n                  queryLog.duration = Date.now() - startTime;\n                  queryLog.error = err.message;\n                  self.emit('database', queryLog);",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 521-525",
            "startLine": 521,
            "endLine": 525,
            "lines": 5,
            "text": "        },\n        (err: any) => {\n          queryLog.duration = Date.now() - startTime;\n          queryLog.error = err.message;\n          self.emit('database', queryLog);",
            "fullText": "        },\n        (err: any) => {\n          queryLog.duration = Date.now() - startTime;\n          queryLog.error = err.message;\n          self.emit('database', queryLog);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3dbb570711c22f02fa2115ab790c2e7c",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 230-234",
            "startLine": 230,
            "endLine": 234,
            "lines": 5,
            "text": "                (err: any) => {\n                  queryLog.duration = Date.now() - startTime;\n                  queryLog.error = err.message;\n                  self.emit('database', queryLog);\n       ...",
            "fullText": "                (err: any) => {\n                  queryLog.duration = Date.now() - startTime;\n                  queryLog.error = err.message;\n                  self.emit('database', queryLog);\n                  self.logs.push(queryLog);",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 522-526",
            "startLine": 522,
            "endLine": 526,
            "lines": 5,
            "text": "        (err: any) => {\n          queryLog.duration = Date.now() - startTime;\n          queryLog.error = err.message;\n          self.emit('database', queryLog);\n          self.logs.push(queryLog);",
            "fullText": "        (err: any) => {\n          queryLog.duration = Date.now() - startTime;\n          queryLog.error = err.message;\n          self.emit('database', queryLog);\n          self.logs.push(queryLog);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3a843cf35a4816551646096b4cd9a93c",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 232-236",
            "startLine": 232,
            "endLine": 236,
            "lines": 5,
            "text": "                  queryLog.error = err.message;\n                  self.emit('database', queryLog);\n                  self.logs.push(queryLog);\n                  throw err;\n                }",
            "fullText": "                  queryLog.error = err.message;\n                  self.emit('database', queryLog);\n                  self.logs.push(queryLog);\n                  throw err;\n                }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 524-528",
            "startLine": 524,
            "endLine": 528,
            "lines": 5,
            "text": "          queryLog.error = err.message;\n          self.emit('database', queryLog);\n          self.logs.push(queryLog);\n          throw err;\n        }",
            "fullText": "          queryLog.error = err.message;\n          self.emit('database', queryLog);\n          self.logs.push(queryLog);\n          throw err;\n        }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_5a27f188f630ee50e3f6f048a12b6d60",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 233-237",
            "startLine": 233,
            "endLine": 237,
            "lines": 5,
            "text": "                  self.emit('database', queryLog);\n                  self.logs.push(queryLog);\n                  throw err;\n                }\n              );",
            "fullText": "                  self.emit('database', queryLog);\n                  self.logs.push(queryLog);\n                  throw err;\n                }\n              );",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 525-529",
            "startLine": 525,
            "endLine": 529,
            "lines": 5,
            "text": "          self.emit('database', queryLog);\n          self.logs.push(queryLog);\n          throw err;\n        }\n      );",
            "fullText": "          self.emit('database', queryLog);\n          self.logs.push(queryLog);\n          throw err;\n        }\n      );",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_d6adb3452b5d0a8a3d9b3bdbff197dbe",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 251-255",
            "startLine": 251,
            "endLine": 255,
            "lines": 5,
            "text": "            };\n            \n            self.emit('database', log);\n            self.logs.push(log);\n            self.activeConnections.delete(connectionId);",
            "fullText": "            };\n            \n            self.emit('database', log);\n            self.logs.push(log);\n            self.activeConnections.delete(connectionId);",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 343-347",
            "startLine": 343,
            "endLine": 347,
            "lines": 5,
            "text": "          };\n          \n          self.emit('database', log);\n          self.logs.push(log);\n          self.activeConnections.delete(connectionId);",
            "fullText": "          };\n          \n          self.emit('database', log);\n          self.logs.push(log);\n          self.activeConnections.delete(connectionId);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9f8eebe27433ab6a9038fa5fcc3bc041",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 252-256",
            "startLine": 252,
            "endLine": 256,
            "lines": 5,
            "text": "            \n            self.emit('database', log);\n            self.logs.push(log);\n            self.activeConnections.delete(connectionId);\n            ",
            "fullText": "            \n            self.emit('database', log);\n            self.logs.push(log);\n            self.activeConnections.delete(connectionId);\n            ",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 344-348",
            "startLine": 344,
            "endLine": 348,
            "lines": 5,
            "text": "          \n          self.emit('database', log);\n          self.logs.push(log);\n          self.activeConnections.delete(connectionId);\n          ",
            "fullText": "          \n          self.emit('database', log);\n          self.logs.push(log);\n          self.activeConnections.delete(connectionId);\n          ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_49ba800319c012c38f80ce52b08aaeda",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 253-257",
            "startLine": 253,
            "endLine": 257,
            "lines": 5,
            "text": "            self.emit('database', log);\n            self.logs.push(log);\n            self.activeConnections.delete(connectionId);\n            \n            return originalEnd(...endArgs);",
            "fullText": "            self.emit('database', log);\n            self.logs.push(log);\n            self.activeConnections.delete(connectionId);\n            \n            return originalEnd(...endArgs);",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 345-349",
            "startLine": 345,
            "endLine": 349,
            "lines": 5,
            "text": "          self.emit('database', log);\n          self.logs.push(log);\n          self.activeConnections.delete(connectionId);\n          \n          return originalEnd(...endArgs);",
            "fullText": "          self.emit('database', log);\n          self.logs.push(log);\n          self.activeConnections.delete(connectionId);\n          \n          return originalEnd(...endArgs);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f172eff96546df6834df880a6c5fa720",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 254-258",
            "startLine": 254,
            "endLine": 258,
            "lines": 5,
            "text": "            self.logs.push(log);\n            self.activeConnections.delete(connectionId);\n            \n            return originalEnd(...endArgs);\n          };",
            "fullText": "            self.logs.push(log);\n            self.activeConnections.delete(connectionId);\n            \n            return originalEnd(...endArgs);\n          };",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 346-350",
            "startLine": 346,
            "endLine": 350,
            "lines": 5,
            "text": "          self.logs.push(log);\n          self.activeConnections.delete(connectionId);\n          \n          return originalEnd(...endArgs);\n        };",
            "fullText": "          self.logs.push(log);\n          self.activeConnections.delete(connectionId);\n          \n          return originalEnd(...endArgs);\n        };",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_4a402625c0de7caa755644a6a5859444",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 266-270",
            "startLine": 266,
            "endLine": 270,
            "lines": 5,
            "text": "      \n      pgModule.Pool = class extends OriginalPool {\n        constructor(...args: any[]) {\n          super(...args);\n          ",
            "fullText": "      \n      pgModule.Pool = class extends OriginalPool {\n        constructor(...args: any[]) {\n          super(...args);\n          ",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 267-271",
            "startLine": 267,
            "endLine": 271,
            "lines": 5,
            "text": "      pgModule.Pool = class extends OriginalPool {\n        constructor(...args: any[]) {\n          super(...args);\n          \n          // Wrap query method",
            "fullText": "      pgModule.Pool = class extends OriginalPool {\n        constructor(...args: any[]) {\n          super(...args);\n          \n          // Wrap query method",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_2124aba021d7dd2231e636fb7f68cae5",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 293-297",
            "startLine": 293,
            "endLine": 297,
            "lines": 5,
            "text": "      \n      mysqlModule.createConnection = function(config: any) {\n        const connection = originalCreateConnection(config);\n        const connectionId = self.generateId();\n        ",
            "fullText": "      \n      mysqlModule.createConnection = function(config: any) {\n        const connection = originalCreateConnection(config);\n        const connectionId = self.generateId();\n        ",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 294-298",
            "startLine": 294,
            "endLine": 298,
            "lines": 5,
            "text": "      mysqlModule.createConnection = function(config: any) {\n        const connection = originalCreateConnection(config);\n        const connectionId = self.generateId();\n        \n        // Wrap conne...",
            "fullText": "      mysqlModule.createConnection = function(config: any) {\n        const connection = originalCreateConnection(config);\n        const connectionId = self.generateId();\n        \n        // Wrap connect",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f324400c1f9cf28f3c3f776ea7fb13a6",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 327-331",
            "startLine": 327,
            "endLine": 331,
            "lines": 5,
            "text": "        // Wrap query\n        const originalQuery = connection.query.bind(connection);\n        connection.query = function(...queryArgs: any[]) {\n          return self.wrapMySQLQuery(originalQuery, qu...",
            "fullText": "        // Wrap query\n        const originalQuery = connection.query.bind(connection);\n        connection.query = function(...queryArgs: any[]) {\n          return self.wrapMySQLQuery(originalQuery, queryArgs, config);\n        };",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 328-332",
            "startLine": 328,
            "endLine": 332,
            "lines": 5,
            "text": "        const originalQuery = connection.query.bind(connection);\n        connection.query = function(...queryArgs: any[]) {\n          return self.wrapMySQLQuery(originalQuery, queryArgs, config);\n    ...",
            "fullText": "        const originalQuery = connection.query.bind(connection);\n        connection.query = function(...queryArgs: any[]) {\n          return self.wrapMySQLQuery(originalQuery, queryArgs, config);\n        };\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_d753535416c4bb78b8c847d5fed13d8b",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 363-367",
            "startLine": 363,
            "endLine": 367,
            "lines": 5,
            "text": "\n    const self = this;\n\n    if (moduleName === 'mongodb' && mongoModule.MongoClient) {\n      const OriginalMongoClient = mongoModule.MongoClient;",
            "fullText": "\n    const self = this;\n\n    if (moduleName === 'mongodb' && mongoModule.MongoClient) {\n      const OriginalMongoClient = mongoModule.MongoClient;",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 364-368",
            "startLine": 364,
            "endLine": 368,
            "lines": 5,
            "text": "    const self = this;\n\n    if (moduleName === 'mongodb' && mongoModule.MongoClient) {\n      const OriginalMongoClient = mongoModule.MongoClient;\n      ",
            "fullText": "    const self = this;\n\n    if (moduleName === 'mongodb' && mongoModule.MongoClient) {\n      const OriginalMongoClient = mongoModule.MongoClient;\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ea9728b33b3f9fcda117928f7f8c963d",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 410-414",
            "startLine": 410,
            "endLine": 414,
            "lines": 5,
            "text": "      \n      redisModule.createClient = function(...args: any[]) {\n        const client = originalCreateClient(...args);\n        const connectionId = self.generateId();\n        ",
            "fullText": "      \n      redisModule.createClient = function(...args: any[]) {\n        const client = originalCreateClient(...args);\n        const connectionId = self.generateId();\n        ",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 411-415",
            "startLine": 411,
            "endLine": 415,
            "lines": 5,
            "text": "      redisModule.createClient = function(...args: any[]) {\n        const client = originalCreateClient(...args);\n        const connectionId = self.generateId();\n        \n        // Log connection",
            "fullText": "      redisModule.createClient = function(...args: any[]) {\n        const client = originalCreateClient(...args);\n        const connectionId = self.generateId();\n        \n        // Log connection",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8c2a6929161860d1f927eeaa8b5c671b",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 452-456",
            "startLine": 452,
            "endLine": 456,
            "lines": 5,
            "text": "\n    const self = this;\n\n    if (moduleName === 'sqlite3' && sqliteModule.Database) {\n      const OriginalDatabase = sqliteModule.Database;",
            "fullText": "\n    const self = this;\n\n    if (moduleName === 'sqlite3' && sqliteModule.Database) {\n      const OriginalDatabase = sqliteModule.Database;",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 453-457",
            "startLine": 453,
            "endLine": 457,
            "lines": 5,
            "text": "    const self = this;\n\n    if (moduleName === 'sqlite3' && sqliteModule.Database) {\n      const OriginalDatabase = sqliteModule.Database;\n      ",
            "fullText": "    const self = this;\n\n    if (moduleName === 'sqlite3' && sqliteModule.Database) {\n      const OriginalDatabase = sqliteModule.Database;\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9edb4c5f203c7f7b4612d6f86fe2288d",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 470-474",
            "startLine": 470,
            "endLine": 474,
            "lines": 5,
            "text": "          \n          self.emit('database', log);\n          self.logs.push(log);\n          self.activeConnections.set(connectionId, this);\n",
            "fullText": "          \n          self.emit('database', log);\n          self.logs.push(log);\n          self.activeConnections.set(connectionId, this);\n",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 471-475",
            "startLine": 471,
            "endLine": 475,
            "lines": 5,
            "text": "          self.emit('database', log);\n          self.logs.push(log);\n          self.activeConnections.set(connectionId, this);\n\n          // Wrap run, get, all methods",
            "fullText": "          self.emit('database', log);\n          self.logs.push(log);\n          self.activeConnections.set(connectionId, this);\n\n          // Wrap run, get, all methods",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_2090ae424af19c855e9c7b97dabb5be3",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 491-495",
            "startLine": 491,
            "endLine": 495,
            "lines": 5,
            "text": "    const self = this;\n    const startTime = Date.now();\n    const queryLog: DatabaseLog = {\n      id: self.generateId(),\n      timestamp: new Date(),",
            "fullText": "    const self = this;\n    const startTime = Date.now();\n    const queryLog: DatabaseLog = {\n      id: self.generateId(),\n      timestamp: new Date(),",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 536-540",
            "startLine": 536,
            "endLine": 540,
            "lines": 5,
            "text": "    const self = this;\n    const startTime = Date.now();\n    const queryLog: DatabaseLog = {\n      id: self.generateId(),\n      timestamp: new Date(),",
            "fullText": "    const self = this;\n    const startTime = Date.now();\n    const queryLog: DatabaseLog = {\n      id: self.generateId(),\n      timestamp: new Date(),",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0c9a006aea07e55aa000f14ae36afaed",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 575-579",
            "startLine": 575,
            "endLine": 579,
            "lines": 5,
            "text": "    const self = this;\n    const startTime = Date.now();\n    const log: DatabaseLog = {\n      id: self.generateId(),\n      timestamp: new Date(),",
            "fullText": "    const self = this;\n    const startTime = Date.now();\n    const log: DatabaseLog = {\n      id: self.generateId(),\n      timestamp: new Date(),",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 611-615",
            "startLine": 611,
            "endLine": 615,
            "lines": 5,
            "text": "    const self = this;\n    const startTime = Date.now();\n    const log: DatabaseLog = {\n      id: self.generateId(),\n      timestamp: new Date(),",
            "fullText": "    const self = this;\n    const startTime = Date.now();\n    const log: DatabaseLog = {\n      id: self.generateId(),\n      timestamp: new Date(),",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6fa368322fcd12859eb5d859c596a779",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 654-658",
            "startLine": 654,
            "endLine": 658,
            "lines": 5,
            "text": "    return Array.from(this.activeConnections.values());\n  }\n\n  clearLogs(): void {\n    this.logs = [];",
            "fullText": "    return Array.from(this.activeConnections.values());\n  }\n\n  clearLogs(): void {\n    this.logs = [];",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 480-484",
            "startLine": 480,
            "endLine": 484,
            "lines": 5,
            "text": "    return Array.from(this.activeConnections.values());\n  }\n\n  clearLogs(): void {\n    this.logs = [];",
            "fullText": "    return Array.from(this.activeConnections.values());\n  }\n\n  clearLogs(): void {\n    this.logs = [];",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_af33b091d4813059c55e233b2d05cf32",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 661-665",
            "startLine": 661,
            "endLine": 665,
            "lines": 5,
            "text": "  getStats(): any {\n    const stats = {\n      total: this.logs.length,\n      active: this.activeConnections.size,\n      byType: {} as any,",
            "fullText": "  getStats(): any {\n    const stats = {\n      total: this.logs.length,\n      active: this.activeConnections.size,\n      byType: {} as any,",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 490-494",
            "startLine": 490,
            "endLine": 494,
            "lines": 5,
            "text": "  getStats(): any {\n    const stats = {\n      total: this.logs.length,\n      active: this.activeConnections.size,\n      byType: {} as any,",
            "fullText": "  getStats(): any {\n    const stats = {\n      total: this.logs.length,\n      active: this.activeConnections.size,\n      byType: {} as any,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_90e8732b30e4cdcf73a1ef9467424e56",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 765-769",
            "startLine": 765,
            "endLine": 769,
            "lines": 5,
            "text": "\n  /**\n   * Get connection database name\n   */\n  private getConnectionDatabase(connection: any): string {",
            "fullText": "\n  /**\n   * Get connection database name\n   */\n  private getConnectionDatabase(connection: any): string {",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 766-770",
            "startLine": 766,
            "endLine": 770,
            "lines": 5,
            "text": "  /**\n   * Get connection database name\n   */\n  private getConnectionDatabase(connection: any): string {\n    // PostgreSQL",
            "fullText": "  /**\n   * Get connection database name\n   */\n  private getConnectionDatabase(connection: any): string {\n    // PostgreSQL",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3188580c50c5099696739b54c46ebed3",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 774-778",
            "startLine": 774,
            "endLine": 778,
            "lines": 5,
            "text": "    // MongoDB\n    if (connection.databaseName) return connection.databaseName;\n    // Default\n    return 'unknown';\n  }",
            "fullText": "    // MongoDB\n    if (connection.databaseName) return connection.databaseName;\n    // Default\n    return 'unknown';\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 775-779",
            "startLine": 775,
            "endLine": 779,
            "lines": 5,
            "text": "    if (connection.databaseName) return connection.databaseName;\n    // Default\n    return 'unknown';\n  }\n",
            "fullText": "    if (connection.databaseName) return connection.databaseName;\n    // Default\n    return 'unknown';\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_45f58e03967bc38e9afcd852ec766ef4",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 798-802",
            "startLine": 798,
            "endLine": 802,
            "lines": 5,
            "text": "    // Note: Disabling module interception is complex as modules are cached\n    // This would require clearing require cache and reloading modules\n    this.interceptEnabled = false;\n    this.emit('dis...",
            "fullText": "    // Note: Disabling module interception is complex as modules are cached\n    // This would require clearing require cache and reloading modules\n    this.interceptEnabled = false;\n    this.emit('disabled');\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 134-138",
            "startLine": 134,
            "endLine": 138,
            "lines": 5,
            "text": "\n    this.interceptEnabled = false;\n    this.emit('disabled');\n  }\n",
            "fullText": "\n    this.interceptEnabled = false;\n    this.emit('disabled');\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_063c47db1ea60382530e196edb3f8bc2",
        "locations": [
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 799-803",
            "startLine": 799,
            "endLine": 803,
            "lines": 5,
            "text": "    // This would require clearing require cache and reloading modules\n    this.interceptEnabled = false;\n    this.emit('disabled');\n  }\n}",
            "fullText": "    // This would require clearing require cache and reloading modules\n    this.interceptEnabled = false;\n    this.emit('disabled');\n  }\n}",
            "isTextBlock": true
          },
          {
            "file": "src/logging/database-interceptor.ts",
            "name": "lines 800-804",
            "startLine": 800,
            "endLine": 804,
            "lines": 5,
            "text": "    this.interceptEnabled = false;\n    this.emit('disabled');\n  }\n}\n",
            "fullText": "    this.interceptEnabled = false;\n    this.emit('disabled');\n  }\n}\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_345fa0aa007fe11cbaa41942544bbcdd",
        "locations": [
          {
            "file": "src/logging/external-call-tracker.ts",
            "name": "lines 67-71",
            "startLine": 67,
            "endLine": 71,
            "lines": 5,
            "text": "\n  /**\n   * Extract story ID from test name following naming convention\n   */\n  private extractStoryId(testName: string): string | null {",
            "fullText": "\n  /**\n   * Extract story ID from test name following naming convention\n   */\n  private extractStoryId(testName: string): string | null {",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-call-tracker.ts",
            "name": "lines 68-72",
            "startLine": 68,
            "endLine": 72,
            "lines": 5,
            "text": "  /**\n   * Extract story ID from test name following naming convention\n   */\n  private extractStoryId(testName: string): string | null {\n    // Pattern: test_US001_SD001_scenario",
            "fullText": "  /**\n   * Extract story ID from test name following naming convention\n   */\n  private extractStoryId(testName: string): string | null {\n    // Pattern: test_US001_SD001_scenario",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_27db67f3aaa1d5c89267d109fc8db61a",
        "locations": [
          {
            "file": "src/logging/external-call-tracker.ts",
            "name": "lines 82-86",
            "startLine": 82,
            "endLine": 86,
            "lines": 5,
            "text": "    \n    return function(this: any, ...args: any[]): T {\n      if (!tracker.enabled) {\n        return fn.apply(this, args);\n      }",
            "fullText": "    \n    return function(this: any, ...args: any[]): T {\n      if (!tracker.enabled) {\n        return fn.apply(this, args);\n      }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-call-tracker.ts",
            "name": "lines 83-87",
            "startLine": 83,
            "endLine": 87,
            "lines": 5,
            "text": "    return function(this: any, ...args: any[]): T {\n      if (!tracker.enabled) {\n        return fn.apply(this, args);\n      }\n",
            "fullText": "    return function(this: any, ...args: any[]): T {\n      if (!tracker.enabled) {\n        return fn.apply(this, args);\n      }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_899d5e2ca1cfcbe7355fe53c04566e8b",
        "locations": [
          {
            "file": "src/logging/external-call-tracker.ts",
            "name": "lines 112-116",
            "startLine": 112,
            "endLine": 116,
            "lines": 5,
            "text": "              call.duration = Date.now() - start;\n              call.error = error;\n              tracker.recordCall(call);\n              throw error;\n            }",
            "fullText": "              call.duration = Date.now() - start;\n              call.error = error;\n              tracker.recordCall(call);\n              throw error;\n            }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-call-tracker.ts",
            "name": "lines 126-130",
            "startLine": 126,
            "endLine": 130,
            "lines": 5,
            "text": "        call.duration = Date.now() - start;\n        call.error = error;\n        tracker.recordCall(call);\n        throw error;\n      }",
            "fullText": "        call.duration = Date.now() - start;\n        call.error = error;\n        tracker.recordCall(call);\n        throw error;\n      }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_62ecd4a589137395d7b248303123bee0",
        "locations": [
          {
            "file": "src/logging/external-call-tracker.ts",
            "name": "lines 141-145",
            "startLine": 141,
            "endLine": 145,
            "lines": 5,
            "text": "    // Keep buffer manageable\n    if (this.calls.length > 10000) {\n      this.calls = this.calls.slice(-5000);\n    }\n  }",
            "fullText": "    // Keep buffer manageable\n    if (this.calls.length > 10000) {\n      this.calls = this.calls.slice(-5000);\n    }\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-call-tracker.ts",
            "name": "lines 142-146",
            "startLine": 142,
            "endLine": 146,
            "lines": 5,
            "text": "    if (this.calls.length > 10000) {\n      this.calls = this.calls.slice(-5000);\n    }\n  }\n",
            "fullText": "    if (this.calls.length > 10000) {\n      this.calls = this.calls.slice(-5000);\n    }\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_826fb9238846a3924a284ae38181d7e8",
        "locations": [
          {
            "file": "src/logging/external-call-tracker.ts",
            "name": "lines 196-200",
            "startLine": 196,
            "endLine": 200,
            "lines": 5,
            "text": "\n      if (call.testName) {\n        stat.testCoverage.add(call.testName);\n      }\n    });",
            "fullText": "\n      if (call.testName) {\n        stat.testCoverage.add(call.testName);\n      }\n    });",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-call-tracker.ts",
            "name": "lines 197-201",
            "startLine": 197,
            "endLine": 201,
            "lines": 5,
            "text": "      if (call.testName) {\n        stat.testCoverage.add(call.testName);\n      }\n    });\n",
            "fullText": "      if (call.testName) {\n        stat.testCoverage.add(call.testName);\n      }\n    });\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_4ab4e9ea4ff262c7d1573688dd77d520",
        "locations": [
          {
            "file": "src/logging/external-call-tracker.ts",
            "name": "lines 238-242",
            "startLine": 238,
            "endLine": 242,
            "lines": 5,
            "text": "    \n    descriptor.value = externalCallTracker.track(name, originalMethod);\n    return descriptor;\n  };\n}",
            "fullText": "    \n    descriptor.value = externalCallTracker.track(name, originalMethod);\n    return descriptor;\n  };\n}",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-call-tracker.ts",
            "name": "lines 239-243",
            "startLine": 239,
            "endLine": 243,
            "lines": 5,
            "text": "    descriptor.value = externalCallTracker.track(name, originalMethod);\n    return descriptor;\n  };\n}\n",
            "fullText": "    descriptor.value = externalCallTracker.track(name, originalMethod);\n    return descriptor;\n  };\n}\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_cef3875586c33b6641300d8f295794aa",
        "locations": [
          {
            "file": "src/logging/external-call-tracker.ts",
            "name": "lines 253-257",
            "startLine": 253,
            "endLine": 257,
            "lines": 5,
            "text": "  // Database\n  ext_database_query: trackExternal('ext_database_query', () => {}),\n  ext_database_insert: trackExternal('ext_database_insert', () => {}),\n  ext_database_update: trackExternal('ext_data...",
            "fullText": "  // Database\n  ext_database_query: trackExternal('ext_database_query', () => {}),\n  ext_database_insert: trackExternal('ext_database_insert', () => {}),\n  ext_database_update: trackExternal('ext_database_update', () => {}),\n  ext_database_delete: trackExternal('ext_database_delete', () => {}),",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-call-tracker.ts",
            "name": "lines 254-258",
            "startLine": 254,
            "endLine": 258,
            "lines": 5,
            "text": "  ext_database_query: trackExternal('ext_database_query', () => {}),\n  ext_database_insert: trackExternal('ext_database_insert', () => {}),\n  ext_database_update: trackExternal('ext_database_update', ...",
            "fullText": "  ext_database_query: trackExternal('ext_database_query', () => {}),\n  ext_database_insert: trackExternal('ext_database_insert', () => {}),\n  ext_database_update: trackExternal('ext_database_update', () => {}),\n  ext_database_delete: trackExternal('ext_database_delete', () => {}),\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_47b7bbd31d025c0ed56f3e571954806c",
        "locations": [
          {
            "file": "src/logging/external-call-tracker.ts",
            "name": "lines 265-269",
            "startLine": 265,
            "endLine": 269,
            "lines": 5,
            "text": "  \n  // WebSocket\n  ext_websocket_send: trackExternal('ext_websocket_send', () => {}),\n  ext_websocket_receive: trackExternal('ext_websocket_receive', () => {}),\n  ",
            "fullText": "  \n  // WebSocket\n  ext_websocket_send: trackExternal('ext_websocket_send', () => {}),\n  ext_websocket_receive: trackExternal('ext_websocket_receive', () => {}),\n  ",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-call-tracker.ts",
            "name": "lines 266-270",
            "startLine": 266,
            "endLine": 270,
            "lines": 5,
            "text": "  // WebSocket\n  ext_websocket_send: trackExternal('ext_websocket_send', () => {}),\n  ext_websocket_receive: trackExternal('ext_websocket_receive', () => {}),\n  \n  // File System",
            "fullText": "  // WebSocket\n  ext_websocket_send: trackExternal('ext_websocket_send', () => {}),\n  ext_websocket_receive: trackExternal('ext_websocket_receive', () => {}),\n  \n  // File System",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_825cd3590f175c8f292a9dacaf07bea9",
        "locations": [
          {
            "file": "src/logging/external-call-tracker.ts",
            "name": "lines 269-273",
            "startLine": 269,
            "endLine": 273,
            "lines": 5,
            "text": "  \n  // File System\n  ext_fs_read: trackExternal('ext_fs_read', () => {}),\n  ext_fs_write: trackExternal('ext_fs_write', () => {}),\n  ",
            "fullText": "  \n  // File System\n  ext_fs_read: trackExternal('ext_fs_read', () => {}),\n  ext_fs_write: trackExternal('ext_fs_write', () => {}),\n  ",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-call-tracker.ts",
            "name": "lines 270-274",
            "startLine": 270,
            "endLine": 274,
            "lines": 5,
            "text": "  // File System\n  ext_fs_read: trackExternal('ext_fs_read', () => {}),\n  ext_fs_write: trackExternal('ext_fs_write', () => {}),\n  \n  // Cache",
            "fullText": "  // File System\n  ext_fs_read: trackExternal('ext_fs_read', () => {}),\n  ext_fs_write: trackExternal('ext_fs_write', () => {}),\n  \n  // Cache",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_46392720c28881c561a23f45f604b1ab",
        "locations": [
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 4-8",
            "startLine": 4,
            "endLine": 8,
            "lines": 5,
            "text": " */\n\nimport { networkInterceptor } from './network-interceptor';\nimport { databaseInterceptor } from './database-interceptor';\nimport { systemMetricsLogger } from './system-metrics-logger';",
            "fullText": " */\n\nimport { networkInterceptor } from './network-interceptor';\nimport { databaseInterceptor } from './database-interceptor';\nimport { systemMetricsLogger } from './system-metrics-logger';",
            "isTextBlock": true
          },
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 7-11",
            "startLine": 7,
            "endLine": 11,
            "lines": 5,
            "text": " */\n\nimport { networkInterceptor } from './network-interceptor';\nimport { databaseInterceptor } from './database-interceptor';\nimport { systemMetricsLogger } from './system-metrics-logger';",
            "fullText": " */\n\nimport { networkInterceptor } from './network-interceptor';\nimport { databaseInterceptor } from './database-interceptor';\nimport { systemMetricsLogger } from './system-metrics-logger';",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3070dea21bb67dcbc786caab6174dbc1",
        "locations": [
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 37-41",
            "startLine": 37,
            "endLine": 41,
            "lines": 5,
            "text": "\nexport class ExternalLogLib extends EventEmitter {\n  private config: ExternalLogConfig;\n  private logs: ExternalAccessLog[] = [];\n  private enabled = false;",
            "fullText": "\nexport class ExternalLogLib extends EventEmitter {\n  private config: ExternalLogConfig;\n  private logs: ExternalAccessLog[] = [];\n  private enabled = false;",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 38-42",
            "startLine": 38,
            "endLine": 42,
            "lines": 5,
            "text": "export class ExternalLogLib extends EventEmitter {\n  private config: ExternalLogConfig;\n  private logs: ExternalAccessLog[] = [];\n  private enabled = false;\n",
            "fullText": "export class ExternalLogLib extends EventEmitter {\n  private config: ExternalLogConfig;\n  private logs: ExternalAccessLog[] = [];\n  private enabled = false;\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_09a165def016a7165072557951eedff3",
        "locations": [
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 73-77",
            "startLine": 73,
            "endLine": 77,
            "lines": 5,
            "text": "          duration: log.duration || 0,\n          In Progress: !log.error,\n          error: log.error,\n          details: log,\n          testContext: this.getCurrentTestContext()",
            "fullText": "          duration: log.duration || 0,\n          In Progress: !log.error,\n          error: log.error,\n          details: log,\n          testContext: this.getCurrentTestContext()",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 89-93",
            "startLine": 89,
            "endLine": 93,
            "lines": 5,
            "text": "          duration: log.duration || 0,\n          In Progress: !log.error,\n          error: log.error,\n          details: log,\n          testContext: this.getCurrentTestContext()",
            "fullText": "          duration: log.duration || 0,\n          In Progress: !log.error,\n          error: log.error,\n          details: log,\n          testContext: this.getCurrentTestContext()",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9f38ad981ee6f506fcbfcf26e25ef33b",
        "locations": [
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 74-78",
            "startLine": 74,
            "endLine": 78,
            "lines": 5,
            "text": "          In Progress: !log.error,\n          error: log.error,\n          details: log,\n          testContext: this.getCurrentTestContext()\n        });",
            "fullText": "          In Progress: !log.error,\n          error: log.error,\n          details: log,\n          testContext: this.getCurrentTestContext()\n        });",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 90-94",
            "startLine": 90,
            "endLine": 94,
            "lines": 5,
            "text": "          In Progress: !log.error,\n          error: log.error,\n          details: log,\n          testContext: this.getCurrentTestContext()\n        });",
            "fullText": "          In Progress: !log.error,\n          error: log.error,\n          details: log,\n          testContext: this.getCurrentTestContext()\n        });",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c0c38f57093d2d614672db183f9d5a36",
        "locations": [
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 75-79",
            "startLine": 75,
            "endLine": 79,
            "lines": 5,
            "text": "          error: log.error,\n          details: log,\n          testContext: this.getCurrentTestContext()\n        });\n      });",
            "fullText": "          error: log.error,\n          details: log,\n          testContext: this.getCurrentTestContext()\n        });\n      });",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 91-95",
            "startLine": 91,
            "endLine": 95,
            "lines": 5,
            "text": "          error: log.error,\n          details: log,\n          testContext: this.getCurrentTestContext()\n        });\n      });",
            "fullText": "          error: log.error,\n          details: log,\n          testContext: this.getCurrentTestContext()\n        });\n      });",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b1e64edb31267e7bda9d13341edbf7f1",
        "locations": [
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 76-80",
            "startLine": 76,
            "endLine": 80,
            "lines": 5,
            "text": "          details: log,\n          testContext: this.getCurrentTestContext()\n        });\n      });\n    }",
            "fullText": "          details: log,\n          testContext: this.getCurrentTestContext()\n        });\n      });\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 92-96",
            "startLine": 92,
            "endLine": 96,
            "lines": 5,
            "text": "          details: log,\n          testContext: this.getCurrentTestContext()\n        });\n      });\n    }",
            "fullText": "          details: log,\n          testContext: this.getCurrentTestContext()\n        });\n      });\n    }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_5d167c7f74d765503f843e147d3913d5",
        "locations": [
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 137-141",
            "startLine": 137,
            "endLine": 141,
            "lines": 5,
            "text": "\n  private getCurrentTestContext(): ExternalAccessLog['testContext'] | undefined {\n    // This would be integrated with test runner\n    return undefined;\n  }",
            "fullText": "\n  private getCurrentTestContext(): ExternalAccessLog['testContext'] | undefined {\n    // This would be integrated with test runner\n    return undefined;\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 138-142",
            "startLine": 138,
            "endLine": 142,
            "lines": 5,
            "text": "  private getCurrentTestContext(): ExternalAccessLog['testContext'] | undefined {\n    // This would be integrated with test runner\n    return undefined;\n  }\n",
            "fullText": "  private getCurrentTestContext(): ExternalAccessLog['testContext'] | undefined {\n    // This would be integrated with test runner\n    return undefined;\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_1ce1af871ea0d59286346d13b5730a7c",
        "locations": [
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 198-202",
            "startLine": 198,
            "endLine": 202,
            "lines": 5,
            "text": "    \n    // Instrument popular HTTP clients\n    this.instrumentModule('axios', ['request', 'get', 'post', 'put', 'delete']);\n    this.instrumentModule('node-fetch', ['default']);\n    ",
            "fullText": "    \n    // Instrument popular HTTP clients\n    this.instrumentModule('axios', ['request', 'get', 'post', 'put', 'delete']);\n    this.instrumentModule('node-fetch', ['default']);\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 199-203",
            "startLine": 199,
            "endLine": 203,
            "lines": 5,
            "text": "    // Instrument popular HTTP clients\n    this.instrumentModule('axios', ['request', 'get', 'post', 'put', 'delete']);\n    this.instrumentModule('node-fetch', ['default']);\n    \n    // Instrument dat...",
            "fullText": "    // Instrument popular HTTP clients\n    this.instrumentModule('axios', ['request', 'get', 'post', 'put', 'delete']);\n    this.instrumentModule('node-fetch', ['default']);\n    \n    // Instrument database clients",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9ddaa87b43f23fb3e007e819e7b22b98",
        "locations": [
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 218-222",
            "startLine": 218,
            "endLine": 222,
            "lines": 5,
            "text": "      \n      methods.forEach(method => {\n        if (module[method] && typeof module[method] === 'function') {\n          const originalMethod = module[method];\n          const trackedName = `ext_${mod...",
            "fullText": "      \n      methods.forEach(method => {\n        if (module[method] && typeof module[method] === 'function') {\n          const originalMethod = module[method];\n          const trackedName = `ext_${moduleName}_${method}`;",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 219-223",
            "startLine": 219,
            "endLine": 223,
            "lines": 5,
            "text": "      methods.forEach(method => {\n        if (module[method] && typeof module[method] === 'function') {\n          const originalMethod = module[method];\n          const trackedName = `ext_${moduleName...",
            "fullText": "      methods.forEach(method => {\n        if (module[method] && typeof module[method] === 'function') {\n          const originalMethod = module[method];\n          const trackedName = `ext_${moduleName}_${method}`;\n          ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_106ce8ae74d0bb2f9c96e92b02f0fe92",
        "locations": [
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 223-227",
            "startLine": 223,
            "endLine": 227,
            "lines": 5,
            "text": "          \n          module[method] = trackExternal(trackedName, originalMethod);\n        }\n      });\n    } catch (error) {",
            "fullText": "          \n          module[method] = trackExternal(trackedName, originalMethod);\n        }\n      });\n    } catch (error) {",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 224-228",
            "startLine": 224,
            "endLine": 228,
            "lines": 5,
            "text": "          module[method] = trackExternal(trackedName, originalMethod);\n        }\n      });\n    } catch (error) {\n      // Module not installed, skip",
            "fullText": "          module[method] = trackExternal(trackedName, originalMethod);\n        }\n      });\n    } catch (error) {\n      // Module not installed, skip",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6d974fdc17ebe5de5d592418098a2e24",
        "locations": [
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 246-250",
            "startLine": 246,
            "endLine": 250,
            "lines": 5,
            "text": "    // Keep buffer manageable\n    if (this.logs.length > 10000) {\n      this.logs = this.logs.slice(-5000);\n    }\n  }",
            "fullText": "    // Keep buffer manageable\n    if (this.logs.length > 10000) {\n      this.logs = this.logs.slice(-5000);\n    }\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 247-251",
            "startLine": 247,
            "endLine": 251,
            "lines": 5,
            "text": "    if (this.logs.length > 10000) {\n      this.logs = this.logs.slice(-5000);\n    }\n  }\n",
            "fullText": "    if (this.logs.length > 10000) {\n      this.logs = this.logs.slice(-5000);\n    }\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_334c95331e84c493a794659f526db79d",
        "locations": [
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 294-298",
            "startLine": 294,
            "endLine": 298,
            "lines": 5,
            "text": "\n    this.logs.forEach(log => {\n      // Count by type\n      stats.byType[log.type] = (stats.byType[log.type] || 0) + 1;\n",
            "fullText": "\n    this.logs.forEach(log => {\n      // Count by type\n      stats.byType[log.type] = (stats.byType[log.type] || 0) + 1;\n",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 295-299",
            "startLine": 295,
            "endLine": 299,
            "lines": 5,
            "text": "    this.logs.forEach(log => {\n      // Count by type\n      stats.byType[log.type] = (stats.byType[log.type] || 0) + 1;\n\n      // Count by function",
            "fullText": "    this.logs.forEach(log => {\n      // Count by type\n      stats.byType[log.type] = (stats.byType[log.type] || 0) + 1;\n\n      // Count by function",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_4c0ed7e2907f73daeb9d478332d5163e",
        "locations": [
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 321-325",
            "startLine": 321,
            "endLine": 325,
            "lines": 5,
            "text": "\n    // Calculate function averages\n    Object.values(stats.byFunction).forEach((funcStats: any) => {\n      funcStats.avgDuration = funcStats.count > 0 ? funcStats.totalDuration / funcStats.count : 0;...",
            "fullText": "\n    // Calculate function averages\n    Object.values(stats.byFunction).forEach((funcStats: any) => {\n      funcStats.avgDuration = funcStats.count > 0 ? funcStats.totalDuration / funcStats.count : 0;\n    });",
            "isTextBlock": true
          },
          {
            "file": "src/logging/external-log-lib.ts",
            "name": "lines 322-326",
            "startLine": 322,
            "endLine": 326,
            "lines": 5,
            "text": "    // Calculate function averages\n    Object.values(stats.byFunction).forEach((funcStats: any) => {\n      funcStats.avgDuration = funcStats.count > 0 ? funcStats.totalDuration / funcStats.count : 0;\n...",
            "fullText": "    // Calculate function averages\n    Object.values(stats.byFunction).forEach((funcStats: any) => {\n      funcStats.avgDuration = funcStats.count > 0 ? funcStats.totalDuration / funcStats.count : 0;\n    });\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c2802c727753ee7cce3243d151f87362",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 113-117",
            "startLine": 113,
            "endLine": 117,
            "lines": 5,
            "text": "    // Restore HTTP/HTTPS\n    http.request = this.originals.http.request;\n    http.get = this.originals.http.get;\n    https.request = this.originals.https.request;\n    https.get = this.originals.https...",
            "fullText": "    // Restore HTTP/HTTPS\n    http.request = this.originals.http.request;\n    http.get = this.originals.http.get;\n    https.request = this.originals.https.request;\n    https.get = this.originals.https.get;",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 114-118",
            "startLine": 114,
            "endLine": 118,
            "lines": 5,
            "text": "    http.request = this.originals.http.request;\n    http.get = this.originals.http.get;\n    https.request = this.originals.https.request;\n    https.get = this.originals.https.get;\n",
            "fullText": "    http.request = this.originals.http.request;\n    http.get = this.originals.http.get;\n    https.request = this.originals.https.request;\n    https.get = this.originals.https.get;\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c0279d7bac6cf4706318e32a8eb35e86",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 118-122",
            "startLine": 118,
            "endLine": 122,
            "lines": 5,
            "text": "\n    // Restore net\n    net.connect = this.originals.net.connect;\n    net.createConnection = this.originals.net.createConnection;\n",
            "fullText": "\n    // Restore net\n    net.connect = this.originals.net.connect;\n    net.createConnection = this.originals.net.createConnection;\n",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 119-123",
            "startLine": 119,
            "endLine": 123,
            "lines": 5,
            "text": "    // Restore net\n    net.connect = this.originals.net.connect;\n    net.createConnection = this.originals.net.createConnection;\n\n    // Restore TLS",
            "fullText": "    // Restore net\n    net.connect = this.originals.net.connect;\n    net.createConnection = this.originals.net.createConnection;\n\n    // Restore TLS",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f71c873cd55e2702fc702deac1247111",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 123-127",
            "startLine": 123,
            "endLine": 127,
            "lines": 5,
            "text": "    // Restore TLS\n    tls.connect = this.originals.tls.connect;\n\n    // Restore dgram\n    dgram.createSocket = this.originals.dgram.createSocket;",
            "fullText": "    // Restore TLS\n    tls.connect = this.originals.tls.connect;\n\n    // Restore dgram\n    dgram.createSocket = this.originals.dgram.createSocket;",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 124-128",
            "startLine": 124,
            "endLine": 128,
            "lines": 5,
            "text": "    tls.connect = this.originals.tls.connect;\n\n    // Restore dgram\n    dgram.createSocket = this.originals.dgram.createSocket;\n",
            "fullText": "    tls.connect = this.originals.tls.connect;\n\n    // Restore dgram\n    dgram.createSocket = this.originals.dgram.createSocket;\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_034173b28c5142a32dcf101a437a8c97",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 129-133",
            "startLine": 129,
            "endLine": 133,
            "lines": 5,
            "text": "    // Restore DNS\n    dns.lookup = this.originals.dns.lookup;\n    dns.Working on = this.originals.dns.Working on;\n    dns.resolve4 = this.originals.dns.resolve4;\n    dns.resolve6 = this.originals.dns.resol...",
            "fullText": "    // Restore DNS\n    dns.lookup = this.originals.dns.lookup;\n    dns.Working on = this.originals.dns.Working on;\n    dns.resolve4 = this.originals.dns.resolve4;\n    dns.resolve6 = this.originals.dns.resolve6;",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 130-134",
            "startLine": 130,
            "endLine": 134,
            "lines": 5,
            "text": "    dns.lookup = this.originals.dns.lookup;\n    dns.Working on = this.originals.dns.Working on;\n    dns.resolve4 = this.originals.dns.resolve4;\n    dns.resolve6 = this.originals.dns.resolve6;\n",
            "fullText": "    dns.lookup = this.originals.dns.lookup;\n    dns.Working on = this.originals.dns.Working on;\n    dns.resolve4 = this.originals.dns.resolve4;\n    dns.resolve6 = this.originals.dns.resolve6;\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f58ea11433b5ad5aa3b5bdc3a1ada34e",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 144-148",
            "startLine": 144,
            "endLine": 148,
            "lines": 5,
            "text": "\n    // Patch http.request\n    (http as any).request = function(...args: any[]): http.ClientRequest {\n      const [options, callback] = self.parseHttpArgs(args);\n      const log = self.createHttpLog('...",
            "fullText": "\n    // Patch http.request\n    (http as any).request = function(...args: any[]): http.ClientRequest {\n      const [options, callback] = self.parseHttpArgs(args);\n      const log = self.createHttpLog('http', options);",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 145-149",
            "startLine": 145,
            "endLine": 149,
            "lines": 5,
            "text": "    // Patch http.request\n    (http as any).request = function(...args: any[]): http.ClientRequest {\n      const [options, callback] = self.parseHttpArgs(args);\n      const log = self.createHttpLog('h...",
            "fullText": "    // Patch http.request\n    (http as any).request = function(...args: any[]): http.ClientRequest {\n      const [options, callback] = self.parseHttpArgs(args);\n      const log = self.createHttpLog('http', options);\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_2fb339c597a8b4b65e63146df90c8ed3",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 149-153",
            "startLine": 149,
            "endLine": 153,
            "lines": 5,
            "text": "      \n      const req = self.originals.http.request.apply(http, args) as http.ClientRequest;\n      return self.wrapHttpRequest(req, log, callback);\n    };\n",
            "fullText": "      \n      const req = self.originals.http.request.apply(http, args) as http.ClientRequest;\n      return self.wrapHttpRequest(req, log, callback);\n    };\n",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 150-154",
            "startLine": 150,
            "endLine": 154,
            "lines": 5,
            "text": "      const req = self.originals.http.request.apply(http, args) as http.ClientRequest;\n      return self.wrapHttpRequest(req, log, callback);\n    };\n\n    // Patch http.get",
            "fullText": "      const req = self.originals.http.request.apply(http, args) as http.ClientRequest;\n      return self.wrapHttpRequest(req, log, callback);\n    };\n\n    // Patch http.get",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_fce82944780a150191d66891dc463ff9",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 153-157",
            "startLine": 153,
            "endLine": 157,
            "lines": 5,
            "text": "\n    // Patch http.get\n    (http as any).get = function(...args: any[]): http.ClientRequest {\n      const [options, callback] = self.parseHttpArgs(args);\n      const log = self.createHttpLog('http', o...",
            "fullText": "\n    // Patch http.get\n    (http as any).get = function(...args: any[]): http.ClientRequest {\n      const [options, callback] = self.parseHttpArgs(args);\n      const log = self.createHttpLog('http', options);",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 154-158",
            "startLine": 154,
            "endLine": 158,
            "lines": 5,
            "text": "    // Patch http.get\n    (http as any).get = function(...args: any[]): http.ClientRequest {\n      const [options, callback] = self.parseHttpArgs(args);\n      const log = self.createHttpLog('http', op...",
            "fullText": "    // Patch http.get\n    (http as any).get = function(...args: any[]): http.ClientRequest {\n      const [options, callback] = self.parseHttpArgs(args);\n      const log = self.createHttpLog('http', options);\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_91a1c59dc3895814916f3fcb2e85f4a6",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 158-162",
            "startLine": 158,
            "endLine": 162,
            "lines": 5,
            "text": "      \n      const req = self.originals.http.get.apply(http, args) as http.ClientRequest;\n      return self.wrapHttpRequest(req, log, callback);\n    };\n  }",
            "fullText": "      \n      const req = self.originals.http.get.apply(http, args) as http.ClientRequest;\n      return self.wrapHttpRequest(req, log, callback);\n    };\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 159-163",
            "startLine": 159,
            "endLine": 163,
            "lines": 5,
            "text": "      const req = self.originals.http.get.apply(http, args) as http.ClientRequest;\n      return self.wrapHttpRequest(req, log, callback);\n    };\n  }\n",
            "fullText": "      const req = self.originals.http.get.apply(http, args) as http.ClientRequest;\n      return self.wrapHttpRequest(req, log, callback);\n    };\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ac38c956c664a4befb5c0f43ef794b73",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 160-164",
            "startLine": 160,
            "endLine": 164,
            "lines": 5,
            "text": "      return self.wrapHttpRequest(req, log, callback);\n    };\n  }\n\n  /**",
            "fullText": "      return self.wrapHttpRequest(req, log, callback);\n    };\n  }\n\n  /**",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 185-189",
            "startLine": 185,
            "endLine": 189,
            "lines": 5,
            "text": "      return self.wrapHttpRequest(req, log, callback);\n    };\n  }\n\n  /**",
            "fullText": "      return self.wrapHttpRequest(req, log, callback);\n    };\n  }\n\n  /**",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_fa36588b2fbbef894e558c442dce1b4f",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 169-173",
            "startLine": 169,
            "endLine": 173,
            "lines": 5,
            "text": "\n    // Patch https.request\n    (https as any).request = function(...args: any[]): http.ClientRequest {\n      const [options, callback] = self.parseHttpArgs(args);\n      const log = self.createHttpLog...",
            "fullText": "\n    // Patch https.request\n    (https as any).request = function(...args: any[]): http.ClientRequest {\n      const [options, callback] = self.parseHttpArgs(args);\n      const log = self.createHttpLog('https', options);",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 170-174",
            "startLine": 170,
            "endLine": 174,
            "lines": 5,
            "text": "    // Patch https.request\n    (https as any).request = function(...args: any[]): http.ClientRequest {\n      const [options, callback] = self.parseHttpArgs(args);\n      const log = self.createHttpLog(...",
            "fullText": "    // Patch https.request\n    (https as any).request = function(...args: any[]): http.ClientRequest {\n      const [options, callback] = self.parseHttpArgs(args);\n      const log = self.createHttpLog('https', options);\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c04703cbc167656aa2933c2da8e6eff5",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 174-178",
            "startLine": 174,
            "endLine": 178,
            "lines": 5,
            "text": "      \n      const req = self.originals.https.request.apply(https, args) as http.ClientRequest;\n      return self.wrapHttpRequest(req, log, callback);\n    };\n",
            "fullText": "      \n      const req = self.originals.https.request.apply(https, args) as http.ClientRequest;\n      return self.wrapHttpRequest(req, log, callback);\n    };\n",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 175-179",
            "startLine": 175,
            "endLine": 179,
            "lines": 5,
            "text": "      const req = self.originals.https.request.apply(https, args) as http.ClientRequest;\n      return self.wrapHttpRequest(req, log, callback);\n    };\n\n    // Patch https.get",
            "fullText": "      const req = self.originals.https.request.apply(https, args) as http.ClientRequest;\n      return self.wrapHttpRequest(req, log, callback);\n    };\n\n    // Patch https.get",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_e8cdee22fd2928cd98b24c345933ce82",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 178-182",
            "startLine": 178,
            "endLine": 182,
            "lines": 5,
            "text": "\n    // Patch https.get\n    (https as any).get = function(...args: any[]): http.ClientRequest {\n      const [options, callback] = self.parseHttpArgs(args);\n      const log = self.createHttpLog('https'...",
            "fullText": "\n    // Patch https.get\n    (https as any).get = function(...args: any[]): http.ClientRequest {\n      const [options, callback] = self.parseHttpArgs(args);\n      const log = self.createHttpLog('https', options);",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 179-183",
            "startLine": 179,
            "endLine": 183,
            "lines": 5,
            "text": "    // Patch https.get\n    (https as any).get = function(...args: any[]): http.ClientRequest {\n      const [options, callback] = self.parseHttpArgs(args);\n      const log = self.createHttpLog('https',...",
            "fullText": "    // Patch https.get\n    (https as any).get = function(...args: any[]): http.ClientRequest {\n      const [options, callback] = self.parseHttpArgs(args);\n      const log = self.createHttpLog('https', options);\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_1b1149a66ad1630e17470f38d5cc468d",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 183-187",
            "startLine": 183,
            "endLine": 187,
            "lines": 5,
            "text": "      \n      const req = self.originals.https.get.apply(https, args) as http.ClientRequest;\n      return self.wrapHttpRequest(req, log, callback);\n    };\n  }",
            "fullText": "      \n      const req = self.originals.https.get.apply(https, args) as http.ClientRequest;\n      return self.wrapHttpRequest(req, log, callback);\n    };\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 184-188",
            "startLine": 184,
            "endLine": 188,
            "lines": 5,
            "text": "      const req = self.originals.https.get.apply(https, args) as http.ClientRequest;\n      return self.wrapHttpRequest(req, log, callback);\n    };\n  }\n",
            "fullText": "      const req = self.originals.https.get.apply(https, args) as http.ClientRequest;\n      return self.wrapHttpRequest(req, log, callback);\n    };\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_62763f87fa6b767c6bce39718a8ad578",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 195-199",
            "startLine": 195,
            "endLine": 199,
            "lines": 5,
            "text": "    // Patch net.connect and net.createConnection\n    const patchConnect = (original: any) => {\n      return function(...args: any[]): net.Socket {\n        const options = self.parseNetArgs(args);\n   ...",
            "fullText": "    // Patch net.connect and net.createConnection\n    const patchConnect = (original: any) => {\n      return function(...args: any[]): net.Socket {\n        const options = self.parseNetArgs(args);\n        const log = self.createTcpLog(options);",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 196-200",
            "startLine": 196,
            "endLine": 200,
            "lines": 5,
            "text": "    const patchConnect = (original: any) => {\n      return function(...args: any[]): net.Socket {\n        const options = self.parseNetArgs(args);\n        const log = self.createTcpLog(options);\n     ...",
            "fullText": "    const patchConnect = (original: any) => {\n      return function(...args: any[]): net.Socket {\n        const options = self.parseNetArgs(args);\n        const log = self.createTcpLog(options);\n        ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_cdce9d7b4f1dc938b4384e95d630d042",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 200-204",
            "startLine": 200,
            "endLine": 204,
            "lines": 5,
            "text": "        \n        const socket = original.apply(net, args) as net.Socket;\n        return self.wrapSocket(socket, log);\n      };\n    };",
            "fullText": "        \n        const socket = original.apply(net, args) as net.Socket;\n        return self.wrapSocket(socket, log);\n      };\n    };",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 201-205",
            "startLine": 201,
            "endLine": 205,
            "lines": 5,
            "text": "        const socket = original.apply(net, args) as net.Socket;\n        return self.wrapSocket(socket, log);\n      };\n    };\n",
            "fullText": "        const socket = original.apply(net, args) as net.Socket;\n        return self.wrapSocket(socket, log);\n      };\n    };\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c23638f8e1071bf2308c8ecc4ac6958b",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 229-233",
            "startLine": 229,
            "endLine": 233,
            "lines": 5,
            "text": "      \n      const socket = self.originals.tls.connect.apply(tls, args) as tls.TLSSocket;\n      return self.wrapSocket(socket, log) as tls.TLSSocket;\n    };\n  }",
            "fullText": "      \n      const socket = self.originals.tls.connect.apply(tls, args) as tls.TLSSocket;\n      return self.wrapSocket(socket, log) as tls.TLSSocket;\n    };\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 230-234",
            "startLine": 230,
            "endLine": 234,
            "lines": 5,
            "text": "      const socket = self.originals.tls.connect.apply(tls, args) as tls.TLSSocket;\n      return self.wrapSocket(socket, log) as tls.TLSSocket;\n    };\n  }\n",
            "fullText": "      const socket = self.originals.tls.connect.apply(tls, args) as tls.TLSSocket;\n      return self.wrapSocket(socket, log) as tls.TLSSocket;\n    };\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9e0cd4db0d17e1a540f7ce3bf3ae142c",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 262-266",
            "startLine": 262,
            "endLine": 266,
            "lines": 5,
            "text": "      // Monitor messages\n      socket.on('message', (msg) => {\n        log.bytesRead += msg.length;\n        self.emit('network', { ...log, event: 'message' });\n      });",
            "fullText": "      // Monitor messages\n      socket.on('message', (msg) => {\n        log.bytesRead += msg.length;\n        self.emit('network', { ...log, event: 'message' });\n      });",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 263-267",
            "startLine": 263,
            "endLine": 267,
            "lines": 5,
            "text": "      socket.on('message', (msg) => {\n        log.bytesRead += msg.length;\n        self.emit('network', { ...log, event: 'message' });\n      });\n",
            "fullText": "      socket.on('message', (msg) => {\n        log.bytesRead += msg.length;\n        self.emit('network', { ...log, event: 'message' });\n      });\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_1ac6efcbeda3048d1aec2954ed6b9c23",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 267-271",
            "startLine": 267,
            "endLine": 271,
            "lines": 5,
            "text": "\n      self.activeConnections.set(log.id, log);\n      return socket;\n    };\n  }",
            "fullText": "\n      self.activeConnections.set(log.id, log);\n      return socket;\n    };\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 268-272",
            "startLine": 268,
            "endLine": 272,
            "lines": 5,
            "text": "      self.activeConnections.set(log.id, log);\n      return socket;\n    };\n  }\n",
            "fullText": "      self.activeConnections.set(log.id, log);\n      return socket;\n    };\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0ca681e96bc27d4764e4d5c5ae5fca25",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 278-282",
            "startLine": 278,
            "endLine": 282,
            "lines": 5,
            "text": "\n    const wrapDnsMethod = (method: string, original: any) => {\n      return function(...args: any[]): any {\n        const hostname = args[0];\n        const startTime = Date.now();",
            "fullText": "\n    const wrapDnsMethod = (method: string, original: any) => {\n      return function(...args: any[]): any {\n        const hostname = args[0];\n        const startTime = Date.now();",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 279-283",
            "startLine": 279,
            "endLine": 283,
            "lines": 5,
            "text": "    const wrapDnsMethod = (method: string, original: any) => {\n      return function(...args: any[]): any {\n        const hostname = args[0];\n        const startTime = Date.now();\n        ",
            "fullText": "    const wrapDnsMethod = (method: string, original: any) => {\n      return function(...args: any[]): any {\n        const hostname = args[0];\n        const startTime = Date.now();\n        ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_46a7bfcd8bb5ad66c9a16ade57dc2bef",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 333-337",
            "startLine": 333,
            "endLine": 337,
            "lines": 5,
            "text": "\n    // Track response\n    req.on('response', (res: http.IncomingMessage) => {\n      log.statusCode = res.statusCode;\n      log.headers = res.headers;",
            "fullText": "\n    // Track response\n    req.on('response', (res: http.IncomingMessage) => {\n      log.statusCode = res.statusCode;\n      log.headers = res.headers;",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 334-338",
            "startLine": 334,
            "endLine": 338,
            "lines": 5,
            "text": "    // Track response\n    req.on('response', (res: http.IncomingMessage) => {\n      log.statusCode = res.statusCode;\n      log.headers = res.headers;\n",
            "fullText": "    // Track response\n    req.on('response', (res: http.IncomingMessage) => {\n      log.statusCode = res.statusCode;\n      log.headers = res.headers;\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_2dd1a49102330f967c6e9bd3d9cd6d75",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 344-348",
            "startLine": 344,
            "endLine": 348,
            "lines": 5,
            "text": "        log.duration = Date.now() - startTime;\n        self.emit('network', log);\n        self.logs.push(log);\n        self.activeConnections.delete(log.id);\n      });",
            "fullText": "        log.duration = Date.now() - startTime;\n        self.emit('network', log);\n        self.logs.push(log);\n        self.activeConnections.delete(log.id);\n      });",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 353-357",
            "startLine": 353,
            "endLine": 357,
            "lines": 5,
            "text": "      log.duration = Date.now() - startTime;\n      self.emit('network', log);\n      self.logs.push(log);\n      self.activeConnections.delete(log.id);\n    });",
            "fullText": "      log.duration = Date.now() - startTime;\n      self.emit('network', log);\n      self.logs.push(log);\n      self.activeConnections.delete(log.id);\n    });",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0f06c18fba96992d5afef8148806381b",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 381-385",
            "startLine": 381,
            "endLine": 385,
            "lines": 5,
            "text": "    // Track data\n    socket.on('data', (chunk) => {\n      log.bytesRead += chunk.length;\n      self.emit('network', { ...log, event: 'data' });\n    });",
            "fullText": "    // Track data\n    socket.on('data', (chunk) => {\n      log.bytesRead += chunk.length;\n      self.emit('network', { ...log, event: 'data' });\n    });",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 382-386",
            "startLine": 382,
            "endLine": 386,
            "lines": 5,
            "text": "    socket.on('data', (chunk) => {\n      log.bytesRead += chunk.length;\n      self.emit('network', { ...log, event: 'data' });\n    });\n",
            "fullText": "    socket.on('data', (chunk) => {\n      log.bytesRead += chunk.length;\n      self.emit('network', { ...log, event: 'data' });\n    });\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_83b6cb4e313406346f60d90e778e199d",
        "locations": [
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 399-403",
            "startLine": 399,
            "endLine": 403,
            "lines": 5,
            "text": "\n    socket.on('error', (err) => {\n      log.error = err.message;\n      self.emit('network', { ...log, event: 'error' });\n    });",
            "fullText": "\n    socket.on('error', (err) => {\n      log.error = err.message;\n      self.emit('network', { ...log, event: 'error' });\n    });",
            "isTextBlock": true
          },
          {
            "file": "src/logging/network-interceptor.ts",
            "name": "lines 400-404",
            "startLine": 400,
            "endLine": 404,
            "lines": 5,
            "text": "    socket.on('error', (err) => {\n      log.error = err.message;\n      self.emit('network', { ...log, event: 'error' });\n    });\n",
            "fullText": "    socket.on('error', (err) => {\n      log.error = err.message;\n      self.emit('network', { ...log, event: 'error' });\n    });\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f0b1b88bab5bf534c2350e1bb3b13324",
        "locations": [
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 16-20",
            "startLine": 16,
            "endLine": 20,
            "lines": 5,
            "text": "\n// Auto-detect configuration\nlet autoConfig: AutoConfig | null = null;\nconst AUTO_DETECT = process.env.INTERCEPT_AUTO_DETECT !== 'false';\n",
            "fullText": "\n// Auto-detect configuration\nlet autoConfig: AutoConfig | null = null;\nconst AUTO_DETECT = process.env.INTERCEPT_AUTO_DETECT !== 'false';\n",
            "isTextBlock": true
          },
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 17-21",
            "startLine": 17,
            "endLine": 21,
            "lines": 5,
            "text": "// Auto-detect configuration\nlet autoConfig: AutoConfig | null = null;\nconst AUTO_DETECT = process.env.INTERCEPT_AUTO_DETECT !== 'false';\n\n// Configuration from environment variables",
            "fullText": "// Auto-detect configuration\nlet autoConfig: AutoConfig | null = null;\nconst AUTO_DETECT = process.env.INTERCEPT_AUTO_DETECT !== 'false';\n\n// Configuration from environment variables",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_90e116f085a323af0b1b89630e23f6f3",
        "locations": [
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 140-144",
            "startLine": 140,
            "endLine": 144,
            "lines": 5,
            "text": "// Setup network interception\nif (config.enableNetwork) {\n  console.log(chalk.blue('🌐 Network interception enabled'));\n  \n  networkInterceptor.enable({ metricsLogger: config.enableMetrics ? systemMet...",
            "fullText": "// Setup network interception\nif (config.enableNetwork) {\n  console.log(chalk.blue('🌐 Network interception enabled'));\n  \n  networkInterceptor.enable({ metricsLogger: config.enableMetrics ? systemMetricsLogger : undefined });",
            "isTextBlock": true
          },
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 141-145",
            "startLine": 141,
            "endLine": 145,
            "lines": 5,
            "text": "if (config.enableNetwork) {\n  console.log(chalk.blue('🌐 Network interception enabled'));\n  \n  networkInterceptor.enable({ metricsLogger: config.enableMetrics ? systemMetricsLogger : undefined });\n  ",
            "fullText": "if (config.enableNetwork) {\n  console.log(chalk.blue('🌐 Network interception enabled'));\n  \n  networkInterceptor.enable({ metricsLogger: config.enableMetrics ? systemMetricsLogger : undefined });\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_122efc91f4399b0eca82ab9c62a2bf72",
        "locations": [
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 155-159",
            "startLine": 155,
            "endLine": 159,
            "lines": 5,
            "text": "    // Update stats\n    stats.network.total++;\n    if (log.error) stats.network.errors++;\n    stats.network.bytes.sent += log.bytesWritten;\n    stats.network.bytes.received += log.bytesRead;",
            "fullText": "    // Update stats\n    stats.network.total++;\n    if (log.error) stats.network.errors++;\n    stats.network.bytes.sent += log.bytesWritten;\n    stats.network.bytes.received += log.bytesRead;",
            "isTextBlock": true
          },
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 156-160",
            "startLine": 156,
            "endLine": 160,
            "lines": 5,
            "text": "    stats.network.total++;\n    if (log.error) stats.network.errors++;\n    stats.network.bytes.sent += log.bytesWritten;\n    stats.network.bytes.received += log.bytesRead;\n    ",
            "fullText": "    stats.network.total++;\n    if (log.error) stats.network.errors++;\n    stats.network.bytes.sent += log.bytesWritten;\n    stats.network.bytes.received += log.bytesRead;\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9935def41749b52ceb1fe5868d18ec81",
        "locations": [
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 180-184",
            "startLine": 180,
            "endLine": 184,
            "lines": 5,
            "text": "    // Update stats\n    stats.database.total++;\n    if (log.error) stats.database.errors++;\n    if (log.operation === 'query') stats.database.queries++;\n    ",
            "fullText": "    // Update stats\n    stats.database.total++;\n    if (log.error) stats.database.errors++;\n    if (log.operation === 'query') stats.database.queries++;\n    ",
            "isTextBlock": true
          },
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 181-185",
            "startLine": 181,
            "endLine": 185,
            "lines": 5,
            "text": "    stats.database.total++;\n    if (log.error) stats.database.errors++;\n    if (log.operation === 'query') stats.database.queries++;\n    \n    // Log",
            "fullText": "    stats.database.total++;\n    if (log.error) stats.database.errors++;\n    if (log.operation === 'query') stats.database.queries++;\n    \n    // Log",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_1d0893e302cade4a5baddeb35395cdaf",
        "locations": [
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 187-191",
            "startLine": 187,
            "endLine": 191,
            "lines": 5,
            "text": "    \n    if (config.logToConsole) {\n      prettyPrint('database', log);\n    }\n  });",
            "fullText": "    \n    if (config.logToConsole) {\n      prettyPrint('database', log);\n    }\n  });",
            "isTextBlock": true
          },
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 188-192",
            "startLine": 188,
            "endLine": 192,
            "lines": 5,
            "text": "    if (config.logToConsole) {\n      prettyPrint('database', log);\n    }\n  });\n  ",
            "fullText": "    if (config.logToConsole) {\n      prettyPrint('database', log);\n    }\n  });\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8e4ef17759873f35371d11d55e93530a",
        "locations": [
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 220-224",
            "startLine": 220,
            "endLine": 224,
            "lines": 5,
            "text": "// Setup metrics logging\nif (config.enableMetrics) {\n  console.log(chalk.blue('📊 System metrics logging enabled'));\n  systemMetricsLogger.startLogging(5000); // Log every 5 seconds\n}",
            "fullText": "// Setup metrics logging\nif (config.enableMetrics) {\n  console.log(chalk.blue('📊 System metrics logging enabled'));\n  systemMetricsLogger.startLogging(5000); // Log every 5 seconds\n}",
            "isTextBlock": true
          },
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 221-225",
            "startLine": 221,
            "endLine": 225,
            "lines": 5,
            "text": "if (config.enableMetrics) {\n  console.log(chalk.blue('📊 System metrics logging enabled'));\n  systemMetricsLogger.startLogging(5000); // Log every 5 seconds\n}\n",
            "fullText": "if (config.enableMetrics) {\n  console.log(chalk.blue('📊 System metrics logging enabled'));\n  systemMetricsLogger.startLogging(5000); // Log every 5 seconds\n}\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_fba49c2136f3600d740fb9755d207cbe",
        "locations": [
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 268-272",
            "startLine": 268,
            "endLine": 272,
            "lines": 5,
            "text": "  \n  fs.writeFileSync(\n    path.join(config.logDir, 'final-stats.json'),\n    JSON.stringify(finalStats, null, 2)\n  );",
            "fullText": "  \n  fs.writeFileSync(\n    path.join(config.logDir, 'final-stats.json'),\n    JSON.stringify(finalStats, null, 2)\n  );",
            "isTextBlock": true
          },
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 269-273",
            "startLine": 269,
            "endLine": 273,
            "lines": 5,
            "text": "  fs.writeFileSync(\n    path.join(config.logDir, 'final-stats.json'),\n    JSON.stringify(finalStats, null, 2)\n  );\n  ",
            "fullText": "  fs.writeFileSync(\n    path.join(config.logDir, 'final-stats.json'),\n    JSON.stringify(finalStats, null, 2)\n  );\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_67dea38149534afec19cf6f709fcf5bd",
        "locations": [
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 273-277",
            "startLine": 273,
            "endLine": 277,
            "lines": 5,
            "text": "  \n  // Close streams\n  Object.values(logStreams).forEach(stream => {\n    if (stream) stream.end();\n  });",
            "fullText": "  \n  // Close streams\n  Object.values(logStreams).forEach(stream => {\n    if (stream) stream.end();\n  });",
            "isTextBlock": true
          },
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 274-278",
            "startLine": 274,
            "endLine": 278,
            "lines": 5,
            "text": "  // Close streams\n  Object.values(logStreams).forEach(stream => {\n    if (stream) stream.end();\n  });\n  ",
            "fullText": "  // Close streams\n  Object.values(logStreams).forEach(stream => {\n    if (stream) stream.end();\n  });\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b277962a683a34067777d825f4b18a6c",
        "locations": [
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 278-282",
            "startLine": 278,
            "endLine": 282,
            "lines": 5,
            "text": "  \n  if (config.enableMetrics) {\n    systemMetricsLogger.stopLogging();\n    systemMetricsLogger.exportMetrics(path.join(config.logDir, 'system-metrics.json'));\n  }",
            "fullText": "  \n  if (config.enableMetrics) {\n    systemMetricsLogger.stopLogging();\n    systemMetricsLogger.exportMetrics(path.join(config.logDir, 'system-metrics.json'));\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 279-283",
            "startLine": 279,
            "endLine": 283,
            "lines": 5,
            "text": "  if (config.enableMetrics) {\n    systemMetricsLogger.stopLogging();\n    systemMetricsLogger.exportMetrics(path.join(config.logDir, 'system-metrics.json'));\n  }\n  ",
            "fullText": "  if (config.enableMetrics) {\n    systemMetricsLogger.stopLogging();\n    systemMetricsLogger.exportMetrics(path.join(config.logDir, 'system-metrics.json'));\n  }\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ec57c67406ab4533603a9cce69feace9",
        "locations": [
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 324-328",
            "startLine": 324,
            "endLine": 328,
            "lines": 5,
            "text": "      \n      // Apply security configuration\n      if (autoConfig.security.complianceMode) {\n        console.log(chalk.yellow(`⚠️  Compliance mode: ${autoConfig.security.complianceMode}`));\n      }",
            "fullText": "      \n      // Apply security configuration\n      if (autoConfig.security.complianceMode) {\n        console.log(chalk.yellow(`⚠️  Compliance mode: ${autoConfig.security.complianceMode}`));\n      }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 325-329",
            "startLine": 325,
            "endLine": 329,
            "lines": 5,
            "text": "      // Apply security configuration\n      if (autoConfig.security.complianceMode) {\n        console.log(chalk.yellow(`⚠️  Compliance mode: ${autoConfig.security.complianceMode}`));\n      }\n      ",
            "fullText": "      // Apply security configuration\n      if (autoConfig.security.complianceMode) {\n        console.log(chalk.yellow(`⚠️  Compliance mode: ${autoConfig.security.complianceMode}`));\n      }\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_320456d117b34250d63a678e0a007102",
        "locations": [
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 329-333",
            "startLine": 329,
            "endLine": 333,
            "lines": 5,
            "text": "      \n    } catch (error) {\n      console.error(chalk.red('Failed to auto-detect configuration:'), error);\n    }\n  }",
            "fullText": "      \n    } catch (error) {\n      console.error(chalk.red('Failed to auto-detect configuration:'), error);\n    }\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 330-334",
            "startLine": 330,
            "endLine": 334,
            "lines": 5,
            "text": "    } catch (error) {\n      console.error(chalk.red('Failed to auto-detect configuration:'), error);\n    }\n  }\n  ",
            "fullText": "    } catch (error) {\n      console.error(chalk.red('Failed to auto-detect configuration:'), error);\n    }\n  }\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f9f8d0e149c05375de826be5dadec403",
        "locations": [
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 335-339",
            "startLine": 335,
            "endLine": 339,
            "lines": 5,
            "text": "  // Log startup\n  console.log(chalk.green('🔄 Interception initialized'));\n  console.log(chalk.gray(`Logs: ${config.logDir}`));\n  console.log(chalk.gray(`Console: ${config.logToConsole ? 'enabled' : '...",
            "fullText": "  // Log startup\n  console.log(chalk.green('🔄 Interception initialized'));\n  console.log(chalk.gray(`Logs: ${config.logDir}`));\n  console.log(chalk.gray(`Console: ${config.logToConsole ? 'enabled' : 'disabled'}`));\n  console.log(chalk.gray(`Framework: ${autoConfig?.framework || 'unknown'}`));",
            "isTextBlock": true
          },
          {
            "file": "src/logging/preload-interceptors.ts",
            "name": "lines 336-340",
            "startLine": 336,
            "endLine": 340,
            "lines": 5,
            "text": "  console.log(chalk.green('🔄 Interception initialized'));\n  console.log(chalk.gray(`Logs: ${config.logDir}`));\n  console.log(chalk.gray(`Console: ${config.logToConsole ? 'enabled' : 'disabled'}`));\n  ...",
            "fullText": "  console.log(chalk.green('🔄 Interception initialized'));\n  console.log(chalk.gray(`Logs: ${config.logDir}`));\n  console.log(chalk.gray(`Console: ${config.logToConsole ? 'enabled' : 'disabled'}`));\n  console.log(chalk.gray(`Framework: ${autoConfig?.framework || 'unknown'}`));\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ecf3836b7e82253efd841cadfd1d30f4",
        "locations": [
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 106-110",
            "startLine": 106,
            "endLine": 110,
            "lines": 5,
            "text": "\n  async startLogging(intervalMs: number = 1000): Promise<void> {\n    console.log(chalk.blue(`📊 Starting system metrics logging to: ${this.logFile}`));\n    \n    this.logStream = fs.createWriteStream(...",
            "fullText": "\n  async startLogging(intervalMs: number = 1000): Promise<void> {\n    console.log(chalk.blue(`📊 Starting system metrics logging to: ${this.logFile}`));\n    \n    this.logStream = fs.createWriteStream(this.logFile, { flags: 'a' });",
            "isTextBlock": true
          },
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 107-111",
            "startLine": 107,
            "endLine": 111,
            "lines": 5,
            "text": "  async startLogging(intervalMs: number = 1000): Promise<void> {\n    console.log(chalk.blue(`📊 Starting system metrics logging to: ${this.logFile}`));\n    \n    this.logStream = fs.createWriteStream(t...",
            "fullText": "  async startLogging(intervalMs: number = 1000): Promise<void> {\n    console.log(chalk.blue(`📊 Starting system metrics logging to: ${this.logFile}`));\n    \n    this.logStream = fs.createWriteStream(this.logFile, { flags: 'a' });\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ecf8bf1b7146eeb9389a1dfff97f1c1c",
        "locations": [
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 109-113",
            "startLine": 109,
            "endLine": 113,
            "lines": 5,
            "text": "    \n    this.logStream = fs.createWriteStream(this.logFile, { flags: 'a' });\n    \n    // Initial network stats\n    await this.updateNetworkStats();",
            "fullText": "    \n    this.logStream = fs.createWriteStream(this.logFile, { flags: 'a' });\n    \n    // Initial network stats\n    await this.updateNetworkStats();",
            "isTextBlock": true
          },
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 110-114",
            "startLine": 110,
            "endLine": 114,
            "lines": 5,
            "text": "    this.logStream = fs.createWriteStream(this.logFile, { flags: 'a' });\n    \n    // Initial network stats\n    await this.updateNetworkStats();\n    ",
            "fullText": "    this.logStream = fs.createWriteStream(this.logFile, { flags: 'a' });\n    \n    // Initial network stats\n    await this.updateNetworkStats();\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f06ed5f5493e605bca30019e6e05a962",
        "locations": [
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 145-149",
            "startLine": 145,
            "endLine": 149,
            "lines": 5,
            "text": "\n    this.metricsHistory.push(metrics);\n    if (this.metricsHistory.length > this.maxHistory) {\n      this.metricsHistory.shift();\n    }",
            "fullText": "\n    this.metricsHistory.push(metrics);\n    if (this.metricsHistory.length > this.maxHistory) {\n      this.metricsHistory.shift();\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 146-150",
            "startLine": 146,
            "endLine": 150,
            "lines": 5,
            "text": "    this.metricsHistory.push(metrics);\n    if (this.metricsHistory.length > this.maxHistory) {\n      this.metricsHistory.shift();\n    }\n",
            "fullText": "    this.metricsHistory.push(metrics);\n    if (this.metricsHistory.length > this.maxHistory) {\n      this.metricsHistory.shift();\n    }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_61b847445702d77f9666ee7aec57ec8f",
        "locations": [
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 193-197",
            "startLine": 193,
            "endLine": 197,
            "lines": 5,
            "text": "    \n    this.previousCPUInfo = cpus;\n    \n    return totalTick === 0 ? 0 : Math.round(100 - (100 * totalIdle / totalTick));\n  }",
            "fullText": "    \n    this.previousCPUInfo = cpus;\n    \n    return totalTick === 0 ? 0 : Math.round(100 - (100 * totalIdle / totalTick));\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 194-198",
            "startLine": 194,
            "endLine": 198,
            "lines": 5,
            "text": "    this.previousCPUInfo = cpus;\n    \n    return totalTick === 0 ? 0 : Math.round(100 - (100 * totalIdle / totalTick));\n  }\n",
            "fullText": "    this.previousCPUInfo = cpus;\n    \n    return totalTick === 0 ? 0 : Math.round(100 - (100 * totalIdle / totalTick));\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8488e656932d3bcdec49292f6ea39db6",
        "locations": [
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 198-202",
            "startLine": 198,
            "endLine": 202,
            "lines": 5,
            "text": "\n  private async getMemoryMetrics(): Promise<MemoryMetrics> {\n    const total = os.totalmem();\n    const free = os.freemem();\n    const used = total - free;",
            "fullText": "\n  private async getMemoryMetrics(): Promise<MemoryMetrics> {\n    const total = os.totalmem();\n    const free = os.freemem();\n    const used = total - free;",
            "isTextBlock": true
          },
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 199-203",
            "startLine": 199,
            "endLine": 203,
            "lines": 5,
            "text": "  private async getMemoryMetrics(): Promise<MemoryMetrics> {\n    const total = os.totalmem();\n    const free = os.freemem();\n    const used = total - free;\n    ",
            "fullText": "  private async getMemoryMetrics(): Promise<MemoryMetrics> {\n    const total = os.totalmem();\n    const free = os.freemem();\n    const used = total - free;\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_786d9fad364b21da39921af263ad2a2d",
        "locations": [
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 262-266",
            "startLine": 262,
            "endLine": 266,
            "lines": 5,
            "text": "\n    // AMD GPU (rocm-smi)\n    try {\n      const { stdout } = await execAsync('rocm-smi --showtemp --showuse --showmeminfo vram');\n      if (stdout) {",
            "fullText": "\n    // AMD GPU (rocm-smi)\n    try {\n      const { stdout } = await execAsync('rocm-smi --showtemp --showuse --showmeminfo vram');\n      if (stdout) {",
            "isTextBlock": true
          },
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 263-267",
            "startLine": 263,
            "endLine": 267,
            "lines": 5,
            "text": "    // AMD GPU (rocm-smi)\n    try {\n      const { stdout } = await execAsync('rocm-smi --showtemp --showuse --showmeminfo vram');\n      if (stdout) {\n        // Parse AMD GPU info (simplified)",
            "fullText": "    // AMD GPU (rocm-smi)\n    try {\n      const { stdout } = await execAsync('rocm-smi --showtemp --showuse --showmeminfo vram');\n      if (stdout) {\n        // Parse AMD GPU info (simplified)",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_4ca37899672debf89481e4ea1617f50a",
        "locations": [
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 283-287",
            "startLine": 283,
            "endLine": 287,
            "lines": 5,
            "text": "      try {\n        const { stdout } = await execAsync('system_profiler SPDisplaysDataType | grep Chipset');\n        if (stdout && (stdout.includes('Apple') || stdout.includes('M1') || stdout.includes...",
            "fullText": "      try {\n        const { stdout } = await execAsync('system_profiler SPDisplaysDataType | grep Chipset');\n        if (stdout && (stdout.includes('Apple') || stdout.includes('M1') || stdout.includes('M2') || stdout.includes('M3'))) {\n          return {\n            available: true,",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 168-172",
            "startLine": 168,
            "endLine": 172,
            "lines": 5,
            "text": "        try {\n          const { stdout } = await execAsync('system_profiler SPDisplaysDataType | grep Chipset');\n          if (stdout && (stdout.includes('Apple') || stdout.includes('M1') || stdout.in...",
            "fullText": "        try {\n          const { stdout } = await execAsync('system_profiler SPDisplaysDataType | grep Chipset');\n          if (stdout && (stdout.includes('Apple') || stdout.includes('M1') || stdout.includes('M2') || stdout.includes('M3'))) {\n            return {\n              available: true,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3046c596141e5a9934a498c866765e83",
        "locations": [
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 284-288",
            "startLine": 284,
            "endLine": 288,
            "lines": 5,
            "text": "        const { stdout } = await execAsync('system_profiler SPDisplaysDataType | grep Chipset');\n        if (stdout && (stdout.includes('Apple') || stdout.includes('M1') || stdout.includes('M2') || st...",
            "fullText": "        const { stdout } = await execAsync('system_profiler SPDisplaysDataType | grep Chipset');\n        if (stdout && (stdout.includes('Apple') || stdout.includes('M1') || stdout.includes('M2') || stdout.includes('M3'))) {\n          return {\n            available: true,\n            type: 'metal',",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 169-173",
            "startLine": 169,
            "endLine": 173,
            "lines": 5,
            "text": "          const { stdout } = await execAsync('system_profiler SPDisplaysDataType | grep Chipset');\n          if (stdout && (stdout.includes('Apple') || stdout.includes('M1') || stdout.includes('M2') |...",
            "fullText": "          const { stdout } = await execAsync('system_profiler SPDisplaysDataType | grep Chipset');\n          if (stdout && (stdout.includes('Apple') || stdout.includes('M1') || stdout.includes('M2') || stdout.includes('M3'))) {\n            return {\n              available: true,\n              type: 'metal',",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_58ae096b194a813b1c060259307120ea",
        "locations": [
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 313-317",
            "startLine": 313,
            "endLine": 317,
            "lines": 5,
            "text": "    \n    const currentTime = Date.now();\n    const timeDelta = (currentTime - this.lastNetworkCheck) / 1000; // seconds\n    \n    const netInterfaces = os.networkInterfaces();",
            "fullText": "    \n    const currentTime = Date.now();\n    const timeDelta = (currentTime - this.lastNetworkCheck) / 1000; // seconds\n    \n    const netInterfaces = os.networkInterfaces();",
            "isTextBlock": true
          },
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 314-318",
            "startLine": 314,
            "endLine": 318,
            "lines": 5,
            "text": "    const currentTime = Date.now();\n    const timeDelta = (currentTime - this.lastNetworkCheck) / 1000; // seconds\n    \n    const netInterfaces = os.networkInterfaces();\n    ",
            "fullText": "    const currentTime = Date.now();\n    const timeDelta = (currentTime - this.lastNetworkCheck) / 1000; // seconds\n    \n    const netInterfaces = os.networkInterfaces();\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a13bc47b25dfac69730786b7ba7e7b94",
        "locations": [
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 316-320",
            "startLine": 316,
            "endLine": 320,
            "lines": 5,
            "text": "    \n    const netInterfaces = os.networkInterfaces();\n    \n    for (const [name, addrs] of Object.entries(netInterfaces)) {\n      if (!addrs || name === 'lo') continue; // Skip loopback",
            "fullText": "    \n    const netInterfaces = os.networkInterfaces();\n    \n    for (const [name, addrs] of Object.entries(netInterfaces)) {\n      if (!addrs || name === 'lo') continue; // Skip loopback",
            "isTextBlock": true
          },
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 317-321",
            "startLine": 317,
            "endLine": 321,
            "lines": 5,
            "text": "    const netInterfaces = os.networkInterfaces();\n    \n    for (const [name, addrs] of Object.entries(netInterfaces)) {\n      if (!addrs || name === 'lo') continue; // Skip loopback\n      ",
            "fullText": "    const netInterfaces = os.networkInterfaces();\n    \n    for (const [name, addrs] of Object.entries(netInterfaces)) {\n      if (!addrs || name === 'lo') continue; // Skip loopback\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3ace2413e53e25a0efdc636a7a73cff4",
        "locations": [
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 328-332",
            "startLine": 328,
            "endLine": 332,
            "lines": 5,
            "text": "        \n        if (prev && timeDelta > 0) {\n          rxRate = Math.round((stats.rx - prev.rx) / timeDelta);\n          txRate = Math.round((stats.tx - prev.tx) / timeDelta);\n        }",
            "fullText": "        \n        if (prev && timeDelta > 0) {\n          rxRate = Math.round((stats.rx - prev.rx) / timeDelta);\n          txRate = Math.round((stats.tx - prev.tx) / timeDelta);\n        }",
            "isTextBlock": true
          },
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 329-333",
            "startLine": 329,
            "endLine": 333,
            "lines": 5,
            "text": "        if (prev && timeDelta > 0) {\n          rxRate = Math.round((stats.rx - prev.rx) / timeDelta);\n          txRate = Math.round((stats.tx - prev.tx) / timeDelta);\n        }\n        ",
            "fullText": "        if (prev && timeDelta > 0) {\n          rxRate = Math.round((stats.rx - prev.rx) / timeDelta);\n          txRate = Math.round((stats.tx - prev.tx) / timeDelta);\n        }\n        ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ed430dc109f038d1014ffb177c061f94",
        "locations": [
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 341-345",
            "startLine": 341,
            "endLine": 345,
            "lines": 5,
            "text": "        \n        totalRx += stats.rx;\n        totalTx += stats.tx;\n        totalRxRate += rxRate;\n        totalTxRate += txRate;",
            "fullText": "        \n        totalRx += stats.rx;\n        totalTx += stats.tx;\n        totalRxRate += rxRate;\n        totalTxRate += txRate;",
            "isTextBlock": true
          },
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 342-346",
            "startLine": 342,
            "endLine": 346,
            "lines": 5,
            "text": "        totalRx += stats.rx;\n        totalTx += stats.tx;\n        totalRxRate += rxRate;\n        totalTxRate += txRate;\n        ",
            "fullText": "        totalRx += stats.rx;\n        totalTx += stats.tx;\n        totalRxRate += rxRate;\n        totalTxRate += txRate;\n        ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6affac2bcde1473868bc84cd46f426d6",
        "locations": [
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 364-368",
            "startLine": 364,
            "endLine": 368,
            "lines": 5,
            "text": "    \n    if (platform === 'linux') {\n      try {\n        const rxPath = `/sys/class/net/${iface}/statistics/rx_bytes`;\n        const txPath = `/sys/class/net/${iface}/statistics/tx_bytes`;",
            "fullText": "    \n    if (platform === 'linux') {\n      try {\n        const rxPath = `/sys/class/net/${iface}/statistics/rx_bytes`;\n        const txPath = `/sys/class/net/${iface}/statistics/tx_bytes`;",
            "isTextBlock": true
          },
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 365-369",
            "startLine": 365,
            "endLine": 369,
            "lines": 5,
            "text": "    if (platform === 'linux') {\n      try {\n        const rxPath = `/sys/class/net/${iface}/statistics/rx_bytes`;\n        const txPath = `/sys/class/net/${iface}/statistics/tx_bytes`;\n        ",
            "fullText": "    if (platform === 'linux') {\n      try {\n        const rxPath = `/sys/class/net/${iface}/statistics/rx_bytes`;\n        const txPath = `/sys/class/net/${iface}/statistics/tx_bytes`;\n        ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_5a3f0db6c7dc023327d058ea6b318986",
        "locations": [
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 480-484",
            "startLine": 480,
            "endLine": 484,
            "lines": 5,
            "text": "    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n  }\n",
            "fullText": "    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n  }\n",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 429-433",
            "startLine": 429,
            "endLine": 433,
            "lines": 5,
            "text": "    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n  }\n  ",
            "fullText": "    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n  }\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_fbf63ea8b4494b4b725b58902eb8f55d",
        "locations": [
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 500-504",
            "startLine": 500,
            "endLine": 504,
            "lines": 5,
            "text": "    \n    fs.writeFileSync(exportPath, JSON.stringify(data, null, 2));\n    console.log(chalk.green(`📊 Metrics exported to: ${exportPath}`));\n  }\n}",
            "fullText": "    \n    fs.writeFileSync(exportPath, JSON.stringify(data, null, 2));\n    console.log(chalk.green(`📊 Metrics exported to: ${exportPath}`));\n  }\n}",
            "isTextBlock": true
          },
          {
            "file": "src/logging/system-metrics-logger.ts",
            "name": "lines 501-505",
            "startLine": 501,
            "endLine": 505,
            "lines": 5,
            "text": "    fs.writeFileSync(exportPath, JSON.stringify(data, null, 2));\n    console.log(chalk.green(`📊 Metrics exported to: ${exportPath}`));\n  }\n}\n",
            "fullText": "    fs.writeFileSync(exportPath, JSON.stringify(data, null, 2));\n    console.log(chalk.green(`📊 Metrics exported to: ${exportPath}`));\n  }\n}\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "88454bfe0a83de089c9796a2ce11d657",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "sendToClient",
            "startLine": 379,
            "endLine": 383,
            "lines": 5,
            "text": "private sendToClient(ws: WebSocket, message: WSMessage) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  }",
            "fullText": "private sendToClient(ws: WebSocket, message: WSMessage) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  }"
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "sendToClient",
            "startLine": 412,
            "endLine": 416,
            "lines": 5,
            "text": "private sendToClient(ws: WebSocket, message: WSMessage) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  }",
            "fullText": "private sendToClient(ws: WebSocket, message: WSMessage) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  }"
          }
        ],
        "type": "function"
      },
      {
        "hash": "block_c8d4d642e074da3770e17db5286a2076",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 14-18",
            "startLine": 14,
            "endLine": 18,
            "lines": 5,
            "text": "\ninterface ClientConnection {\n  ws: WebSocket;\n  user: User;\n  roomId?: string;",
            "fullText": "\ninterface ClientConnection {\n  ws: WebSocket;\n  user: User;\n  roomId?: string;",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 18-22",
            "startLine": 18,
            "endLine": 22,
            "lines": 5,
            "text": "\ninterface ClientConnection {\n  ws: WebSocket;\n  user: User;\n  roomId?: string;",
            "fullText": "\ninterface ClientConnection {\n  ws: WebSocket;\n  user: User;\n  roomId?: string;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c4ecd324b7a71033dae5565de06d9f25",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 15-19",
            "startLine": 15,
            "endLine": 19,
            "lines": 5,
            "text": "interface ClientConnection {\n  ws: WebSocket;\n  user: User;\n  roomId?: string;\n}",
            "fullText": "interface ClientConnection {\n  ws: WebSocket;\n  user: User;\n  roomId?: string;\n}",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 19-23",
            "startLine": 19,
            "endLine": 23,
            "lines": 5,
            "text": "interface ClientConnection {\n  ws: WebSocket;\n  user: User;\n  roomId?: string;\n}",
            "fullText": "interface ClientConnection {\n  ws: WebSocket;\n  user: User;\n  roomId?: string;\n}",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6d6a4b43f51addd9764c606d75aa10f5",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 33-37",
            "startLine": 33,
            "endLine": 37,
            "lines": 5,
            "text": "  }\n\n  private setupWebSocketServer() {\n    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();",
            "fullText": "  }\n\n  private setupWebSocketServer() {\n    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 96-100",
            "startLine": 96,
            "endLine": 100,
            "lines": 5,
            "text": "  }\n\n  private setupWebSocketServer() {\n    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();",
            "fullText": "  }\n\n  private setupWebSocketServer() {\n    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_09121349e355fe1173185c983fbfc1f1",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 36-40",
            "startLine": 36,
            "endLine": 40,
            "lines": 5,
            "text": "    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);\n\n      ws.on('message', (data: Buffer) => {",
            "fullText": "    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);\n\n      ws.on('message', (data: Buffer) => {",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 99-103",
            "startLine": 99,
            "endLine": 103,
            "lines": 5,
            "text": "    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);\n\n      ws.on('message', (data: Buffer) => {",
            "fullText": "    this.wss.on('connection', (ws: WebSocket) => {\n      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);\n\n      ws.on('message', (data: Buffer) => {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c1a345bda54dc7032da58ad5332eb6dd",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 37-41",
            "startLine": 37,
            "endLine": 41,
            "lines": 5,
            "text": "      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);\n\n      ws.on('message', (data: Buffer) => {\n        try {",
            "fullText": "      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);\n\n      ws.on('message', (data: Buffer) => {\n        try {",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 100-104",
            "startLine": 100,
            "endLine": 104,
            "lines": 5,
            "text": "      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);\n\n      ws.on('message', (data: Buffer) => {\n        try {",
            "fullText": "      const clientId = uuidv4();\n      console.log(`[Server] New connection: ${clientId}`);\n\n      ws.on('message', (data: Buffer) => {\n        try {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f9bab4bd1e41349c67233a310756b748",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 38-42",
            "startLine": 38,
            "endLine": 42,
            "lines": 5,
            "text": "      console.log(`[Server] New connection: ${clientId}`);\n\n      ws.on('message', (data: Buffer) => {\n        try {\n          const message: WSMessage = JSON.parse(data.toString());",
            "fullText": "      console.log(`[Server] New connection: ${clientId}`);\n\n      ws.on('message', (data: Buffer) => {\n        try {\n          const message: WSMessage = JSON.parse(data.toString());",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 101-105",
            "startLine": 101,
            "endLine": 105,
            "lines": 5,
            "text": "      console.log(`[Server] New connection: ${clientId}`);\n\n      ws.on('message', (data: Buffer) => {\n        try {\n          const message: WSMessage = JSON.parse(data.toString());",
            "fullText": "      console.log(`[Server] New connection: ${clientId}`);\n\n      ws.on('message', (data: Buffer) => {\n        try {\n          const message: WSMessage = JSON.parse(data.toString());",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_57d65805274417ac2f78146c2e3452df",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 39-43",
            "startLine": 39,
            "endLine": 43,
            "lines": 5,
            "text": "\n      ws.on('message', (data: Buffer) => {\n        try {\n          const message: WSMessage = JSON.parse(data.toString());\n          this.handleMessage(clientId, ws, message);",
            "fullText": "\n      ws.on('message', (data: Buffer) => {\n        try {\n          const message: WSMessage = JSON.parse(data.toString());\n          this.handleMessage(clientId, ws, message);",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 102-106",
            "startLine": 102,
            "endLine": 106,
            "lines": 5,
            "text": "\n      ws.on('message', (data: Buffer) => {\n        try {\n          const message: WSMessage = JSON.parse(data.toString());\n          this.handleMessage(clientId, ws, message);",
            "fullText": "\n      ws.on('message', (data: Buffer) => {\n        try {\n          const message: WSMessage = JSON.parse(data.toString());\n          this.handleMessage(clientId, ws, message);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_af318ee1e1bafdd8214a544451b5bda5",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 40-44",
            "startLine": 40,
            "endLine": 44,
            "lines": 5,
            "text": "      ws.on('message', (data: Buffer) => {\n        try {\n          const message: WSMessage = JSON.parse(data.toString());\n          this.handleMessage(clientId, ws, message);\n        } catch (error) ...",
            "fullText": "      ws.on('message', (data: Buffer) => {\n        try {\n          const message: WSMessage = JSON.parse(data.toString());\n          this.handleMessage(clientId, ws, message);\n        } catch (error) {",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 103-107",
            "startLine": 103,
            "endLine": 107,
            "lines": 5,
            "text": "      ws.on('message', (data: Buffer) => {\n        try {\n          const message: WSMessage = JSON.parse(data.toString());\n          this.handleMessage(clientId, ws, message);\n        } catch (error) ...",
            "fullText": "      ws.on('message', (data: Buffer) => {\n        try {\n          const message: WSMessage = JSON.parse(data.toString());\n          this.handleMessage(clientId, ws, message);\n        } catch (error) {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ac3675e02780bc6724d3965778aea96d",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 41-45",
            "startLine": 41,
            "endLine": 45,
            "lines": 5,
            "text": "        try {\n          const message: WSMessage = JSON.parse(data.toString());\n          this.handleMessage(clientId, ws, message);\n        } catch (error) {\n          console.error('[Server] Error p...",
            "fullText": "        try {\n          const message: WSMessage = JSON.parse(data.toString());\n          this.handleMessage(clientId, ws, message);\n        } catch (error) {\n          console.error('[Server] Error parsing message:', error);",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 104-108",
            "startLine": 104,
            "endLine": 108,
            "lines": 5,
            "text": "        try {\n          const message: WSMessage = JSON.parse(data.toString());\n          this.handleMessage(clientId, ws, message);\n        } catch (error) {\n          console.error('[Server] Error p...",
            "fullText": "        try {\n          const message: WSMessage = JSON.parse(data.toString());\n          this.handleMessage(clientId, ws, message);\n        } catch (error) {\n          console.error('[Server] Error parsing message:', error);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8215dc4e650b04f74185463e516fcc66",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 42-46",
            "startLine": 42,
            "endLine": 46,
            "lines": 5,
            "text": "          const message: WSMessage = JSON.parse(data.toString());\n          this.handleMessage(clientId, ws, message);\n        } catch (error) {\n          console.error('[Server] Error parsing message...",
            "fullText": "          const message: WSMessage = JSON.parse(data.toString());\n          this.handleMessage(clientId, ws, message);\n        } catch (error) {\n          console.error('[Server] Error parsing message:', error);\n          this.sendError(ws, 'Invalid message format');",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 105-109",
            "startLine": 105,
            "endLine": 109,
            "lines": 5,
            "text": "          const message: WSMessage = JSON.parse(data.toString());\n          this.handleMessage(clientId, ws, message);\n        } catch (error) {\n          console.error('[Server] Error parsing message...",
            "fullText": "          const message: WSMessage = JSON.parse(data.toString());\n          this.handleMessage(clientId, ws, message);\n        } catch (error) {\n          console.error('[Server] Error parsing message:', error);\n          this.sendError(ws, 'Invalid message format');",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_efb8502195cfc16a89193d6543393bfe",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 43-47",
            "startLine": 43,
            "endLine": 47,
            "lines": 5,
            "text": "          this.handleMessage(clientId, ws, message);\n        } catch (error) {\n          console.error('[Server] Error parsing message:', error);\n          this.sendError(ws, 'Invalid message format')...",
            "fullText": "          this.handleMessage(clientId, ws, message);\n        } catch (error) {\n          console.error('[Server] Error parsing message:', error);\n          this.sendError(ws, 'Invalid message format');\n        }",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 106-110",
            "startLine": 106,
            "endLine": 110,
            "lines": 5,
            "text": "          this.handleMessage(clientId, ws, message);\n        } catch (error) {\n          console.error('[Server] Error parsing message:', error);\n          this.sendError(ws, 'Invalid message format')...",
            "fullText": "          this.handleMessage(clientId, ws, message);\n        } catch (error) {\n          console.error('[Server] Error parsing message:', error);\n          this.sendError(ws, 'Invalid message format');\n        }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6a44d55b2ac364d10dfdae78b87d37ca",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 44-48",
            "startLine": 44,
            "endLine": 48,
            "lines": 5,
            "text": "        } catch (error) {\n          console.error('[Server] Error parsing message:', error);\n          this.sendError(ws, 'Invalid message format');\n        }\n      });",
            "fullText": "        } catch (error) {\n          console.error('[Server] Error parsing message:', error);\n          this.sendError(ws, 'Invalid message format');\n        }\n      });",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 107-111",
            "startLine": 107,
            "endLine": 111,
            "lines": 5,
            "text": "        } catch (error) {\n          console.error('[Server] Error parsing message:', error);\n          this.sendError(ws, 'Invalid message format');\n        }\n      });",
            "fullText": "        } catch (error) {\n          console.error('[Server] Error parsing message:', error);\n          this.sendError(ws, 'Invalid message format');\n        }\n      });",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_1f7344f13100800d059afd3571874bf5",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 45-49",
            "startLine": 45,
            "endLine": 49,
            "lines": 5,
            "text": "          console.error('[Server] Error parsing message:', error);\n          this.sendError(ws, 'Invalid message format');\n        }\n      });\n",
            "fullText": "          console.error('[Server] Error parsing message:', error);\n          this.sendError(ws, 'Invalid message format');\n        }\n      });\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 108-112",
            "startLine": 108,
            "endLine": 112,
            "lines": 5,
            "text": "          console.error('[Server] Error parsing message:', error);\n          this.sendError(ws, 'Invalid message format');\n        }\n      });\n",
            "fullText": "          console.error('[Server] Error parsing message:', error);\n          this.sendError(ws, 'Invalid message format');\n        }\n      });\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_bef3e45b33ca78834a9b6f74f801266d",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 46-50",
            "startLine": 46,
            "endLine": 50,
            "lines": 5,
            "text": "          this.sendError(ws, 'Invalid message format');\n        }\n      });\n\n      ws.on('close', () => {",
            "fullText": "          this.sendError(ws, 'Invalid message format');\n        }\n      });\n\n      ws.on('close', () => {",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 109-113",
            "startLine": 109,
            "endLine": 113,
            "lines": 5,
            "text": "          this.sendError(ws, 'Invalid message format');\n        }\n      });\n\n      ws.on('close', () => {",
            "fullText": "          this.sendError(ws, 'Invalid message format');\n        }\n      });\n\n      ws.on('close', () => {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9bbef05237107dbeeeae0b6e211cabe8",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 47-51",
            "startLine": 47,
            "endLine": 51,
            "lines": 5,
            "text": "        }\n      });\n\n      ws.on('close', () => {\n        this.handleDisconnect(clientId);",
            "fullText": "        }\n      });\n\n      ws.on('close', () => {\n        this.handleDisconnect(clientId);",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 110-114",
            "startLine": 110,
            "endLine": 114,
            "lines": 5,
            "text": "        }\n      });\n\n      ws.on('close', () => {\n        this.handleDisconnect(clientId);",
            "fullText": "        }\n      });\n\n      ws.on('close', () => {\n        this.handleDisconnect(clientId);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9ef90942aa567ab881b96af9973a7bff",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 48-52",
            "startLine": 48,
            "endLine": 52,
            "lines": 5,
            "text": "      });\n\n      ws.on('close', () => {\n        this.handleDisconnect(clientId);\n      });",
            "fullText": "      });\n\n      ws.on('close', () => {\n        this.handleDisconnect(clientId);\n      });",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 111-115",
            "startLine": 111,
            "endLine": 115,
            "lines": 5,
            "text": "      });\n\n      ws.on('close', () => {\n        this.handleDisconnect(clientId);\n      });",
            "fullText": "      });\n\n      ws.on('close', () => {\n        this.handleDisconnect(clientId);\n      });",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_436ee14626cd3082652e979591366785",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 49-53",
            "startLine": 49,
            "endLine": 53,
            "lines": 5,
            "text": "\n      ws.on('close', () => {\n        this.handleDisconnect(clientId);\n      });\n",
            "fullText": "\n      ws.on('close', () => {\n        this.handleDisconnect(clientId);\n      });\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 112-116",
            "startLine": 112,
            "endLine": 116,
            "lines": 5,
            "text": "\n      ws.on('close', () => {\n        this.handleDisconnect(clientId);\n      });\n",
            "fullText": "\n      ws.on('close', () => {\n        this.handleDisconnect(clientId);\n      });\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_705b23ffc47e77689f725d999ac472d4",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 50-54",
            "startLine": 50,
            "endLine": 54,
            "lines": 5,
            "text": "      ws.on('close', () => {\n        this.handleDisconnect(clientId);\n      });\n\n      ws.on('error', (error) => {",
            "fullText": "      ws.on('close', () => {\n        this.handleDisconnect(clientId);\n      });\n\n      ws.on('error', (error) => {",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 113-117",
            "startLine": 113,
            "endLine": 117,
            "lines": 5,
            "text": "      ws.on('close', () => {\n        this.handleDisconnect(clientId);\n      });\n\n      ws.on('error', (error) => {",
            "fullText": "      ws.on('close', () => {\n        this.handleDisconnect(clientId);\n      });\n\n      ws.on('error', (error) => {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_82c1a7585c2f0761cfb785a696c77939",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 51-55",
            "startLine": 51,
            "endLine": 55,
            "lines": 5,
            "text": "        this.handleDisconnect(clientId);\n      });\n\n      ws.on('error', (error) => {\n        console.error(`[Server] WebSocket error for ${clientId}:`, error);",
            "fullText": "        this.handleDisconnect(clientId);\n      });\n\n      ws.on('error', (error) => {\n        console.error(`[Server] WebSocket error for ${clientId}:`, error);",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 114-118",
            "startLine": 114,
            "endLine": 118,
            "lines": 5,
            "text": "        this.handleDisconnect(clientId);\n      });\n\n      ws.on('error', (error) => {\n        console.error(`[Server] WebSocket error for ${clientId}:`, error);",
            "fullText": "        this.handleDisconnect(clientId);\n      });\n\n      ws.on('error', (error) => {\n        console.error(`[Server] WebSocket error for ${clientId}:`, error);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b59f5c75a060fd46aa4954486fc7775e",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 52-56",
            "startLine": 52,
            "endLine": 56,
            "lines": 5,
            "text": "      });\n\n      ws.on('error', (error) => {\n        console.error(`[Server] WebSocket error for ${clientId}:`, error);\n      });",
            "fullText": "      });\n\n      ws.on('error', (error) => {\n        console.error(`[Server] WebSocket error for ${clientId}:`, error);\n      });",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 115-119",
            "startLine": 115,
            "endLine": 119,
            "lines": 5,
            "text": "      });\n\n      ws.on('error', (error) => {\n        console.error(`[Server] WebSocket error for ${clientId}:`, error);\n      });",
            "fullText": "      });\n\n      ws.on('error', (error) => {\n        console.error(`[Server] WebSocket error for ${clientId}:`, error);\n      });",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_4d3620d0b31d83bcf8cd7efc05c929e7",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 53-57",
            "startLine": 53,
            "endLine": 57,
            "lines": 5,
            "text": "\n      ws.on('error', (error) => {\n        console.error(`[Server] WebSocket error for ${clientId}:`, error);\n      });\n    });",
            "fullText": "\n      ws.on('error', (error) => {\n        console.error(`[Server] WebSocket error for ${clientId}:`, error);\n      });\n    });",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 116-120",
            "startLine": 116,
            "endLine": 120,
            "lines": 5,
            "text": "\n      ws.on('error', (error) => {\n        console.error(`[Server] WebSocket error for ${clientId}:`, error);\n      });\n    });",
            "fullText": "\n      ws.on('error', (error) => {\n        console.error(`[Server] WebSocket error for ${clientId}:`, error);\n      });\n    });",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_7ee0beed41c0c20b3b3fcd23c9d5e382",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 54-58",
            "startLine": 54,
            "endLine": 58,
            "lines": 5,
            "text": "      ws.on('error', (error) => {\n        console.error(`[Server] WebSocket error for ${clientId}:`, error);\n      });\n    });\n  }",
            "fullText": "      ws.on('error', (error) => {\n        console.error(`[Server] WebSocket error for ${clientId}:`, error);\n      });\n    });\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 117-121",
            "startLine": 117,
            "endLine": 121,
            "lines": 5,
            "text": "      ws.on('error', (error) => {\n        console.error(`[Server] WebSocket error for ${clientId}:`, error);\n      });\n    });\n  }",
            "fullText": "      ws.on('error', (error) => {\n        console.error(`[Server] WebSocket error for ${clientId}:`, error);\n      });\n    });\n  }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_47cbd4689dca4bf936d229eee3a507ec",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 55-59",
            "startLine": 55,
            "endLine": 59,
            "lines": 5,
            "text": "        console.error(`[Server] WebSocket error for ${clientId}:`, error);\n      });\n    });\n  }\n",
            "fullText": "        console.error(`[Server] WebSocket error for ${clientId}:`, error);\n      });\n    });\n  }\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 118-122",
            "startLine": 118,
            "endLine": 122,
            "lines": 5,
            "text": "        console.error(`[Server] WebSocket error for ${clientId}:`, error);\n      });\n    });\n  }\n",
            "fullText": "        console.error(`[Server] WebSocket error for ${clientId}:`, error);\n      });\n    });\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_89badb02667bbcd59fb8a88d01b8164d",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 81-85",
            "startLine": 81,
            "endLine": 85,
            "lines": 5,
            "text": "      \n      default:\n        this.sendError(ws, `Unknown message type: ${message.type}`);\n    }\n  }",
            "fullText": "      \n      default:\n        this.sendError(ws, `Unknown message type: ${message.type}`);\n    }\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 82-86",
            "startLine": 82,
            "endLine": 86,
            "lines": 5,
            "text": "      default:\n        this.sendError(ws, `Unknown message type: ${message.type}`);\n    }\n  }\n",
            "fullText": "      default:\n        this.sendError(ws, `Unknown message type: ${message.type}`);\n    }\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_56aca69b871e9f7bfcbbc0ad753408b8",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 88-92",
            "startLine": 88,
            "endLine": 92,
            "lines": 5,
            "text": "    roomId: string;\n    username: string;\n    isAgent?: boolean;\n  }) {\n    const { roomId, username, isAgent } = payload;",
            "fullText": "    roomId: string;\n    username: string;\n    isAgent?: boolean;\n  }) {\n    const { roomId, username, isAgent } = payload;",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 140-144",
            "startLine": 140,
            "endLine": 144,
            "lines": 5,
            "text": "    roomId: string;\n    username: string;\n    isAgent?: boolean;\n  }) {\n    const { roomId, username, isAgent } = payload;",
            "fullText": "    roomId: string;\n    username: string;\n    isAgent?: boolean;\n  }) {\n    const { roomId, username, isAgent } = payload;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ee5295fee4f9d4a16ce1fcda63c264de",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 89-93",
            "startLine": 89,
            "endLine": 93,
            "lines": 5,
            "text": "    username: string;\n    isAgent?: boolean;\n  }) {\n    const { roomId, username, isAgent } = payload;\n",
            "fullText": "    username: string;\n    isAgent?: boolean;\n  }) {\n    const { roomId, username, isAgent } = payload;\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 141-145",
            "startLine": 141,
            "endLine": 145,
            "lines": 5,
            "text": "    username: string;\n    isAgent?: boolean;\n  }) {\n    const { roomId, username, isAgent } = payload;\n",
            "fullText": "    username: string;\n    isAgent?: boolean;\n  }) {\n    const { roomId, username, isAgent } = payload;\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_913bd8ffc00518024a85f9173f8dfc8c",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 90-94",
            "startLine": 90,
            "endLine": 94,
            "lines": 5,
            "text": "    isAgent?: boolean;\n  }) {\n    const { roomId, username, isAgent } = payload;\n\n    // Create or get room",
            "fullText": "    isAgent?: boolean;\n  }) {\n    const { roomId, username, isAgent } = payload;\n\n    // Create or get room",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 142-146",
            "startLine": 142,
            "endLine": 146,
            "lines": 5,
            "text": "    isAgent?: boolean;\n  }) {\n    const { roomId, username, isAgent } = payload;\n\n    // Create or get room",
            "fullText": "    isAgent?: boolean;\n  }) {\n    const { roomId, username, isAgent } = payload;\n\n    // Create or get room",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_812193774372ffd0c74bc78c8ac63c82",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 96-100",
            "startLine": 96,
            "endLine": 100,
            "lines": 5,
            "text": "    if (!room) {\n      room = {\n        id: roomId,\n        name: `Room ${roomId}`,\n        users: [],",
            "fullText": "    if (!room) {\n      room = {\n        id: roomId,\n        name: `Room ${roomId}`,\n        users: [],",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 148-152",
            "startLine": 148,
            "endLine": 152,
            "lines": 5,
            "text": "    if (!room) {\n      room = {\n        id: roomId,\n        name: `Room ${roomId}`,\n        users: [],",
            "fullText": "    if (!room) {\n      room = {\n        id: roomId,\n        name: `Room ${roomId}`,\n        users: [],",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_272d9b5d7bbf99442696c4382d6fa415",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 97-101",
            "startLine": 97,
            "endLine": 101,
            "lines": 5,
            "text": "      room = {\n        id: roomId,\n        name: `Room ${roomId}`,\n        users: [],\n        messages: [],",
            "fullText": "      room = {\n        id: roomId,\n        name: `Room ${roomId}`,\n        users: [],\n        messages: [],",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 149-153",
            "startLine": 149,
            "endLine": 153,
            "lines": 5,
            "text": "      room = {\n        id: roomId,\n        name: `Room ${roomId}`,\n        users: [],\n        messages: [],",
            "fullText": "      room = {\n        id: roomId,\n        name: `Room ${roomId}`,\n        users: [],\n        messages: [],",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_d7f8d60236ba394b409b8b523edfd940",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 98-102",
            "startLine": 98,
            "endLine": 102,
            "lines": 5,
            "text": "        id: roomId,\n        name: `Room ${roomId}`,\n        users: [],\n        messages: [],\n        createdAt: new Date()",
            "fullText": "        id: roomId,\n        name: `Room ${roomId}`,\n        users: [],\n        messages: [],\n        createdAt: new Date()",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 150-154",
            "startLine": 150,
            "endLine": 154,
            "lines": 5,
            "text": "        id: roomId,\n        name: `Room ${roomId}`,\n        users: [],\n        messages: [],\n        createdAt: new Date()",
            "fullText": "        id: roomId,\n        name: `Room ${roomId}`,\n        users: [],\n        messages: [],\n        createdAt: new Date()",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_89ce453e250ffcfe696ad53e8cf4f2ca",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 99-103",
            "startLine": 99,
            "endLine": 103,
            "lines": 5,
            "text": "        name: `Room ${roomId}`,\n        users: [],\n        messages: [],\n        createdAt: new Date()\n      };",
            "fullText": "        name: `Room ${roomId}`,\n        users: [],\n        messages: [],\n        createdAt: new Date()\n      };",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 151-155",
            "startLine": 151,
            "endLine": 155,
            "lines": 5,
            "text": "        name: `Room ${roomId}`,\n        users: [],\n        messages: [],\n        createdAt: new Date()\n      };",
            "fullText": "        name: `Room ${roomId}`,\n        users: [],\n        messages: [],\n        createdAt: new Date()\n      };",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6f871d291fa579467673eb460d2e70c8",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 109-113",
            "startLine": 109,
            "endLine": 113,
            "lines": 5,
            "text": "    const user: User = {\n      id: clientId,\n      username,\n      isAgent,\n      joinedAt: new Date()",
            "fullText": "    const user: User = {\n      id: clientId,\n      username,\n      isAgent,\n      joinedAt: new Date()",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 172-176",
            "startLine": 172,
            "endLine": 176,
            "lines": 5,
            "text": "    const user: User = {\n      id: clientId,\n      username,\n      isAgent,\n      joinedAt: new Date()",
            "fullText": "    const user: User = {\n      id: clientId,\n      username,\n      isAgent,\n      joinedAt: new Date()",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c0118e1394cb007c754c4dded4521a8f",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 113-117",
            "startLine": 113,
            "endLine": 117,
            "lines": 5,
            "text": "      joinedAt: new Date()\n    };\n\n    // Store client connection\n    this.clients.set(clientId, { ws, user, roomId });",
            "fullText": "      joinedAt: new Date()\n    };\n\n    // Store client connection\n    this.clients.set(clientId, { ws, user, roomId });",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 176-180",
            "startLine": 176,
            "endLine": 180,
            "lines": 5,
            "text": "      joinedAt: new Date()\n    };\n\n    // Store client connection\n    this.clients.set(clientId, { ws, user, roomId });",
            "fullText": "      joinedAt: new Date()\n    };\n\n    // Store client connection\n    this.clients.set(clientId, { ws, user, roomId });",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_73f26e955d5530fdb706ea7e8683da74",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 122-126",
            "startLine": 122,
            "endLine": 126,
            "lines": 5,
            "text": "    // Set coordinator if agent\n    if (isAgent && !room.coordinator) {\n      room.coordinator = user;\n      console.log(`[Server] ${username} is now room coordinator`);\n    }",
            "fullText": "    // Set coordinator if agent\n    if (isAgent && !room.coordinator) {\n      room.coordinator = user;\n      console.log(`[Server] ${username} is now room coordinator`);\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 123-127",
            "startLine": 123,
            "endLine": 127,
            "lines": 5,
            "text": "    if (isAgent && !room.coordinator) {\n      room.coordinator = user;\n      console.log(`[Server] ${username} is now room coordinator`);\n    }\n",
            "fullText": "    if (isAgent && !room.coordinator) {\n      room.coordinator = user;\n      console.log(`[Server] ${username} is now room coordinator`);\n    }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c744df5a3071cf5991333edd01677510",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 124-128",
            "startLine": 124,
            "endLine": 128,
            "lines": 5,
            "text": "      room.coordinator = user;\n      console.log(`[Server] ${username} is now room coordinator`);\n    }\n\n    // Send room state to joining user",
            "fullText": "      room.coordinator = user;\n      console.log(`[Server] ${username} is now room coordinator`);\n    }\n\n    // Send room state to joining user",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 187-191",
            "startLine": 187,
            "endLine": 191,
            "lines": 5,
            "text": "      room.coordinator = user;\n      console.log(`[Server] ${username} is now room coordinator`);\n    }\n\n    // Send room state to joining user",
            "fullText": "      room.coordinator = user;\n      console.log(`[Server] ${username} is now room coordinator`);\n    }\n\n    // Send room state to joining user",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ccbdce0ea7246e5c990cdc0b31d5afbc",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 125-129",
            "startLine": 125,
            "endLine": 129,
            "lines": 5,
            "text": "      console.log(`[Server] ${username} is now room coordinator`);\n    }\n\n    // Send room state to joining user\n    this.sendToClient(ws, {",
            "fullText": "      console.log(`[Server] ${username} is now room coordinator`);\n    }\n\n    // Send room state to joining user\n    this.sendToClient(ws, {",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 188-192",
            "startLine": 188,
            "endLine": 192,
            "lines": 5,
            "text": "      console.log(`[Server] ${username} is now room coordinator`);\n    }\n\n    // Send room state to joining user\n    this.sendToClient(ws, {",
            "fullText": "      console.log(`[Server] ${username} is now room coordinator`);\n    }\n\n    // Send room state to joining user\n    this.sendToClient(ws, {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6ab404c9468921319d72003b031a98ba",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 126-130",
            "startLine": 126,
            "endLine": 130,
            "lines": 5,
            "text": "    }\n\n    // Send room state to joining user\n    this.sendToClient(ws, {\n      type: WSEventType.ROOM_STATE,",
            "fullText": "    }\n\n    // Send room state to joining user\n    this.sendToClient(ws, {\n      type: WSEventType.ROOM_STATE,",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 189-193",
            "startLine": 189,
            "endLine": 193,
            "lines": 5,
            "text": "    }\n\n    // Send room state to joining user\n    this.sendToClient(ws, {\n      type: WSEventType.ROOM_STATE,",
            "fullText": "    }\n\n    // Send room state to joining user\n    this.sendToClient(ws, {\n      type: WSEventType.ROOM_STATE,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_d319ac3966625b4109d6ff5aac6aea2d",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 134-138",
            "startLine": 134,
            "endLine": 138,
            "lines": 5,
            "text": "\n    // Notify other users\n    const joinMessage: Message = {\n      id: uuidv4(),\n      userId: 'system',",
            "fullText": "\n    // Notify other users\n    const joinMessage: Message = {\n      id: uuidv4(),\n      userId: 'system',",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 201-205",
            "startLine": 201,
            "endLine": 205,
            "lines": 5,
            "text": "\n    // Notify other users\n    const joinMessage: Message = {\n      id: uuidv4(),\n      userId: 'system',",
            "fullText": "\n    // Notify other users\n    const joinMessage: Message = {\n      id: uuidv4(),\n      userId: 'system',",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b3edbd92112e1bd6ea31009e534aa7c1",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 135-139",
            "startLine": 135,
            "endLine": 139,
            "lines": 5,
            "text": "    // Notify other users\n    const joinMessage: Message = {\n      id: uuidv4(),\n      userId: 'system',\n      username: 'System',",
            "fullText": "    // Notify other users\n    const joinMessage: Message = {\n      id: uuidv4(),\n      userId: 'system',\n      username: 'System',",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 202-206",
            "startLine": 202,
            "endLine": 206,
            "lines": 5,
            "text": "    // Notify other users\n    const joinMessage: Message = {\n      id: uuidv4(),\n      userId: 'system',\n      username: 'System',",
            "fullText": "    // Notify other users\n    const joinMessage: Message = {\n      id: uuidv4(),\n      userId: 'system',\n      username: 'System',",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_de57abe783e9e9e9baffb1ddc58df938",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 141-145",
            "startLine": 141,
            "endLine": 145,
            "lines": 5,
            "text": "      timestamp: new Date(),\n      type: MessageType.USER_JOINED\n    };\n    room.messages.push(joinMessage);\n",
            "fullText": "      timestamp: new Date(),\n      type: MessageType.USER_JOINED\n    };\n    room.messages.push(joinMessage);\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 208-212",
            "startLine": 208,
            "endLine": 212,
            "lines": 5,
            "text": "      timestamp: new Date(),\n      type: MessageType.USER_JOINED\n    };\n    room.messages.push(joinMessage);\n",
            "fullText": "      timestamp: new Date(),\n      type: MessageType.USER_JOINED\n    };\n    room.messages.push(joinMessage);\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ecd21962749b51fe7faaf907452ca3f9",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 142-146",
            "startLine": 142,
            "endLine": 146,
            "lines": 5,
            "text": "      type: MessageType.USER_JOINED\n    };\n    room.messages.push(joinMessage);\n\n    this.broadcastToRoom(roomId, {",
            "fullText": "      type: MessageType.USER_JOINED\n    };\n    room.messages.push(joinMessage);\n\n    this.broadcastToRoom(roomId, {",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 209-213",
            "startLine": 209,
            "endLine": 213,
            "lines": 5,
            "text": "      type: MessageType.USER_JOINED\n    };\n    room.messages.push(joinMessage);\n\n    this.broadcastToRoom(roomId, {",
            "fullText": "      type: MessageType.USER_JOINED\n    };\n    room.messages.push(joinMessage);\n\n    this.broadcastToRoom(roomId, {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b0a666d1810aff5209a457d0f824892c",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 143-147",
            "startLine": 143,
            "endLine": 147,
            "lines": 5,
            "text": "    };\n    room.messages.push(joinMessage);\n\n    this.broadcastToRoom(roomId, {\n      type: WSEventType.USER_JOINED,",
            "fullText": "    };\n    room.messages.push(joinMessage);\n\n    this.broadcastToRoom(roomId, {\n      type: WSEventType.USER_JOINED,",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 210-214",
            "startLine": 210,
            "endLine": 214,
            "lines": 5,
            "text": "    };\n    room.messages.push(joinMessage);\n\n    this.broadcastToRoom(roomId, {\n      type: WSEventType.USER_JOINED,",
            "fullText": "    };\n    room.messages.push(joinMessage);\n\n    this.broadcastToRoom(roomId, {\n      type: WSEventType.USER_JOINED,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_eef380c8b20c8316b81622a8bc7a3753",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 144-148",
            "startLine": 144,
            "endLine": 148,
            "lines": 5,
            "text": "    room.messages.push(joinMessage);\n\n    this.broadcastToRoom(roomId, {\n      type: WSEventType.USER_JOINED,\n      payload: { user, message: joinMessage },",
            "fullText": "    room.messages.push(joinMessage);\n\n    this.broadcastToRoom(roomId, {\n      type: WSEventType.USER_JOINED,\n      payload: { user, message: joinMessage },",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 211-215",
            "startLine": 211,
            "endLine": 215,
            "lines": 5,
            "text": "    room.messages.push(joinMessage);\n\n    this.broadcastToRoom(roomId, {\n      type: WSEventType.USER_JOINED,\n      payload: { user, message: joinMessage },",
            "fullText": "    room.messages.push(joinMessage);\n\n    this.broadcastToRoom(roomId, {\n      type: WSEventType.USER_JOINED,\n      payload: { user, message: joinMessage },",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_4845ab738f13915e1699cc30b19c32f7",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 145-149",
            "startLine": 145,
            "endLine": 149,
            "lines": 5,
            "text": "\n    this.broadcastToRoom(roomId, {\n      type: WSEventType.USER_JOINED,\n      payload: { user, message: joinMessage },\n      timestamp: new Date()",
            "fullText": "\n    this.broadcastToRoom(roomId, {\n      type: WSEventType.USER_JOINED,\n      payload: { user, message: joinMessage },\n      timestamp: new Date()",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 212-216",
            "startLine": 212,
            "endLine": 216,
            "lines": 5,
            "text": "\n    this.broadcastToRoom(roomId, {\n      type: WSEventType.USER_JOINED,\n      payload: { user, message: joinMessage },\n      timestamp: new Date()",
            "fullText": "\n    this.broadcastToRoom(roomId, {\n      type: WSEventType.USER_JOINED,\n      payload: { user, message: joinMessage },\n      timestamp: new Date()",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_2aa41ca11b1ab10d475023824654a695",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 146-150",
            "startLine": 146,
            "endLine": 150,
            "lines": 5,
            "text": "    this.broadcastToRoom(roomId, {\n      type: WSEventType.USER_JOINED,\n      payload: { user, message: joinMessage },\n      timestamp: new Date()\n    }, clientId);",
            "fullText": "    this.broadcastToRoom(roomId, {\n      type: WSEventType.USER_JOINED,\n      payload: { user, message: joinMessage },\n      timestamp: new Date()\n    }, clientId);",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 213-217",
            "startLine": 213,
            "endLine": 217,
            "lines": 5,
            "text": "    this.broadcastToRoom(roomId, {\n      type: WSEventType.USER_JOINED,\n      payload: { user, message: joinMessage },\n      timestamp: new Date()\n    }, clientId);",
            "fullText": "    this.broadcastToRoom(roomId, {\n      type: WSEventType.USER_JOINED,\n      payload: { user, message: joinMessage },\n      timestamp: new Date()\n    }, clientId);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_90cded895768c178d2d67b9a8e0e0d99",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 147-151",
            "startLine": 147,
            "endLine": 151,
            "lines": 5,
            "text": "      type: WSEventType.USER_JOINED,\n      payload: { user, message: joinMessage },\n      timestamp: new Date()\n    }, clientId);\n",
            "fullText": "      type: WSEventType.USER_JOINED,\n      payload: { user, message: joinMessage },\n      timestamp: new Date()\n    }, clientId);\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 214-218",
            "startLine": 214,
            "endLine": 218,
            "lines": 5,
            "text": "      type: WSEventType.USER_JOINED,\n      payload: { user, message: joinMessage },\n      timestamp: new Date()\n    }, clientId);\n",
            "fullText": "      type: WSEventType.USER_JOINED,\n      payload: { user, message: joinMessage },\n      timestamp: new Date()\n    }, clientId);\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_1f484c304adcafd7d7f7f7debbc81b98",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 148-152",
            "startLine": 148,
            "endLine": 152,
            "lines": 5,
            "text": "      payload: { user, message: joinMessage },\n      timestamp: new Date()\n    }, clientId);\n\n    console.log(`[Server] ${username} joined room ${roomId}`);",
            "fullText": "      payload: { user, message: joinMessage },\n      timestamp: new Date()\n    }, clientId);\n\n    console.log(`[Server] ${username} joined room ${roomId}`);",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 215-219",
            "startLine": 215,
            "endLine": 219,
            "lines": 5,
            "text": "      payload: { user, message: joinMessage },\n      timestamp: new Date()\n    }, clientId);\n\n    console.log(`[Server] ${username} joined room ${roomId}`);",
            "fullText": "      payload: { user, message: joinMessage },\n      timestamp: new Date()\n    }, clientId);\n\n    console.log(`[Server] ${username} joined room ${roomId}`);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_bc7dee21d7bd28f90487f707cdb03e6c",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 149-153",
            "startLine": 149,
            "endLine": 153,
            "lines": 5,
            "text": "      timestamp: new Date()\n    }, clientId);\n\n    console.log(`[Server] ${username} joined room ${roomId}`);\n  }",
            "fullText": "      timestamp: new Date()\n    }, clientId);\n\n    console.log(`[Server] ${username} joined room ${roomId}`);\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 216-220",
            "startLine": 216,
            "endLine": 220,
            "lines": 5,
            "text": "      timestamp: new Date()\n    }, clientId);\n\n    console.log(`[Server] ${username} joined room ${roomId}`);\n  }",
            "fullText": "      timestamp: new Date()\n    }, clientId);\n\n    console.log(`[Server] ${username} joined room ${roomId}`);\n  }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_be94a0879ba91f213db41e7a5ad30693",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 150-154",
            "startLine": 150,
            "endLine": 154,
            "lines": 5,
            "text": "    }, clientId);\n\n    console.log(`[Server] ${username} joined room ${roomId}`);\n  }\n",
            "fullText": "    }, clientId);\n\n    console.log(`[Server] ${username} joined room ${roomId}`);\n  }\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 217-221",
            "startLine": 217,
            "endLine": 221,
            "lines": 5,
            "text": "    }, clientId);\n\n    console.log(`[Server] ${username} joined room ${roomId}`);\n  }\n",
            "fullText": "    }, clientId);\n\n    console.log(`[Server] ${username} joined room ${roomId}`);\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_7166de964d78642fb46c13497325a5d7",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 151-155",
            "startLine": 151,
            "endLine": 155,
            "lines": 5,
            "text": "\n    console.log(`[Server] ${username} joined room ${roomId}`);\n  }\n\n  private handleSendMessage(clientId: string, payload: {",
            "fullText": "\n    console.log(`[Server] ${username} joined room ${roomId}`);\n  }\n\n  private handleSendMessage(clientId: string, payload: {",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 218-222",
            "startLine": 218,
            "endLine": 222,
            "lines": 5,
            "text": "\n    console.log(`[Server] ${username} joined room ${roomId}`);\n  }\n\n  private handleSendMessage(clientId: string, payload: {",
            "fullText": "\n    console.log(`[Server] ${username} joined room ${roomId}`);\n  }\n\n  private handleSendMessage(clientId: string, payload: {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3f781cbf9a68ddcaa6385c7cdaea5c3c",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 152-156",
            "startLine": 152,
            "endLine": 156,
            "lines": 5,
            "text": "    console.log(`[Server] ${username} joined room ${roomId}`);\n  }\n\n  private handleSendMessage(clientId: string, payload: {\n    content: string;",
            "fullText": "    console.log(`[Server] ${username} joined room ${roomId}`);\n  }\n\n  private handleSendMessage(clientId: string, payload: {\n    content: string;",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 219-223",
            "startLine": 219,
            "endLine": 223,
            "lines": 5,
            "text": "    console.log(`[Server] ${username} joined room ${roomId}`);\n  }\n\n  private handleSendMessage(clientId: string, payload: {\n    content: string;",
            "fullText": "    console.log(`[Server] ${username} joined room ${roomId}`);\n  }\n\n  private handleSendMessage(clientId: string, payload: {\n    content: string;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9bc86bb307f429dbaa6ced82009357da",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 153-157",
            "startLine": 153,
            "endLine": 157,
            "lines": 5,
            "text": "  }\n\n  private handleSendMessage(clientId: string, payload: {\n    content: string;\n  }) {",
            "fullText": "  }\n\n  private handleSendMessage(clientId: string, payload: {\n    content: string;\n  }) {",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 220-224",
            "startLine": 220,
            "endLine": 224,
            "lines": 5,
            "text": "  }\n\n  private handleSendMessage(clientId: string, payload: {\n    content: string;\n  }) {",
            "fullText": "  }\n\n  private handleSendMessage(clientId: string, payload: {\n    content: string;\n  }) {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_03727931d54b9d5a3c30d62df0abc213",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 154-158",
            "startLine": 154,
            "endLine": 158,
            "lines": 5,
            "text": "\n  private handleSendMessage(clientId: string, payload: {\n    content: string;\n  }) {\n    const client = this.clients.get(clientId);",
            "fullText": "\n  private handleSendMessage(clientId: string, payload: {\n    content: string;\n  }) {\n    const client = this.clients.get(clientId);",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 221-225",
            "startLine": 221,
            "endLine": 225,
            "lines": 5,
            "text": "\n  private handleSendMessage(clientId: string, payload: {\n    content: string;\n  }) {\n    const client = this.clients.get(clientId);",
            "fullText": "\n  private handleSendMessage(clientId: string, payload: {\n    content: string;\n  }) {\n    const client = this.clients.get(clientId);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_d0a18c00deb15c520887507fd46a752a",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 155-159",
            "startLine": 155,
            "endLine": 159,
            "lines": 5,
            "text": "  private handleSendMessage(clientId: string, payload: {\n    content: string;\n  }) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) {",
            "fullText": "  private handleSendMessage(clientId: string, payload: {\n    content: string;\n  }) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) {",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 222-226",
            "startLine": 222,
            "endLine": 226,
            "lines": 5,
            "text": "  private handleSendMessage(clientId: string, payload: {\n    content: string;\n  }) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) {",
            "fullText": "  private handleSendMessage(clientId: string, payload: {\n    content: string;\n  }) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6b773a2a77d34ba3f599d4235090fbd0",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 156-160",
            "startLine": 156,
            "endLine": 160,
            "lines": 5,
            "text": "    content: string;\n  }) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) {\n      console.error(`[Server] Client ${clientId} not in a room`);",
            "fullText": "    content: string;\n  }) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) {\n      console.error(`[Server] Client ${clientId} not in a room`);",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 223-227",
            "startLine": 223,
            "endLine": 227,
            "lines": 5,
            "text": "    content: string;\n  }) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) {\n      console.error(`[Server] Client ${clientId} not in a room`);",
            "fullText": "    content: string;\n  }) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) {\n      console.error(`[Server] Client ${clientId} not in a room`);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_222ff0020b5e61b798d03b51775abf09",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 157-161",
            "startLine": 157,
            "endLine": 161,
            "lines": 5,
            "text": "  }) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) {\n      console.error(`[Server] Client ${clientId} not in a room`);\n      return;",
            "fullText": "  }) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) {\n      console.error(`[Server] Client ${clientId} not in a room`);\n      return;",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 224-228",
            "startLine": 224,
            "endLine": 228,
            "lines": 5,
            "text": "  }) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) {\n      console.error(`[Server] Client ${clientId} not in a room`);\n      return;",
            "fullText": "  }) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) {\n      console.error(`[Server] Client ${clientId} not in a room`);\n      return;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_76e77332b62ee2db8ea6aea52e332247",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 158-162",
            "startLine": 158,
            "endLine": 162,
            "lines": 5,
            "text": "    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) {\n      console.error(`[Server] Client ${clientId} not in a room`);\n      return;\n    }",
            "fullText": "    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) {\n      console.error(`[Server] Client ${clientId} not in a room`);\n      return;\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 225-229",
            "startLine": 225,
            "endLine": 229,
            "lines": 5,
            "text": "    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) {\n      console.error(`[Server] Client ${clientId} not in a room`);\n      return;\n    }",
            "fullText": "    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) {\n      console.error(`[Server] Client ${clientId} not in a room`);\n      return;\n    }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ccab0494f40f1d979beca6fa578f49ff",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 159-163",
            "startLine": 159,
            "endLine": 163,
            "lines": 5,
            "text": "    if (!client || !client.roomId) {\n      console.error(`[Server] Client ${clientId} not in a room`);\n      return;\n    }\n",
            "fullText": "    if (!client || !client.roomId) {\n      console.error(`[Server] Client ${clientId} not in a room`);\n      return;\n    }\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 226-230",
            "startLine": 226,
            "endLine": 230,
            "lines": 5,
            "text": "    if (!client || !client.roomId) {\n      console.error(`[Server] Client ${clientId} not in a room`);\n      return;\n    }\n",
            "fullText": "    if (!client || !client.roomId) {\n      console.error(`[Server] Client ${clientId} not in a room`);\n      return;\n    }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ac805af5a23cad3be8c7295cad273edf",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 165-169",
            "startLine": 165,
            "endLine": 169,
            "lines": 5,
            "text": "    if (!room) return;\n\n    const message: Message = {\n      id: uuidv4(),\n      userId: client.user.id,",
            "fullText": "    if (!room) return;\n\n    const message: Message = {\n      id: uuidv4(),\n      userId: client.user.id,",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 232-236",
            "startLine": 232,
            "endLine": 236,
            "lines": 5,
            "text": "    if (!room) return;\n\n    const message: Message = {\n      id: uuidv4(),\n      userId: client.user.id,",
            "fullText": "    if (!room) return;\n\n    const message: Message = {\n      id: uuidv4(),\n      userId: client.user.id,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_00e448ee34041df893d8d3322e3eb8ae",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 166-170",
            "startLine": 166,
            "endLine": 170,
            "lines": 5,
            "text": "\n    const message: Message = {\n      id: uuidv4(),\n      userId: client.user.id,\n      username: client.user.username,",
            "fullText": "\n    const message: Message = {\n      id: uuidv4(),\n      userId: client.user.id,\n      username: client.user.username,",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 233-237",
            "startLine": 233,
            "endLine": 237,
            "lines": 5,
            "text": "\n    const message: Message = {\n      id: uuidv4(),\n      userId: client.user.id,\n      username: client.user.username,",
            "fullText": "\n    const message: Message = {\n      id: uuidv4(),\n      userId: client.user.id,\n      username: client.user.username,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_037dceb042de62e0377438bf40c9b1dc",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 167-171",
            "startLine": 167,
            "endLine": 171,
            "lines": 5,
            "text": "    const message: Message = {\n      id: uuidv4(),\n      userId: client.user.id,\n      username: client.user.username,\n      content: payload.content,",
            "fullText": "    const message: Message = {\n      id: uuidv4(),\n      userId: client.user.id,\n      username: client.user.username,\n      content: payload.content,",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 234-238",
            "startLine": 234,
            "endLine": 238,
            "lines": 5,
            "text": "    const message: Message = {\n      id: uuidv4(),\n      userId: client.user.id,\n      username: client.user.username,\n      content: payload.content,",
            "fullText": "    const message: Message = {\n      id: uuidv4(),\n      userId: client.user.id,\n      username: client.user.username,\n      content: payload.content,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ce2df317f664a00d52b51aa4033cf9b7",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 168-172",
            "startLine": 168,
            "endLine": 172,
            "lines": 5,
            "text": "      id: uuidv4(),\n      userId: client.user.id,\n      username: client.user.username,\n      content: payload.content,\n      timestamp: new Date(),",
            "fullText": "      id: uuidv4(),\n      userId: client.user.id,\n      username: client.user.username,\n      content: payload.content,\n      timestamp: new Date(),",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 235-239",
            "startLine": 235,
            "endLine": 239,
            "lines": 5,
            "text": "      id: uuidv4(),\n      userId: client.user.id,\n      username: client.user.username,\n      content: payload.content,\n      timestamp: new Date(),",
            "fullText": "      id: uuidv4(),\n      userId: client.user.id,\n      username: client.user.username,\n      content: payload.content,\n      timestamp: new Date(),",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3a129ce7bcb4560ddb887d02165c5264",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 169-173",
            "startLine": 169,
            "endLine": 173,
            "lines": 5,
            "text": "      userId: client.user.id,\n      username: client.user.username,\n      content: payload.content,\n      timestamp: new Date(),\n      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageTy...",
            "fullText": "      userId: client.user.id,\n      username: client.user.username,\n      content: payload.content,\n      timestamp: new Date(),\n      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageType.USER_MESSAGE",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 236-240",
            "startLine": 236,
            "endLine": 240,
            "lines": 5,
            "text": "      userId: client.user.id,\n      username: client.user.username,\n      content: payload.content,\n      timestamp: new Date(),\n      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageTy...",
            "fullText": "      userId: client.user.id,\n      username: client.user.username,\n      content: payload.content,\n      timestamp: new Date(),\n      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageType.USER_MESSAGE",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_29b152838cab155ae0464d6e0bfe39e7",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 170-174",
            "startLine": 170,
            "endLine": 174,
            "lines": 5,
            "text": "      username: client.user.username,\n      content: payload.content,\n      timestamp: new Date(),\n      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageType.USER_MESSAGE\n    };",
            "fullText": "      username: client.user.username,\n      content: payload.content,\n      timestamp: new Date(),\n      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageType.USER_MESSAGE\n    };",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 237-241",
            "startLine": 237,
            "endLine": 241,
            "lines": 5,
            "text": "      username: client.user.username,\n      content: payload.content,\n      timestamp: new Date(),\n      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageType.USER_MESSAGE\n    };",
            "fullText": "      username: client.user.username,\n      content: payload.content,\n      timestamp: new Date(),\n      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageType.USER_MESSAGE\n    };",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_116b40c5e82958dc62e60914292ec080",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 171-175",
            "startLine": 171,
            "endLine": 175,
            "lines": 5,
            "text": "      content: payload.content,\n      timestamp: new Date(),\n      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageType.USER_MESSAGE\n    };\n",
            "fullText": "      content: payload.content,\n      timestamp: new Date(),\n      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageType.USER_MESSAGE\n    };\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 238-242",
            "startLine": 238,
            "endLine": 242,
            "lines": 5,
            "text": "      content: payload.content,\n      timestamp: new Date(),\n      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageType.USER_MESSAGE\n    };\n",
            "fullText": "      content: payload.content,\n      timestamp: new Date(),\n      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageType.USER_MESSAGE\n    };\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_2e4106f623ff880df6609635991848bb",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 172-176",
            "startLine": 172,
            "endLine": 176,
            "lines": 5,
            "text": "      timestamp: new Date(),\n      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageType.USER_MESSAGE\n    };\n\n    room.messages.push(message);",
            "fullText": "      timestamp: new Date(),\n      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageType.USER_MESSAGE\n    };\n\n    room.messages.push(message);",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 239-243",
            "startLine": 239,
            "endLine": 243,
            "lines": 5,
            "text": "      timestamp: new Date(),\n      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageType.USER_MESSAGE\n    };\n\n    room.messages.push(message);",
            "fullText": "      timestamp: new Date(),\n      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageType.USER_MESSAGE\n    };\n\n    room.messages.push(message);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_372b899a5577e94438d5c45e4aff3206",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 173-177",
            "startLine": 173,
            "endLine": 177,
            "lines": 5,
            "text": "      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageType.USER_MESSAGE\n    };\n\n    room.messages.push(message);\n",
            "fullText": "      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageType.USER_MESSAGE\n    };\n\n    room.messages.push(message);\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 240-244",
            "startLine": 240,
            "endLine": 244,
            "lines": 5,
            "text": "      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageType.USER_MESSAGE\n    };\n\n    room.messages.push(message);\n",
            "fullText": "      type: client.user.isAgent ? MessageType.AGENT_MESSAGE : MessageType.USER_MESSAGE\n    };\n\n    room.messages.push(message);\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_4952108e7b2cf0b758534812c1f764b3",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 175-179",
            "startLine": 175,
            "endLine": 179,
            "lines": 5,
            "text": "\n    room.messages.push(message);\n\n    // Broadcast to all users in room\n    this.broadcastToRoom(client.roomId, {",
            "fullText": "\n    room.messages.push(message);\n\n    // Broadcast to all users in room\n    this.broadcastToRoom(client.roomId, {",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 242-246",
            "startLine": 242,
            "endLine": 246,
            "lines": 5,
            "text": "\n    room.messages.push(message);\n\n    // Broadcast to all users in room\n    this.broadcastToRoom(client.roomId, {",
            "fullText": "\n    room.messages.push(message);\n\n    // Broadcast to all users in room\n    this.broadcastToRoom(client.roomId, {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_de7aaf728e0b5cc972b98a0c4604a18d",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 176-180",
            "startLine": 176,
            "endLine": 180,
            "lines": 5,
            "text": "    room.messages.push(message);\n\n    // Broadcast to all users in room\n    this.broadcastToRoom(client.roomId, {\n      type: WSEventType.NEW_MESSAGE,",
            "fullText": "    room.messages.push(message);\n\n    // Broadcast to all users in room\n    this.broadcastToRoom(client.roomId, {\n      type: WSEventType.NEW_MESSAGE,",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 243-247",
            "startLine": 243,
            "endLine": 247,
            "lines": 5,
            "text": "    room.messages.push(message);\n\n    // Broadcast to all users in room\n    this.broadcastToRoom(client.roomId, {\n      type: WSEventType.NEW_MESSAGE,",
            "fullText": "    room.messages.push(message);\n\n    // Broadcast to all users in room\n    this.broadcastToRoom(client.roomId, {\n      type: WSEventType.NEW_MESSAGE,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_dd999e6a2e23d2de63c4088caff2656d",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 177-181",
            "startLine": 177,
            "endLine": 181,
            "lines": 5,
            "text": "\n    // Broadcast to all users in room\n    this.broadcastToRoom(client.roomId, {\n      type: WSEventType.NEW_MESSAGE,\n      payload: message,",
            "fullText": "\n    // Broadcast to all users in room\n    this.broadcastToRoom(client.roomId, {\n      type: WSEventType.NEW_MESSAGE,\n      payload: message,",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 244-248",
            "startLine": 244,
            "endLine": 248,
            "lines": 5,
            "text": "\n    // Broadcast to all users in room\n    this.broadcastToRoom(client.roomId, {\n      type: WSEventType.NEW_MESSAGE,\n      payload: message,",
            "fullText": "\n    // Broadcast to all users in room\n    this.broadcastToRoom(client.roomId, {\n      type: WSEventType.NEW_MESSAGE,\n      payload: message,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6b1e2a34d66f6f2b9a3a0da1740924bd",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 178-182",
            "startLine": 178,
            "endLine": 182,
            "lines": 5,
            "text": "    // Broadcast to all users in room\n    this.broadcastToRoom(client.roomId, {\n      type: WSEventType.NEW_MESSAGE,\n      payload: message,\n      timestamp: new Date()",
            "fullText": "    // Broadcast to all users in room\n    this.broadcastToRoom(client.roomId, {\n      type: WSEventType.NEW_MESSAGE,\n      payload: message,\n      timestamp: new Date()",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 245-249",
            "startLine": 245,
            "endLine": 249,
            "lines": 5,
            "text": "    // Broadcast to all users in room\n    this.broadcastToRoom(client.roomId, {\n      type: WSEventType.NEW_MESSAGE,\n      payload: message,\n      timestamp: new Date()",
            "fullText": "    // Broadcast to all users in room\n    this.broadcastToRoom(client.roomId, {\n      type: WSEventType.NEW_MESSAGE,\n      payload: message,\n      timestamp: new Date()",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_41cefdb917ae986b8e4a1eeab769e37f",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 179-183",
            "startLine": 179,
            "endLine": 183,
            "lines": 5,
            "text": "    this.broadcastToRoom(client.roomId, {\n      type: WSEventType.NEW_MESSAGE,\n      payload: message,\n      timestamp: new Date()\n    });",
            "fullText": "    this.broadcastToRoom(client.roomId, {\n      type: WSEventType.NEW_MESSAGE,\n      payload: message,\n      timestamp: new Date()\n    });",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 246-250",
            "startLine": 246,
            "endLine": 250,
            "lines": 5,
            "text": "    this.broadcastToRoom(client.roomId, {\n      type: WSEventType.NEW_MESSAGE,\n      payload: message,\n      timestamp: new Date()\n    });",
            "fullText": "    this.broadcastToRoom(client.roomId, {\n      type: WSEventType.NEW_MESSAGE,\n      payload: message,\n      timestamp: new Date()\n    });",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c1a36e9fa64881ba7524aecf5fdf0de8",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 180-184",
            "startLine": 180,
            "endLine": 184,
            "lines": 5,
            "text": "      type: WSEventType.NEW_MESSAGE,\n      payload: message,\n      timestamp: new Date()\n    });\n",
            "fullText": "      type: WSEventType.NEW_MESSAGE,\n      payload: message,\n      timestamp: new Date()\n    });\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 247-251",
            "startLine": 247,
            "endLine": 251,
            "lines": 5,
            "text": "      type: WSEventType.NEW_MESSAGE,\n      payload: message,\n      timestamp: new Date()\n    });\n",
            "fullText": "      type: WSEventType.NEW_MESSAGE,\n      payload: message,\n      timestamp: new Date()\n    });\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_cf4f74de698b82108e766a868e8a4f34",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 181-185",
            "startLine": 181,
            "endLine": 185,
            "lines": 5,
            "text": "      payload: message,\n      timestamp: new Date()\n    });\n\n    console.log(`[Server] ${client.user.username}: ${payload.content}`);",
            "fullText": "      payload: message,\n      timestamp: new Date()\n    });\n\n    console.log(`[Server] ${client.user.username}: ${payload.content}`);",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 248-252",
            "startLine": 248,
            "endLine": 252,
            "lines": 5,
            "text": "      payload: message,\n      timestamp: new Date()\n    });\n\n    console.log(`[Server] ${client.user.username}: ${payload.content}`);",
            "fullText": "      payload: message,\n      timestamp: new Date()\n    });\n\n    console.log(`[Server] ${client.user.username}: ${payload.content}`);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_7110c321024244332345c1f57145d983",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 182-186",
            "startLine": 182,
            "endLine": 186,
            "lines": 5,
            "text": "      timestamp: new Date()\n    });\n\n    console.log(`[Server] ${client.user.username}: ${payload.content}`);\n  }",
            "fullText": "      timestamp: new Date()\n    });\n\n    console.log(`[Server] ${client.user.username}: ${payload.content}`);\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 249-253",
            "startLine": 249,
            "endLine": 253,
            "lines": 5,
            "text": "      timestamp: new Date()\n    });\n\n    console.log(`[Server] ${client.user.username}: ${payload.content}`);\n  }",
            "fullText": "      timestamp: new Date()\n    });\n\n    console.log(`[Server] ${client.user.username}: ${payload.content}`);\n  }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_eb9bcee4f652e35bf753f14361575106",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 183-187",
            "startLine": 183,
            "endLine": 187,
            "lines": 5,
            "text": "    });\n\n    console.log(`[Server] ${client.user.username}: ${payload.content}`);\n  }\n",
            "fullText": "    });\n\n    console.log(`[Server] ${client.user.username}: ${payload.content}`);\n  }\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 250-254",
            "startLine": 250,
            "endLine": 254,
            "lines": 5,
            "text": "    });\n\n    console.log(`[Server] ${client.user.username}: ${payload.content}`);\n  }\n",
            "fullText": "    });\n\n    console.log(`[Server] ${client.user.username}: ${payload.content}`);\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0561b4e63a109cc9c78c183fed30eb5a",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 184-188",
            "startLine": 184,
            "endLine": 188,
            "lines": 5,
            "text": "\n    console.log(`[Server] ${client.user.username}: ${payload.content}`);\n  }\n\n  private handleCommand(clientId: string, payload: ChatCommand) {",
            "fullText": "\n    console.log(`[Server] ${client.user.username}: ${payload.content}`);\n  }\n\n  private handleCommand(clientId: string, payload: ChatCommand) {",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 251-255",
            "startLine": 251,
            "endLine": 255,
            "lines": 5,
            "text": "\n    console.log(`[Server] ${client.user.username}: ${payload.content}`);\n  }\n\n  private handleCommand(clientId: string, payload: ChatCommand) {",
            "fullText": "\n    console.log(`[Server] ${client.user.username}: ${payload.content}`);\n  }\n\n  private handleCommand(clientId: string, payload: ChatCommand) {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_98a176cb08899b12460f3be31280273f",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 185-189",
            "startLine": 185,
            "endLine": 189,
            "lines": 5,
            "text": "    console.log(`[Server] ${client.user.username}: ${payload.content}`);\n  }\n\n  private handleCommand(clientId: string, payload: ChatCommand) {\n    const client = this.clients.get(clientId);",
            "fullText": "    console.log(`[Server] ${client.user.username}: ${payload.content}`);\n  }\n\n  private handleCommand(clientId: string, payload: ChatCommand) {\n    const client = this.clients.get(clientId);",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 252-256",
            "startLine": 252,
            "endLine": 256,
            "lines": 5,
            "text": "    console.log(`[Server] ${client.user.username}: ${payload.content}`);\n  }\n\n  private handleCommand(clientId: string, payload: ChatCommand) {\n    const client = this.clients.get(clientId);",
            "fullText": "    console.log(`[Server] ${client.user.username}: ${payload.content}`);\n  }\n\n  private handleCommand(clientId: string, payload: ChatCommand) {\n    const client = this.clients.get(clientId);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_037927e4d20c045d8c92160ed98f177f",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 186-190",
            "startLine": 186,
            "endLine": 190,
            "lines": 5,
            "text": "  }\n\n  private handleCommand(clientId: string, payload: ChatCommand) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) return;",
            "fullText": "  }\n\n  private handleCommand(clientId: string, payload: ChatCommand) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) return;",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 253-257",
            "startLine": 253,
            "endLine": 257,
            "lines": 5,
            "text": "  }\n\n  private handleCommand(clientId: string, payload: ChatCommand) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) return;",
            "fullText": "  }\n\n  private handleCommand(clientId: string, payload: ChatCommand) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) return;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a7e3ffab2939dea30548f47996e3e009",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 187-191",
            "startLine": 187,
            "endLine": 191,
            "lines": 5,
            "text": "\n  private handleCommand(clientId: string, payload: ChatCommand) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) return;\n",
            "fullText": "\n  private handleCommand(clientId: string, payload: ChatCommand) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) return;\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 254-258",
            "startLine": 254,
            "endLine": 258,
            "lines": 5,
            "text": "\n  private handleCommand(clientId: string, payload: ChatCommand) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) return;\n",
            "fullText": "\n  private handleCommand(clientId: string, payload: ChatCommand) {\n    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) return;\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9a09f9a3177725b95376bb37a283a665",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 189-193",
            "startLine": 189,
            "endLine": 193,
            "lines": 5,
            "text": "    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) return;\n\n    const room = this.rooms.get(client.roomId);\n    if (!room) return;",
            "fullText": "    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) return;\n\n    const room = this.rooms.get(client.roomId);\n    if (!room) return;",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 328-332",
            "startLine": 328,
            "endLine": 332,
            "lines": 5,
            "text": "    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) return;\n\n    const room = this.rooms.get(client.roomId);\n    if (!room) return;",
            "fullText": "    const client = this.clients.get(clientId);\n    if (!client || !client.roomId) return;\n\n    const room = this.rooms.get(client.roomId);\n    if (!room) return;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_be00aa89798cb744116a23ed5c11dd1f",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 190-194",
            "startLine": 190,
            "endLine": 194,
            "lines": 5,
            "text": "    if (!client || !client.roomId) return;\n\n    const room = this.rooms.get(client.roomId);\n    if (!room) return;\n",
            "fullText": "    if (!client || !client.roomId) return;\n\n    const room = this.rooms.get(client.roomId);\n    if (!room) return;\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 329-333",
            "startLine": 329,
            "endLine": 333,
            "lines": 5,
            "text": "    if (!client || !client.roomId) return;\n\n    const room = this.rooms.get(client.roomId);\n    if (!room) return;\n",
            "fullText": "    if (!client || !client.roomId) return;\n\n    const room = this.rooms.get(client.roomId);\n    if (!room) return;\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_06da6b146d389d19af83ba82bd45662c",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 346-350",
            "startLine": 346,
            "endLine": 350,
            "lines": 5,
            "text": "\n    // Notify others\n    const leaveMessage: Message = {\n      id: uuidv4(),\n      userId: 'system',",
            "fullText": "\n    // Notify others\n    const leaveMessage: Message = {\n      id: uuidv4(),\n      userId: 'system',",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 378-382",
            "startLine": 378,
            "endLine": 382,
            "lines": 5,
            "text": "\n      // Notify others\n      const leaveMessage: Message = {\n        id: uuidv4(),\n        userId: 'system',",
            "fullText": "\n      // Notify others\n      const leaveMessage: Message = {\n        id: uuidv4(),\n        userId: 'system',",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a488cba4aba41ca6c07eb7a0f550f82f",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 347-351",
            "startLine": 347,
            "endLine": 351,
            "lines": 5,
            "text": "    // Notify others\n    const leaveMessage: Message = {\n      id: uuidv4(),\n      userId: 'system',\n      username: 'System',",
            "fullText": "    // Notify others\n    const leaveMessage: Message = {\n      id: uuidv4(),\n      userId: 'system',\n      username: 'System',",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 379-383",
            "startLine": 379,
            "endLine": 383,
            "lines": 5,
            "text": "      // Notify others\n      const leaveMessage: Message = {\n        id: uuidv4(),\n        userId: 'system',\n        username: 'System',",
            "fullText": "      // Notify others\n      const leaveMessage: Message = {\n        id: uuidv4(),\n        userId: 'system',\n        username: 'System',",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_8035c1b85dbce6f9c9a28e7b7116925b",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 353-357",
            "startLine": 353,
            "endLine": 357,
            "lines": 5,
            "text": "      timestamp: new Date(),\n      type: MessageType.USER_LEFT\n    };\n    room.messages.push(leaveMessage);\n",
            "fullText": "      timestamp: new Date(),\n      type: MessageType.USER_LEFT\n    };\n    room.messages.push(leaveMessage);\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 385-389",
            "startLine": 385,
            "endLine": 389,
            "lines": 5,
            "text": "        timestamp: new Date(),\n        type: MessageType.USER_LEFT\n      };\n      room.messages.push(leaveMessage);\n",
            "fullText": "        timestamp: new Date(),\n        type: MessageType.USER_LEFT\n      };\n      room.messages.push(leaveMessage);\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f7bb91699bca48cd07687d1307fc77b1",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 359-363",
            "startLine": 359,
            "endLine": 363,
            "lines": 5,
            "text": "      type: WSEventType.USER_LEFT,\n      payload: { userId: clientId, message: leaveMessage },\n      timestamp: new Date()\n    });\n",
            "fullText": "      type: WSEventType.USER_LEFT,\n      payload: { userId: clientId, message: leaveMessage },\n      timestamp: new Date()\n    });\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 391-395",
            "startLine": 391,
            "endLine": 395,
            "lines": 5,
            "text": "        type: WSEventType.USER_LEFT,\n        payload: { userId: clientId, message: leaveMessage },\n        timestamp: new Date()\n      });\n",
            "fullText": "        type: WSEventType.USER_LEFT,\n        payload: { userId: clientId, message: leaveMessage },\n        timestamp: new Date()\n      });\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a6a5c1451e310f056245affecaea5643",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 360-364",
            "startLine": 360,
            "endLine": 364,
            "lines": 5,
            "text": "      payload: { userId: clientId, message: leaveMessage },\n      timestamp: new Date()\n    });\n\n    // Clean up",
            "fullText": "      payload: { userId: clientId, message: leaveMessage },\n      timestamp: new Date()\n    });\n\n    // Clean up",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 392-396",
            "startLine": 392,
            "endLine": 396,
            "lines": 5,
            "text": "        payload: { userId: clientId, message: leaveMessage },\n        timestamp: new Date()\n      });\n\n      // Clean up empty rooms",
            "fullText": "        payload: { userId: clientId, message: leaveMessage },\n        timestamp: new Date()\n      });\n\n      // Clean up empty rooms",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_10ca2f094bb8ecf71e96003917b621de",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 373-377",
            "startLine": 373,
            "endLine": 377,
            "lines": 5,
            "text": "\n  private handleDisconnect(clientId: string) {\n    console.log(`[Server] Client disconnected: ${clientId}`);\n    this.handleLeaveRoom(clientId);\n  }",
            "fullText": "\n  private handleDisconnect(clientId: string) {\n    console.log(`[Server] Client disconnected: ${clientId}`);\n    this.handleLeaveRoom(clientId);\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 374-378",
            "startLine": 374,
            "endLine": 378,
            "lines": 5,
            "text": "  private handleDisconnect(clientId: string) {\n    console.log(`[Server] Client disconnected: ${clientId}`);\n    this.handleLeaveRoom(clientId);\n  }\n",
            "fullText": "  private handleDisconnect(clientId: string) {\n    console.log(`[Server] Client disconnected: ${clientId}`);\n    this.handleLeaveRoom(clientId);\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_63689e78973c1c0300250e01d86cd99b",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 377-381",
            "startLine": 377,
            "endLine": 381,
            "lines": 5,
            "text": "  }\n\n  private sendToClient(ws: WebSocket, message: WSMessage) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));",
            "fullText": "  }\n\n  private sendToClient(ws: WebSocket, message: WSMessage) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 410-414",
            "startLine": 410,
            "endLine": 414,
            "lines": 5,
            "text": "  }\n\n  private sendToClient(ws: WebSocket, message: WSMessage) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));",
            "fullText": "  }\n\n  private sendToClient(ws: WebSocket, message: WSMessage) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9816210508082555efafc93c2fc23fba",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 378-382",
            "startLine": 378,
            "endLine": 382,
            "lines": 5,
            "text": "\n  private sendToClient(ws: WebSocket, message: WSMessage) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }",
            "fullText": "\n  private sendToClient(ws: WebSocket, message: WSMessage) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 411-415",
            "startLine": 411,
            "endLine": 415,
            "lines": 5,
            "text": "\n  private sendToClient(ws: WebSocket, message: WSMessage) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }",
            "fullText": "\n  private sendToClient(ws: WebSocket, message: WSMessage) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_88454bfe0a83de089c9796a2ce11d657",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 379-383",
            "startLine": 379,
            "endLine": 383,
            "lines": 5,
            "text": "  private sendToClient(ws: WebSocket, message: WSMessage) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  }",
            "fullText": "  private sendToClient(ws: WebSocket, message: WSMessage) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 412-416",
            "startLine": 412,
            "endLine": 416,
            "lines": 5,
            "text": "  private sendToClient(ws: WebSocket, message: WSMessage) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  }",
            "fullText": "  private sendToClient(ws: WebSocket, message: WSMessage) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0dc84fc0a3e64931fce0765b43e34256",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 380-384",
            "startLine": 380,
            "endLine": 384,
            "lines": 5,
            "text": "    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  }\n",
            "fullText": "    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  }\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 413-417",
            "startLine": 413,
            "endLine": 417,
            "lines": 5,
            "text": "    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  }\n",
            "fullText": "    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_d25391b3ac73837174c9e5a0326cf9a4",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 383-387",
            "startLine": 383,
            "endLine": 387,
            "lines": 5,
            "text": "  }\n\n  private broadcastToRoom(roomId: string, message: WSMessage, excludeClientId?: string) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;",
            "fullText": "  }\n\n  private broadcastToRoom(roomId: string, message: WSMessage, excludeClientId?: string) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 424-428",
            "startLine": 424,
            "endLine": 428,
            "lines": 5,
            "text": "  }\n\n  private broadcastToRoom(roomId: string, message: WSMessage, excludeClientId?: string) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;",
            "fullText": "  }\n\n  private broadcastToRoom(roomId: string, message: WSMessage, excludeClientId?: string) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6b73e53b21c0bfe744b666ccb2c80c20",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 384-388",
            "startLine": 384,
            "endLine": 388,
            "lines": 5,
            "text": "\n  private broadcastToRoom(roomId: string, message: WSMessage, excludeClientId?: string) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;\n",
            "fullText": "\n  private broadcastToRoom(roomId: string, message: WSMessage, excludeClientId?: string) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 425-429",
            "startLine": 425,
            "endLine": 429,
            "lines": 5,
            "text": "\n  private broadcastToRoom(roomId: string, message: WSMessage, excludeClientId?: string) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;\n",
            "fullText": "\n  private broadcastToRoom(roomId: string, message: WSMessage, excludeClientId?: string) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_dd27c1b1f9bb370d724a2b3ac843de1f",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 385-389",
            "startLine": 385,
            "endLine": 389,
            "lines": 5,
            "text": "  private broadcastToRoom(roomId: string, message: WSMessage, excludeClientId?: string) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;\n\n    room.users.forEach(user => {",
            "fullText": "  private broadcastToRoom(roomId: string, message: WSMessage, excludeClientId?: string) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;\n\n    room.users.forEach(user => {",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 426-430",
            "startLine": 426,
            "endLine": 430,
            "lines": 5,
            "text": "  private broadcastToRoom(roomId: string, message: WSMessage, excludeClientId?: string) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;\n\n    room.users.forEach(user => {",
            "fullText": "  private broadcastToRoom(roomId: string, message: WSMessage, excludeClientId?: string) {\n    const room = this.rooms.get(roomId);\n    if (!room) return;\n\n    room.users.forEach(user => {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_269a8b1ba6ca673e97349c46b739473f",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 386-390",
            "startLine": 386,
            "endLine": 390,
            "lines": 5,
            "text": "    const room = this.rooms.get(roomId);\n    if (!room) return;\n\n    room.users.forEach(user => {\n      if (user.id !== excludeClientId) {",
            "fullText": "    const room = this.rooms.get(roomId);\n    if (!room) return;\n\n    room.users.forEach(user => {\n      if (user.id !== excludeClientId) {",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 427-431",
            "startLine": 427,
            "endLine": 431,
            "lines": 5,
            "text": "    const room = this.rooms.get(roomId);\n    if (!room) return;\n\n    room.users.forEach(user => {\n      if (user.id !== excludeClientId) {",
            "fullText": "    const room = this.rooms.get(roomId);\n    if (!room) return;\n\n    room.users.forEach(user => {\n      if (user.id !== excludeClientId) {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_952cd70bfc12c4117c4a85ba465a15b7",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 387-391",
            "startLine": 387,
            "endLine": 391,
            "lines": 5,
            "text": "    if (!room) return;\n\n    room.users.forEach(user => {\n      if (user.id !== excludeClientId) {\n        const client = this.clients.get(user.id);",
            "fullText": "    if (!room) return;\n\n    room.users.forEach(user => {\n      if (user.id !== excludeClientId) {\n        const client = this.clients.get(user.id);",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 428-432",
            "startLine": 428,
            "endLine": 432,
            "lines": 5,
            "text": "    if (!room) return;\n\n    room.users.forEach(user => {\n      if (user.id !== excludeClientId) {\n        const client = this.clients.get(user.id);",
            "fullText": "    if (!room) return;\n\n    room.users.forEach(user => {\n      if (user.id !== excludeClientId) {\n        const client = this.clients.get(user.id);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c373b85829ad38c0b789686246a35e22",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 388-392",
            "startLine": 388,
            "endLine": 392,
            "lines": 5,
            "text": "\n    room.users.forEach(user => {\n      if (user.id !== excludeClientId) {\n        const client = this.clients.get(user.id);\n        if (client) {",
            "fullText": "\n    room.users.forEach(user => {\n      if (user.id !== excludeClientId) {\n        const client = this.clients.get(user.id);\n        if (client) {",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 429-433",
            "startLine": 429,
            "endLine": 433,
            "lines": 5,
            "text": "\n    room.users.forEach(user => {\n      if (user.id !== excludeClientId) {\n        const client = this.clients.get(user.id);\n        if (client) {",
            "fullText": "\n    room.users.forEach(user => {\n      if (user.id !== excludeClientId) {\n        const client = this.clients.get(user.id);\n        if (client) {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6048892b669c94c044ed42c04b56f8e6",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 389-393",
            "startLine": 389,
            "endLine": 393,
            "lines": 5,
            "text": "    room.users.forEach(user => {\n      if (user.id !== excludeClientId) {\n        const client = this.clients.get(user.id);\n        if (client) {\n          this.sendToClient(client.ws, message);",
            "fullText": "    room.users.forEach(user => {\n      if (user.id !== excludeClientId) {\n        const client = this.clients.get(user.id);\n        if (client) {\n          this.sendToClient(client.ws, message);",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 430-434",
            "startLine": 430,
            "endLine": 434,
            "lines": 5,
            "text": "    room.users.forEach(user => {\n      if (user.id !== excludeClientId) {\n        const client = this.clients.get(user.id);\n        if (client) {\n          this.sendToClient(client.ws, message);",
            "fullText": "    room.users.forEach(user => {\n      if (user.id !== excludeClientId) {\n        const client = this.clients.get(user.id);\n        if (client) {\n          this.sendToClient(client.ws, message);",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_979878c7c574a61cf0d275fc3416addb",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 390-394",
            "startLine": 390,
            "endLine": 394,
            "lines": 5,
            "text": "      if (user.id !== excludeClientId) {\n        const client = this.clients.get(user.id);\n        if (client) {\n          this.sendToClient(client.ws, message);\n        }",
            "fullText": "      if (user.id !== excludeClientId) {\n        const client = this.clients.get(user.id);\n        if (client) {\n          this.sendToClient(client.ws, message);\n        }",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 431-435",
            "startLine": 431,
            "endLine": 435,
            "lines": 5,
            "text": "      if (user.id !== excludeClientId) {\n        const client = this.clients.get(user.id);\n        if (client) {\n          this.sendToClient(client.ws, message);\n        }",
            "fullText": "      if (user.id !== excludeClientId) {\n        const client = this.clients.get(user.id);\n        if (client) {\n          this.sendToClient(client.ws, message);\n        }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_b50c33d23f5e827b3fa185f59667013d",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 391-395",
            "startLine": 391,
            "endLine": 395,
            "lines": 5,
            "text": "        const client = this.clients.get(user.id);\n        if (client) {\n          this.sendToClient(client.ws, message);\n        }\n      }",
            "fullText": "        const client = this.clients.get(user.id);\n        if (client) {\n          this.sendToClient(client.ws, message);\n        }\n      }",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 432-436",
            "startLine": 432,
            "endLine": 436,
            "lines": 5,
            "text": "        const client = this.clients.get(user.id);\n        if (client) {\n          this.sendToClient(client.ws, message);\n        }\n      }",
            "fullText": "        const client = this.clients.get(user.id);\n        if (client) {\n          this.sendToClient(client.ws, message);\n        }\n      }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_eaf34896a6cf19c108e61718bd81ebde",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 392-396",
            "startLine": 392,
            "endLine": 396,
            "lines": 5,
            "text": "        if (client) {\n          this.sendToClient(client.ws, message);\n        }\n      }\n    });",
            "fullText": "        if (client) {\n          this.sendToClient(client.ws, message);\n        }\n      }\n    });",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 433-437",
            "startLine": 433,
            "endLine": 437,
            "lines": 5,
            "text": "        if (client) {\n          this.sendToClient(client.ws, message);\n        }\n      }\n    });",
            "fullText": "        if (client) {\n          this.sendToClient(client.ws, message);\n        }\n      }\n    });",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_92f95e1976d0d9a9a75c1b6cf7b77641",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 412-416",
            "startLine": 412,
            "endLine": 416,
            "lines": 5,
            "text": "\n  private sendError(ws: WebSocket, error: string) {\n    this.sendToClient(ws, {\n      type: WSEventType.ERROR,\n      payload: { error },",
            "fullText": "\n  private sendError(ws: WebSocket, error: string) {\n    this.sendToClient(ws, {\n      type: WSEventType.ERROR,\n      payload: { error },",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 417-421",
            "startLine": 417,
            "endLine": 421,
            "lines": 5,
            "text": "\n  private sendError(ws: WebSocket, error: string) {\n    this.sendToClient(ws, {\n      type: WSEventType.ERROR,\n      payload: { error },",
            "fullText": "\n  private sendError(ws: WebSocket, error: string) {\n    this.sendToClient(ws, {\n      type: WSEventType.ERROR,\n      payload: { error },",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_63bca857e2476df2dadfd385ed0fc84b",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 413-417",
            "startLine": 413,
            "endLine": 417,
            "lines": 5,
            "text": "  private sendError(ws: WebSocket, error: string) {\n    this.sendToClient(ws, {\n      type: WSEventType.ERROR,\n      payload: { error },\n      timestamp: new Date()",
            "fullText": "  private sendError(ws: WebSocket, error: string) {\n    this.sendToClient(ws, {\n      type: WSEventType.ERROR,\n      payload: { error },\n      timestamp: new Date()",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 418-422",
            "startLine": 418,
            "endLine": 422,
            "lines": 5,
            "text": "  private sendError(ws: WebSocket, error: string) {\n    this.sendToClient(ws, {\n      type: WSEventType.ERROR,\n      payload: { error },\n      timestamp: new Date()",
            "fullText": "  private sendError(ws: WebSocket, error: string) {\n    this.sendToClient(ws, {\n      type: WSEventType.ERROR,\n      payload: { error },\n      timestamp: new Date()",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_371f099894e8aeb2c6cfc98bd3a2d17f",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 414-418",
            "startLine": 414,
            "endLine": 418,
            "lines": 5,
            "text": "    this.sendToClient(ws, {\n      type: WSEventType.ERROR,\n      payload: { error },\n      timestamp: new Date()\n    });",
            "fullText": "    this.sendToClient(ws, {\n      type: WSEventType.ERROR,\n      payload: { error },\n      timestamp: new Date()\n    });",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 419-423",
            "startLine": 419,
            "endLine": 423,
            "lines": 5,
            "text": "    this.sendToClient(ws, {\n      type: WSEventType.ERROR,\n      payload: { error },\n      timestamp: new Date()\n    });",
            "fullText": "    this.sendToClient(ws, {\n      type: WSEventType.ERROR,\n      payload: { error },\n      timestamp: new Date()\n    });",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_55a20635689cc36de987298a5416920a",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 415-419",
            "startLine": 415,
            "endLine": 419,
            "lines": 5,
            "text": "      type: WSEventType.ERROR,\n      payload: { error },\n      timestamp: new Date()\n    });\n  }",
            "fullText": "      type: WSEventType.ERROR,\n      payload: { error },\n      timestamp: new Date()\n    });\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 420-424",
            "startLine": 420,
            "endLine": 424,
            "lines": 5,
            "text": "      type: WSEventType.ERROR,\n      payload: { error },\n      timestamp: new Date()\n    });\n  }",
            "fullText": "      type: WSEventType.ERROR,\n      payload: { error },\n      timestamp: new Date()\n    });\n  }",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_1e9b338965b3351e8f5ef91786708d47",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 423-427",
            "startLine": 423,
            "endLine": 427,
            "lines": 5,
            "text": "    const userMessages = messages.filter(m => \n      m.type === MessageType.USER_MESSAGE || \n      m.type === MessageType.AGENT_MESSAGE\n    );\n",
            "fullText": "    const userMessages = messages.filter(m => \n      m.type === MessageType.USER_MESSAGE || \n      m.type === MessageType.AGENT_MESSAGE\n    );\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 447-451",
            "startLine": 447,
            "endLine": 451,
            "lines": 5,
            "text": "    const userMessages = messages.filter(m => \n      m.type === MessageType.USER_MESSAGE || \n      m.type === MessageType.AGENT_MESSAGE\n    );\n",
            "fullText": "    const userMessages = messages.filter(m => \n      m.type === MessageType.USER_MESSAGE || \n      m.type === MessageType.AGENT_MESSAGE\n    );\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_316f91290edcffb63d3b11a57695ac9a",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 427-431",
            "startLine": 427,
            "endLine": 431,
            "lines": 5,
            "text": "\n    if (userMessages.length === 0) return 'No messages to summarize';\n\n    const topics = new Set<string>();\n    const users = new Set<string>();",
            "fullText": "\n    if (userMessages.length === 0) return 'No messages to summarize';\n\n    const topics = new Set<string>();\n    const users = new Set<string>();",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 428-432",
            "startLine": 428,
            "endLine": 432,
            "lines": 5,
            "text": "    if (userMessages.length === 0) return 'No messages to summarize';\n\n    const topics = new Set<string>();\n    const users = new Set<string>();\n",
            "fullText": "    if (userMessages.length === 0) return 'No messages to summarize';\n\n    const topics = new Set<string>();\n    const users = new Set<string>();\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_6f5a13699b410ac04fe65e8b7b271ce5",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 435-439",
            "startLine": 435,
            "endLine": 439,
            "lines": 5,
            "text": "      // Simple topic extraction\n      if (msg.content.toLowerCase().includes('help')) topics.add('help requests');\n      if (msg.content.toLowerCase().includes('test')) topics.add('testing');\n      i...",
            "fullText": "      // Simple topic extraction\n      if (msg.content.toLowerCase().includes('help')) topics.add('help requests');\n      if (msg.content.toLowerCase().includes('test')) topics.add('testing');\n      if (msg.content.toLowerCase().includes('demo')) topics.add('demonstrations');\n    });",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 436-440",
            "startLine": 436,
            "endLine": 440,
            "lines": 5,
            "text": "      if (msg.content.toLowerCase().includes('help')) topics.add('help requests');\n      if (msg.content.toLowerCase().includes('test')) topics.add('testing');\n      if (msg.content.toLowerCase().incl...",
            "fullText": "      if (msg.content.toLowerCase().includes('help')) topics.add('help requests');\n      if (msg.content.toLowerCase().includes('test')) topics.add('testing');\n      if (msg.content.toLowerCase().includes('demo')) topics.add('demonstrations');\n    });\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_be9420f9715925974532b9f03654fdc6",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 440-444",
            "startLine": 440,
            "endLine": 444,
            "lines": 5,
            "text": "\n    return `- ${userMessages.length} messages from ${users.size} users\n- Topics discussed: ${topics.size > 0 ? Array.from(topics).join(', ') : 'general chat'}\n- Most active user: ${this.getMostActive...",
            "fullText": "\n    return `- ${userMessages.length} messages from ${users.size} users\n- Topics discussed: ${topics.size > 0 ? Array.from(topics).join(', ') : 'general chat'}\n- Most active user: ${this.getMostActiveUser(userMessages)}`;\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 441-445",
            "startLine": 441,
            "endLine": 445,
            "lines": 5,
            "text": "    return `- ${userMessages.length} messages from ${users.size} users\n- Topics discussed: ${topics.size > 0 ? Array.from(topics).join(', ') : 'general chat'}\n- Most active user: ${this.getMostActiveU...",
            "fullText": "    return `- ${userMessages.length} messages from ${users.size} users\n- Topics discussed: ${topics.size > 0 ? Array.from(topics).join(', ') : 'general chat'}\n- Most active user: ${this.getMostActiveUser(userMessages)}`;\n  }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c1142da5e657cc5ddc034d1b0c361f54",
        "locations": [
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 488-492",
            "startLine": 488,
            "endLine": 492,
            "lines": 5,
            "text": "\n    const messagesPerMinute = messages.length / durationMinutes;\n    return `${messagesPerMinute.toFixed(1)} messages/minute`;\n  }\n  */",
            "fullText": "\n    const messagesPerMinute = messages.length / durationMinutes;\n    return `${messagesPerMinute.toFixed(1)} messages/minute`;\n  }\n  */",
            "isTextBlock": true
          },
          {
            "file": "src/server/chat-server.ts",
            "name": "lines 489-493",
            "startLine": 489,
            "endLine": 493,
            "lines": 5,
            "text": "    const messagesPerMinute = messages.length / durationMinutes;\n    return `${messagesPerMinute.toFixed(1)} messages/minute`;\n  }\n  */\n",
            "fullText": "    const messagesPerMinute = messages.length / durationMinutes;\n    return `${messagesPerMinute.toFixed(1)} messages/minute`;\n  }\n  */\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_d50da06dbff400bf93251db888a08793",
        "locations": [
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 24-28",
            "startLine": 24,
            "endLine": 28,
            "lines": 5,
            "text": "\ninterface EnhancedRoom extends Room {\n  config?: RoomConfig;\n  coordinatorAgent?: BaseCoordinatorAgent;\n}",
            "fullText": "\ninterface EnhancedRoom extends Room {\n  config?: RoomConfig;\n  coordinatorAgent?: BaseCoordinatorAgent;\n}",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 25-29",
            "startLine": 25,
            "endLine": 29,
            "lines": 5,
            "text": "interface EnhancedRoom extends Room {\n  config?: RoomConfig;\n  coordinatorAgent?: BaseCoordinatorAgent;\n}\n",
            "fullText": "interface EnhancedRoom extends Room {\n  config?: RoomConfig;\n  coordinatorAgent?: BaseCoordinatorAgent;\n}\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f30f5e33892064b52196e26a6ea473a2",
        "locations": [
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 78-82",
            "startLine": 78,
            "endLine": 82,
            "lines": 5,
            "text": "\n  private async initializeCoordinator(room: EnhancedRoom): Promise<void> {\n    if (!room.config || room.config.coordinator.type === CoordinatorType.NONE) {\n      return;\n    }",
            "fullText": "\n  private async initializeCoordinator(room: EnhancedRoom): Promise<void> {\n    if (!room.config || room.config.coordinator.type === CoordinatorType.NONE) {\n      return;\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 79-83",
            "startLine": 79,
            "endLine": 83,
            "lines": 5,
            "text": "  private async initializeCoordinator(room: EnhancedRoom): Promise<void> {\n    if (!room.config || room.config.coordinator.type === CoordinatorType.NONE) {\n      return;\n    }\n",
            "fullText": "  private async initializeCoordinator(room: EnhancedRoom): Promise<void> {\n    if (!room.config || room.config.coordinator.type === CoordinatorType.NONE) {\n      return;\n    }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_bb48be2a188422ef73b653c1d178668e",
        "locations": [
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 157-161",
            "startLine": 157,
            "endLine": 161,
            "lines": 5,
            "text": "      // Load room configuration\n      const config = this.loadRoomConfig(roomId);\n      if (config) {\n        room.config = config;\n        room.name = config.name || room.name;",
            "fullText": "      // Load room configuration\n      const config = this.loadRoomConfig(roomId);\n      if (config) {\n        room.config = config;\n        room.name = config.name || room.name;",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 158-162",
            "startLine": 158,
            "endLine": 162,
            "lines": 5,
            "text": "      const config = this.loadRoomConfig(roomId);\n      if (config) {\n        room.config = config;\n        room.name = config.name || room.name;\n        ",
            "fullText": "      const config = this.loadRoomConfig(roomId);\n      if (config) {\n        room.config = config;\n        room.name = config.name || room.name;\n        ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_bf9220f94315b0b4edfc8911d14c1f72",
        "locations": [
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 166-170",
            "startLine": 166,
            "endLine": 170,
            "lines": 5,
            "text": "      \n      this.rooms.set(roomId, room);\n      console.log(`[Server] Created new room: ${roomId} with config: ${config ? 'yes' : 'no'}`);\n    }\n",
            "fullText": "      \n      this.rooms.set(roomId, room);\n      console.log(`[Server] Created new room: ${roomId} with config: ${config ? 'yes' : 'no'}`);\n    }\n",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 167-171",
            "startLine": 167,
            "endLine": 171,
            "lines": 5,
            "text": "      this.rooms.set(roomId, room);\n      console.log(`[Server] Created new room: ${roomId} with config: ${config ? 'yes' : 'no'}`);\n    }\n\n    // Create user",
            "fullText": "      this.rooms.set(roomId, room);\n      console.log(`[Server] Created new room: ${roomId} with config: ${config ? 'yes' : 'no'}`);\n    }\n\n    // Create user",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9a93d8f3f030a3bd14c2278460212bd1",
        "locations": [
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 185-189",
            "startLine": 185,
            "endLine": 189,
            "lines": 5,
            "text": "    // Set coordinator if agent and no coordinator yet\n    if (isAgent && !room.coordinator && !room.coordinatorAgent) {\n      room.coordinator = user;\n      console.log(`[Server] ${username} is now r...",
            "fullText": "    // Set coordinator if agent and no coordinator yet\n    if (isAgent && !room.coordinator && !room.coordinatorAgent) {\n      room.coordinator = user;\n      console.log(`[Server] ${username} is now room coordinator`);\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 186-190",
            "startLine": 186,
            "endLine": 190,
            "lines": 5,
            "text": "    if (isAgent && !room.coordinator && !room.coordinatorAgent) {\n      room.coordinator = user;\n      console.log(`[Server] ${username} is now room coordinator`);\n    }\n",
            "fullText": "    if (isAgent && !room.coordinator && !room.coordinatorAgent) {\n      room.coordinator = user;\n      console.log(`[Server] ${username} is now room coordinator`);\n    }\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0fe05a69983c1dac03b055755e89c227",
        "locations": [
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 296-300",
            "startLine": 296,
            "endLine": 300,
            "lines": 5,
            "text": "\n  private sendUserList(ws: WebSocket, room: EnhancedRoom) {\n    const userList = room.users.map(u => \n      `${u.username}${u.isAgent ? ' (agent)' : ''}${u.id === room.coordinator?.id ? ' (coordinato...",
            "fullText": "\n  private sendUserList(ws: WebSocket, room: EnhancedRoom) {\n    const userList = room.users.map(u => \n      `${u.username}${u.isAgent ? ' (agent)' : ''}${u.id === room.coordinator?.id ? ' (coordinator)' : ''}`\n    ).join('\\n');",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 297-301",
            "startLine": 297,
            "endLine": 301,
            "lines": 5,
            "text": "  private sendUserList(ws: WebSocket, room: EnhancedRoom) {\n    const userList = room.users.map(u => \n      `${u.username}${u.isAgent ? ' (agent)' : ''}${u.id === room.coordinator?.id ? ' (coordinator...",
            "fullText": "  private sendUserList(ws: WebSocket, room: EnhancedRoom) {\n    const userList = room.users.map(u => \n      `${u.username}${u.isAgent ? ' (agent)' : ''}${u.id === room.coordinator?.id ? ' (coordinator)' : ''}`\n    ).join('\\n');\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_fe0af05af8d8b956f137bc5db1eb5492",
        "locations": [
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 373-377",
            "startLine": 373,
            "endLine": 377,
            "lines": 5,
            "text": "\n    const room = this.rooms.get(roomId);\n    if (room) {\n      // Remove user from room\n      room.users = room.users.filter(u => u.id !== clientId);",
            "fullText": "\n    const room = this.rooms.get(roomId);\n    if (room) {\n      // Remove user from room\n      room.users = room.users.filter(u => u.id !== clientId);",
            "isTextBlock": true
          },
          {
            "file": "src/server/enhanced-chat-server.ts",
            "name": "lines 374-378",
            "startLine": 374,
            "endLine": 378,
            "lines": 5,
            "text": "    const room = this.rooms.get(roomId);\n    if (room) {\n      // Remove user from room\n      room.users = room.users.filter(u => u.id !== clientId);\n",
            "fullText": "    const room = this.rooms.get(roomId);\n    if (room) {\n      // Remove user from room\n      room.users = room.users.filter(u => u.id !== clientId);\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3b023ca18f6cd8c0267f0fd6704f4d3c",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 15-19",
            "startLine": 15,
            "endLine": 19,
            "lines": 5,
            "text": "\nexport interface OllamaClientConfig {\n  baseUrl?: string;\n  timeout?: number;\n}",
            "fullText": "\nexport interface OllamaClientConfig {\n  baseUrl?: string;\n  timeout?: number;\n}",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 16-20",
            "startLine": 16,
            "endLine": 20,
            "lines": 5,
            "text": "export interface OllamaClientConfig {\n  baseUrl?: string;\n  timeout?: number;\n}\n",
            "fullText": "export interface OllamaClientConfig {\n  baseUrl?: string;\n  timeout?: number;\n}\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_24c108999b06b5e6bd2304871b175089",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 38-42",
            "startLine": 38,
            "endLine": 42,
            "lines": 5,
            "text": "  stream?: boolean;\n  options?: {\n    temperature?: number;\n    top_p?: number;\n    top_k?: number;",
            "fullText": "  stream?: boolean;\n  options?: {\n    temperature?: number;\n    top_p?: number;\n    top_k?: number;",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 68-72",
            "startLine": 68,
            "endLine": 72,
            "lines": 5,
            "text": "  stream?: boolean;\n  options?: {\n    temperature?: number;\n    top_p?: number;\n    top_k?: number;",
            "fullText": "  stream?: boolean;\n  options?: {\n    temperature?: number;\n    top_p?: number;\n    top_k?: number;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0088ff3edc4d897a4f63192e65ca45fa",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 39-43",
            "startLine": 39,
            "endLine": 43,
            "lines": 5,
            "text": "  options?: {\n    temperature?: number;\n    top_p?: number;\n    top_k?: number;\n    num_predict?: number;",
            "fullText": "  options?: {\n    temperature?: number;\n    top_p?: number;\n    top_k?: number;\n    num_predict?: number;",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 69-73",
            "startLine": 69,
            "endLine": 73,
            "lines": 5,
            "text": "  options?: {\n    temperature?: number;\n    top_p?: number;\n    top_k?: number;\n    num_predict?: number;",
            "fullText": "  options?: {\n    temperature?: number;\n    top_p?: number;\n    top_k?: number;\n    num_predict?: number;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3eb4797b0d00e3d2e396f97d3898c84b",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 55-59",
            "startLine": 55,
            "endLine": 59,
            "lines": 5,
            "text": "  total_duration?: number;\n  load_duration?: number;\n  prompt_eval_duration?: number;\n  eval_duration?: number;\n  eval_count?: number;",
            "fullText": "  total_duration?: number;\n  load_duration?: number;\n  prompt_eval_duration?: number;\n  eval_duration?: number;\n  eval_count?: number;",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 86-90",
            "startLine": 86,
            "endLine": 90,
            "lines": 5,
            "text": "  total_duration?: number;\n  load_duration?: number;\n  prompt_eval_duration?: number;\n  eval_duration?: number;\n  eval_count?: number;",
            "fullText": "  total_duration?: number;\n  load_duration?: number;\n  prompt_eval_duration?: number;\n  eval_duration?: number;\n  eval_count?: number;",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_2318a0ac90207808bbfccebbe542def2",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 56-60",
            "startLine": 56,
            "endLine": 60,
            "lines": 5,
            "text": "  load_duration?: number;\n  prompt_eval_duration?: number;\n  eval_duration?: number;\n  eval_count?: number;\n}",
            "fullText": "  load_duration?: number;\n  prompt_eval_duration?: number;\n  eval_duration?: number;\n  eval_count?: number;\n}",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 87-91",
            "startLine": 87,
            "endLine": 91,
            "lines": 5,
            "text": "  load_duration?: number;\n  prompt_eval_duration?: number;\n  eval_duration?: number;\n  eval_count?: number;\n}",
            "fullText": "  load_duration?: number;\n  prompt_eval_duration?: number;\n  eval_duration?: number;\n  eval_count?: number;\n}",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_0d4f388e0bffb0cc42c640cfc5d4eb9d",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 57-61",
            "startLine": 57,
            "endLine": 61,
            "lines": 5,
            "text": "  prompt_eval_duration?: number;\n  eval_duration?: number;\n  eval_count?: number;\n}\n",
            "fullText": "  prompt_eval_duration?: number;\n  eval_duration?: number;\n  eval_count?: number;\n}\n",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 88-92",
            "startLine": 88,
            "endLine": 92,
            "lines": 5,
            "text": "  prompt_eval_duration?: number;\n  eval_duration?: number;\n  eval_count?: number;\n}\n",
            "fullText": "  prompt_eval_duration?: number;\n  eval_duration?: number;\n  eval_count?: number;\n}\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a5b7c19d26eae6e887e74fd5e2c776cd",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 111-115",
            "startLine": 111,
            "endLine": 115,
            "lines": 5,
            "text": "  \n  constructor(config: OllamaClientConfig = {}) {\n    this.baseUrl = config.baseUrl || 'http://localhost:11434';\n    this.timeout = config.timeout || 30000;\n  }",
            "fullText": "  \n  constructor(config: OllamaClientConfig = {}) {\n    this.baseUrl = config.baseUrl || 'http://localhost:11434';\n    this.timeout = config.timeout || 30000;\n  }",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 112-116",
            "startLine": 112,
            "endLine": 116,
            "lines": 5,
            "text": "  constructor(config: OllamaClientConfig = {}) {\n    this.baseUrl = config.baseUrl || 'http://localhost:11434';\n    this.timeout = config.timeout || 30000;\n  }\n  ",
            "fullText": "  constructor(config: OllamaClientConfig = {}) {\n    this.baseUrl = config.baseUrl || 'http://localhost:11434';\n    this.timeout = config.timeout || 30000;\n  }\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c48c2b0dbae187847bc8c605edc2231c",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 134-138",
            "startLine": 134,
            "endLine": 138,
            "lines": 5,
            "text": "      // First check via Ollama API if available\n      const models = await this.listModels();\n      \n      // Check system for GPU\n      const platform = os.platform();",
            "fullText": "      // First check via Ollama API if available\n      const models = await this.listModels();\n      \n      // Check system for GPU\n      const platform = os.platform();",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 135-139",
            "startLine": 135,
            "endLine": 139,
            "lines": 5,
            "text": "      const models = await this.listModels();\n      \n      // Check system for GPU\n      const platform = os.platform();\n      ",
            "fullText": "      const models = await this.listModels();\n      \n      // Check system for GPU\n      const platform = os.platform();\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_62a5c27e4372dbe2be8d006ecaf4b6ec",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 136-140",
            "startLine": 136,
            "endLine": 140,
            "lines": 5,
            "text": "      \n      // Check system for GPU\n      const platform = os.platform();\n      \n      if (platform === 'linux') {",
            "fullText": "      \n      // Check system for GPU\n      const platform = os.platform();\n      \n      if (platform === 'linux') {",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 137-141",
            "startLine": 137,
            "endLine": 141,
            "lines": 5,
            "text": "      // Check system for GPU\n      const platform = os.platform();\n      \n      if (platform === 'linux') {\n        // Check for NVIDIA GPU",
            "fullText": "      // Check system for GPU\n      const platform = os.platform();\n      \n      if (platform === 'linux') {\n        // Check for NVIDIA GPU",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_11717d0469f90219a2770dbae8904e88",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 212-216",
            "startLine": 212,
            "endLine": 216,
            "lines": 5,
            "text": "    \n    const platform = os.platform();\n    \n    try {\n      if (platform === 'darwin' || platform === 'linux') {",
            "fullText": "    \n    const platform = os.platform();\n    \n    try {\n      if (platform === 'darwin' || platform === 'linux') {",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 213-217",
            "startLine": 213,
            "endLine": 217,
            "lines": 5,
            "text": "    const platform = os.platform();\n    \n    try {\n      if (platform === 'darwin' || platform === 'linux') {\n        // macOS and Linux installation",
            "fullText": "    const platform = os.platform();\n    \n    try {\n      if (platform === 'darwin' || platform === 'linux') {\n        // macOS and Linux installation",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_4542b5df0bf0319748beaae05dba0ba3",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 224-228",
            "startLine": 224,
            "endLine": 228,
            "lines": 5,
            "text": "        \n        console.log(chalk.green('🔄 Ollama installed In Progress'));\n        \n        // Start Ollama service\n        await this.startOllamaService();",
            "fullText": "        \n        console.log(chalk.green('🔄 Ollama installed In Progress'));\n        \n        // Start Ollama service\n        await this.startOllamaService();",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 225-229",
            "startLine": 225,
            "endLine": 229,
            "lines": 5,
            "text": "        console.log(chalk.green('🔄 Ollama installed In Progress'));\n        \n        // Start Ollama service\n        await this.startOllamaService();\n        ",
            "fullText": "        console.log(chalk.green('🔄 Ollama installed In Progress'));\n        \n        // Start Ollama service\n        await this.startOllamaService();\n        ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3a5e3ed3c04c81ae7e35aa4b1e31a1dd",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 266-270",
            "startLine": 266,
            "endLine": 270,
            "lines": 5,
            "text": "    \n    // Try to start Ollama\n    const platform = os.platform();\n    \n    if (platform === 'darwin') {",
            "fullText": "    \n    // Try to start Ollama\n    const platform = os.platform();\n    \n    if (platform === 'darwin') {",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 267-271",
            "startLine": 267,
            "endLine": 271,
            "lines": 5,
            "text": "    // Try to start Ollama\n    const platform = os.platform();\n    \n    if (platform === 'darwin') {\n      // macOS - Ollama runs as a background service",
            "fullText": "    // Try to start Ollama\n    const platform = os.platform();\n    \n    if (platform === 'darwin') {\n      // macOS - Ollama runs as a background service",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_28fb69beaaf7d5559fef98ce8d39aa5f",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 391-395",
            "startLine": 391,
            "endLine": 395,
            "lines": 5,
            "text": "    \n    if (await this.hasModel(fullModelName)) {\n      console.log(chalk.green(`🔄 Model ${fullModelName} is available`));\n      return;\n    }",
            "fullText": "    \n    if (await this.hasModel(fullModelName)) {\n      console.log(chalk.green(`🔄 Model ${fullModelName} is available`));\n      return;\n    }",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 392-396",
            "startLine": 392,
            "endLine": 396,
            "lines": 5,
            "text": "    if (await this.hasModel(fullModelName)) {\n      console.log(chalk.green(`🔄 Model ${fullModelName} is available`));\n      return;\n    }\n    ",
            "fullText": "    if (await this.hasModel(fullModelName)) {\n      console.log(chalk.green(`🔄 Model ${fullModelName} is available`));\n      return;\n    }\n    ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_a2e03d251fb234d75667251afe35ee35",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 439-443",
            "startLine": 439,
            "endLine": 443,
            "lines": 5,
            "text": "      const url = new URL(path, this.baseUrl);\n      const options = {\n        method,\n        hostname: url.hostname,\n        port: url.port,",
            "fullText": "      const url = new URL(path, this.baseUrl);\n      const options = {\n        method,\n        hostname: url.hostname,\n        port: url.port,",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 482-486",
            "startLine": 482,
            "endLine": 486,
            "lines": 5,
            "text": "    const url = new URL(path, this.baseUrl);\n    const options = {\n      method,\n      hostname: url.hostname,\n      port: url.port,",
            "fullText": "    const url = new URL(path, this.baseUrl);\n    const options = {\n      method,\n      hostname: url.hostname,\n      port: url.port,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_13937f18c0e44eedededb2d0c0606c65",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 440-444",
            "startLine": 440,
            "endLine": 444,
            "lines": 5,
            "text": "      const options = {\n        method,\n        hostname: url.hostname,\n        port: url.port,\n        path: url.pathname + url.search,",
            "fullText": "      const options = {\n        method,\n        hostname: url.hostname,\n        port: url.port,\n        path: url.pathname + url.search,",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 483-487",
            "startLine": 483,
            "endLine": 487,
            "lines": 5,
            "text": "    const options = {\n      method,\n      hostname: url.hostname,\n      port: url.port,\n      path: url.pathname + url.search,",
            "fullText": "    const options = {\n      method,\n      hostname: url.hostname,\n      port: url.port,\n      path: url.pathname + url.search,",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_543f9e7349cbf0e1fd351fc02ec60d75",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 441-445",
            "startLine": 441,
            "endLine": 445,
            "lines": 5,
            "text": "        method,\n        hostname: url.hostname,\n        port: url.port,\n        path: url.pathname + url.search,\n        headers: {",
            "fullText": "        method,\n        hostname: url.hostname,\n        port: url.port,\n        path: url.pathname + url.search,\n        headers: {",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 484-488",
            "startLine": 484,
            "endLine": 488,
            "lines": 5,
            "text": "      method,\n      hostname: url.hostname,\n      port: url.port,\n      path: url.pathname + url.search,\n      headers: {",
            "fullText": "      method,\n      hostname: url.hostname,\n      port: url.port,\n      path: url.pathname + url.search,\n      headers: {",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_762bc89995cf4c417d2e84dbe9a4a848",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 442-446",
            "startLine": 442,
            "endLine": 446,
            "lines": 5,
            "text": "        hostname: url.hostname,\n        port: url.port,\n        path: url.pathname + url.search,\n        headers: {\n          'Content-Type': 'application/json',",
            "fullText": "        hostname: url.hostname,\n        port: url.port,\n        path: url.pathname + url.search,\n        headers: {\n          'Content-Type': 'application/json',",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 485-489",
            "startLine": 485,
            "endLine": 489,
            "lines": 5,
            "text": "      hostname: url.hostname,\n      port: url.port,\n      path: url.pathname + url.search,\n      headers: {\n        'Content-Type': 'application/json',",
            "fullText": "      hostname: url.hostname,\n      port: url.port,\n      path: url.pathname + url.search,\n      headers: {\n        'Content-Type': 'application/json',",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_1ff1460ca8eeec1180851bbd276a170c",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 443-447",
            "startLine": 443,
            "endLine": 447,
            "lines": 5,
            "text": "        port: url.port,\n        path: url.pathname + url.search,\n        headers: {\n          'Content-Type': 'application/json',\n        },",
            "fullText": "        port: url.port,\n        path: url.pathname + url.search,\n        headers: {\n          'Content-Type': 'application/json',\n        },",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 486-490",
            "startLine": 486,
            "endLine": 490,
            "lines": 5,
            "text": "      port: url.port,\n      path: url.pathname + url.search,\n      headers: {\n        'Content-Type': 'application/json',\n      },",
            "fullText": "      port: url.port,\n      path: url.pathname + url.search,\n      headers: {\n        'Content-Type': 'application/json',\n      },",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_90c77b55c1528f8f9e2806060d218532",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 470-474",
            "startLine": 470,
            "endLine": 474,
            "lines": 5,
            "text": "      if (body) {\n        req.write(JSON.stringify(body));\n      }\n      \n      req.end();",
            "fullText": "      if (body) {\n        req.write(JSON.stringify(body));\n      }\n      \n      req.end();",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 537-541",
            "startLine": 537,
            "endLine": 541,
            "lines": 5,
            "text": "      if (body) {\n        req.write(JSON.stringify(body));\n      }\n      \n      req.end();",
            "fullText": "      if (body) {\n        req.write(JSON.stringify(body));\n      }\n      \n      req.end();",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_3404a2b30c68a2dd51079482ec98c604",
        "locations": [
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 501-505",
            "startLine": 501,
            "endLine": 505,
            "lines": 5,
            "text": "            \n            for await (const chunk of res) {\n              buffer += chunk.toString();\n              const lines = buffer.split('\\n');\n              buffer = lines.pop() || '';",
            "fullText": "            \n            for await (const chunk of res) {\n              buffer += chunk.toString();\n              const lines = buffer.split('\\n');\n              buffer = lines.pop() || '';",
            "isTextBlock": true
          },
          {
            "file": "src/services/ollama-client.ts",
            "name": "lines 502-506",
            "startLine": 502,
            "endLine": 506,
            "lines": 5,
            "text": "            for await (const chunk of res) {\n              buffer += chunk.toString();\n              const lines = buffer.split('\\n');\n              buffer = lines.pop() || '';\n              ",
            "fullText": "            for await (const chunk of res) {\n              buffer += chunk.toString();\n              const lines = buffer.split('\\n');\n              buffer = lines.pop() || '';\n              ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_ec4e5a1d08ee84272b111629141e1067",
        "locations": [
          {
            "file": "src/types/chat.ts",
            "name": "lines 56-60",
            "startLine": 56,
            "endLine": 60,
            "lines": 5,
            "text": "  // Client -> Server\n  JOIN_ROOM = 'join_room',\n  LEAVE_ROOM = 'leave_room',\n  SEND_MESSAGE = 'send_message',\n  SEND_COMMAND = 'send_command',",
            "fullText": "  // Client -> Server\n  JOIN_ROOM = 'join_room',\n  LEAVE_ROOM = 'leave_room',\n  SEND_MESSAGE = 'send_message',\n  SEND_COMMAND = 'send_command',",
            "isTextBlock": true
          },
          {
            "file": "src/types/chat.ts",
            "name": "lines 57-61",
            "startLine": 57,
            "endLine": 61,
            "lines": 5,
            "text": "  JOIN_ROOM = 'join_room',\n  LEAVE_ROOM = 'leave_room',\n  SEND_MESSAGE = 'send_message',\n  SEND_COMMAND = 'send_command',\n  ",
            "fullText": "  JOIN_ROOM = 'join_room',\n  LEAVE_ROOM = 'leave_room',\n  SEND_MESSAGE = 'send_message',\n  SEND_COMMAND = 'send_command',\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_725f7c822f21f3d38819007f99e6cf73",
        "locations": [
          {
            "file": "src/types/chat.ts",
            "name": "lines 68-72",
            "startLine": 68,
            "endLine": 72,
            "lines": 5,
            "text": "  \n  // Agent specific\n  AGENT_REQUEST = 'agent_request',\n  AGENT_RESPONSE = 'agent_response'\n}",
            "fullText": "  \n  // Agent specific\n  AGENT_REQUEST = 'agent_request',\n  AGENT_RESPONSE = 'agent_response'\n}",
            "isTextBlock": true
          },
          {
            "file": "src/types/chat.ts",
            "name": "lines 69-73",
            "startLine": 69,
            "endLine": 73,
            "lines": 5,
            "text": "  // Agent specific\n  AGENT_REQUEST = 'agent_request',\n  AGENT_RESPONSE = 'agent_response'\n}\n",
            "fullText": "  // Agent specific\n  AGENT_REQUEST = 'agent_request',\n  AGENT_RESPONSE = 'agent_response'\n}\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_484d75cf7aeb59174fb7c2220ca4fe54",
        "locations": [
          {
            "file": "src/types/messages.ts",
            "name": "lines 6-10",
            "startLine": 6,
            "endLine": 10,
            "lines": 5,
            "text": "  // User messages\n  USER_MESSAGE = 'user_message',\n  AGENT_MESSAGE = 'agent_message',\n  SYSTEM_MESSAGE = 'system_message',\n  ",
            "fullText": "  // User messages\n  USER_MESSAGE = 'user_message',\n  AGENT_MESSAGE = 'agent_message',\n  SYSTEM_MESSAGE = 'system_message',\n  ",
            "isTextBlock": true
          },
          {
            "file": "src/types/messages.ts",
            "name": "lines 7-11",
            "startLine": 7,
            "endLine": 11,
            "lines": 5,
            "text": "  USER_MESSAGE = 'user_message',\n  AGENT_MESSAGE = 'agent_message',\n  SYSTEM_MESSAGE = 'system_message',\n  \n  // Room events",
            "fullText": "  USER_MESSAGE = 'user_message',\n  AGENT_MESSAGE = 'agent_message',\n  SYSTEM_MESSAGE = 'system_message',\n  \n  // Room events",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c466897101f982154734506b28a149b8",
        "locations": [
          {
            "file": "src/types/messages.ts",
            "name": "lines 11-15",
            "startLine": 11,
            "endLine": 15,
            "lines": 5,
            "text": "  // Room events\n  JOIN_ROOM = 'join_room',\n  LEAVE_ROOM = 'leave_room',\n  USER_JOINED = 'user_joined',\n  USER_LEFT = 'user_left',",
            "fullText": "  // Room events\n  JOIN_ROOM = 'join_room',\n  LEAVE_ROOM = 'leave_room',\n  USER_JOINED = 'user_joined',\n  USER_LEFT = 'user_left',",
            "isTextBlock": true
          },
          {
            "file": "src/types/messages.ts",
            "name": "lines 12-16",
            "startLine": 12,
            "endLine": 16,
            "lines": 5,
            "text": "  JOIN_ROOM = 'join_room',\n  LEAVE_ROOM = 'leave_room',\n  USER_JOINED = 'user_joined',\n  USER_LEFT = 'user_left',\n  ",
            "fullText": "  JOIN_ROOM = 'join_room',\n  LEAVE_ROOM = 'leave_room',\n  USER_JOINED = 'user_joined',\n  USER_LEFT = 'user_left',\n  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_f5eae1de4665b1483b89f2c5e7f71c8b",
        "locations": [
          {
            "file": "src/types/messages.ts",
            "name": "lines 20-24",
            "startLine": 20,
            "endLine": 24,
            "lines": 5,
            "text": "  \n  // Agent specific\n  AGENT_READY = 'agent_ready',\n  AGENT_ERROR = 'agent_error',\n  ",
            "fullText": "  \n  // Agent specific\n  AGENT_READY = 'agent_ready',\n  AGENT_ERROR = 'agent_error',\n  ",
            "isTextBlock": true
          },
          {
            "file": "src/types/messages.ts",
            "name": "lines 21-25",
            "startLine": 21,
            "endLine": 25,
            "lines": 5,
            "text": "  // Agent specific\n  AGENT_READY = 'agent_ready',\n  AGENT_ERROR = 'agent_error',\n  \n  // Errors",
            "fullText": "  // Agent specific\n  AGENT_READY = 'agent_ready',\n  AGENT_ERROR = 'agent_error',\n  \n  // Errors",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_e4c6ac58485b60da053faaefea96cda4",
        "locations": [
          {
            "file": "src/types/messages.ts",
            "name": "lines 66-70",
            "startLine": 66,
            "endLine": 70,
            "lines": 5,
            "text": "\nexport interface SystemMessage extends WSMessage {\n  type: MessageType.SYSTEM_MESSAGE;\n  content: string;\n}",
            "fullText": "\nexport interface SystemMessage extends WSMessage {\n  type: MessageType.SYSTEM_MESSAGE;\n  content: string;\n}",
            "isTextBlock": true
          },
          {
            "file": "src/types/messages.ts",
            "name": "lines 67-71",
            "startLine": 67,
            "endLine": 71,
            "lines": 5,
            "text": "export interface SystemMessage extends WSMessage {\n  type: MessageType.SYSTEM_MESSAGE;\n  content: string;\n}\n",
            "fullText": "export interface SystemMessage extends WSMessage {\n  type: MessageType.SYSTEM_MESSAGE;\n  content: string;\n}\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_1b8ff19cf72dc55b7c8a8a3d851cc922",
        "locations": [
          {
            "file": "src/utils/mermaid-parser.ts",
            "name": "lines 53-57",
            "startLine": 53,
            "endLine": 57,
            "lines": 5,
            "text": "    \n    while ((match = participantRegex.exec(content)) !== null) {\n      const name = match[1];\n      const alias = match[2] || name;\n      const isExternal = alias.startsWith('ext_') || alias.inclu...",
            "fullText": "    \n    while ((match = participantRegex.exec(content)) !== null) {\n      const name = match[1];\n      const alias = match[2] || name;\n      const isExternal = alias.startsWith('ext_') || alias.includes('External');",
            "isTextBlock": true
          },
          {
            "file": "src/utils/mermaid-parser.ts",
            "name": "lines 54-58",
            "startLine": 54,
            "endLine": 58,
            "lines": 5,
            "text": "    while ((match = participantRegex.exec(content)) !== null) {\n      const name = match[1];\n      const alias = match[2] || name;\n      const isExternal = alias.startsWith('ext_') || alias.includes('...",
            "fullText": "    while ((match = participantRegex.exec(content)) !== null) {\n      const name = match[1];\n      const alias = match[2] || name;\n      const isExternal = alias.startsWith('ext_') || alias.includes('External');\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_fe026318c001f446a3c845ec45a7e637",
        "locations": [
          {
            "file": "src/utils/mermaid-parser.ts",
            "name": "lines 66-70",
            "startLine": 66,
            "endLine": 70,
            "lines": 5,
            "text": "    // Also match actor declarations\n    const actorRegex = /actor\\s+(\\w+)(?:\\s+as\\s+([^\\n]+))?/g;\n    while ((match = actorRegex.exec(content)) !== null) {\n      const name = match[1];\n      const al...",
            "fullText": "    // Also match actor declarations\n    const actorRegex = /actor\\s+(\\w+)(?:\\s+as\\s+([^\\n]+))?/g;\n    while ((match = actorRegex.exec(content)) !== null) {\n      const name = match[1];\n      const alias = match[2] || name;",
            "isTextBlock": true
          },
          {
            "file": "src/utils/mermaid-parser.ts",
            "name": "lines 67-71",
            "startLine": 67,
            "endLine": 71,
            "lines": 5,
            "text": "    const actorRegex = /actor\\s+(\\w+)(?:\\s+as\\s+([^\\n]+))?/g;\n    while ((match = actorRegex.exec(content)) !== null) {\n      const name = match[1];\n      const alias = match[2] || name;\n      ",
            "fullText": "    const actorRegex = /actor\\s+(\\w+)(?:\\s+as\\s+([^\\n]+))?/g;\n    while ((match = actorRegex.exec(content)) !== null) {\n      const name = match[1];\n      const alias = match[2] || name;\n      ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_de3824d001f72d5e32ab70cdf95bd3a8",
        "locations": [
          {
            "file": "src/utils/mermaid-parser.ts",
            "name": "lines 90-94",
            "startLine": 90,
            "endLine": 94,
            "lines": 5,
            "text": "    \n    // Match different message types\n    const messagePatterns = [\n      // Sync call: A->>B: message\n      { regex: /(\\w+)->>(\\w+):\\s*(.+)/g, type: 'sync' as const },",
            "fullText": "    \n    // Match different message types\n    const messagePatterns = [\n      // Sync call: A->>B: message\n      { regex: /(\\w+)->>(\\w+):\\s*(.+)/g, type: 'sync' as const },",
            "isTextBlock": true
          },
          {
            "file": "src/utils/mermaid-parser.ts",
            "name": "lines 91-95",
            "startLine": 91,
            "endLine": 95,
            "lines": 5,
            "text": "    // Match different message types\n    const messagePatterns = [\n      // Sync call: A->>B: message\n      { regex: /(\\w+)->>(\\w+):\\s*(.+)/g, type: 'sync' as const },\n      // Async call: A-)B: messa...",
            "fullText": "    // Match different message types\n    const messagePatterns = [\n      // Sync call: A->>B: message\n      { regex: /(\\w+)->>(\\w+):\\s*(.+)/g, type: 'sync' as const },\n      // Async call: A-)B: message  ",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_c284c8d9aa8f295a61c8968e22efcd8e",
        "locations": [
          {
            "file": "src/utils/mermaid-parser.ts",
            "name": "lines 95-99",
            "startLine": 95,
            "endLine": 99,
            "lines": 5,
            "text": "      // Async call: A-)B: message  \n      { regex: /(\\w+)-\\)(\\w+):\\s*(.+)/g, type: 'async' as const },\n      // Return: A-->>B: message\n      { regex: /(\\w+)-->>(\\w+):\\s*(.+)/g, type: 'return' as con...",
            "fullText": "      // Async call: A-)B: message  \n      { regex: /(\\w+)-\\)(\\w+):\\s*(.+)/g, type: 'async' as const },\n      // Return: A-->>B: message\n      { regex: /(\\w+)-->>(\\w+):\\s*(.+)/g, type: 'return' as const },\n    ];",
            "isTextBlock": true
          },
          {
            "file": "src/utils/mermaid-parser.ts",
            "name": "lines 96-100",
            "startLine": 96,
            "endLine": 100,
            "lines": 5,
            "text": "      { regex: /(\\w+)-\\)(\\w+):\\s*(.+)/g, type: 'async' as const },\n      // Return: A-->>B: message\n      { regex: /(\\w+)-->>(\\w+):\\s*(.+)/g, type: 'return' as const },\n    ];\n",
            "fullText": "      { regex: /(\\w+)-\\)(\\w+):\\s*(.+)/g, type: 'async' as const },\n      // Return: A-->>B: message\n      { regex: /(\\w+)-->>(\\w+):\\s*(.+)/g, type: 'return' as const },\n    ];\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_fae97392b874861b98ce6b9984fb9b57",
        "locations": [
          {
            "file": "src/utils/mermaid-parser.ts",
            "name": "lines 142-146",
            "startLine": 142,
            "endLine": 146,
            "lines": 5,
            "text": "        // Extract function name from message\n        const functionMatch = msg.message.match(/(\\w+)\\(/);\n        if (functionMatch) {\n          externalCalls.add(functionMatch[1]);\n        } else if ...",
            "fullText": "        // Extract function name from message\n        const functionMatch = msg.message.match(/(\\w+)\\(/);\n        if (functionMatch) {\n          externalCalls.add(functionMatch[1]);\n        } else if (msg.message.startsWith('ext_')) {",
            "isTextBlock": true
          },
          {
            "file": "src/utils/mermaid-parser.ts",
            "name": "lines 143-147",
            "startLine": 143,
            "endLine": 147,
            "lines": 5,
            "text": "        const functionMatch = msg.message.match(/(\\w+)\\(/);\n        if (functionMatch) {\n          externalCalls.add(functionMatch[1]);\n        } else if (msg.message.startsWith('ext_')) {\n          /...",
            "fullText": "        const functionMatch = msg.message.match(/(\\w+)\\(/);\n        if (functionMatch) {\n          externalCalls.add(functionMatch[1]);\n        } else if (msg.message.startsWith('ext_')) {\n          // Direct external function reference",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      },
      {
        "hash": "block_9d2fe935394c475f1d64907c71ea4898",
        "locations": [
          {
            "file": "src/utils/mermaid-parser.ts",
            "name": "lines 153-157",
            "startLine": 153,
            "endLine": 157,
            "lines": 5,
            "text": "\n    // Also check participant aliases\n    participants\n      .filter(p => p.isExternal && p.alias.startsWith('ext_'))\n      .forEach(p => externalCalls.add(p.alias));",
            "fullText": "\n    // Also check participant aliases\n    participants\n      .filter(p => p.isExternal && p.alias.startsWith('ext_'))\n      .forEach(p => externalCalls.add(p.alias));",
            "isTextBlock": true
          },
          {
            "file": "src/utils/mermaid-parser.ts",
            "name": "lines 154-158",
            "startLine": 154,
            "endLine": 158,
            "lines": 5,
            "text": "    // Also check participant aliases\n    participants\n      .filter(p => p.isExternal && p.alias.startsWith('ext_'))\n      .forEach(p => externalCalls.add(p.alias));\n",
            "fullText": "    // Also check participant aliases\n    participants\n      .filter(p => p.isExternal && p.alias.startsWith('ext_'))\n      .forEach(p => externalCalls.add(p.alias));\n",
            "isTextBlock": true
          }
        ],
        "type": "text-block"
      }
    ],
    "threshold": 5,
    "In Progress": false
  },
  "failureReasons": [
    "Code duplication 51.77% exceeds 5% threshold"
  ],
  "generatedAt": "2025-07-20T07:19:08.005Z"
}