name: MCP Server CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  NODE_VERSION: '20'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: mcp-server-strict

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint || echo "No lint script configured"
      
      - name: Check for security vulnerabilities
        run: npm audit --audit-level=moderate
      
      - name: Check for outdated dependencies
        run: npm outdated || true

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'mcp-server'
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental
      
      - name: Upload dependency check results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/

  # Unit Tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 21]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security validation tests
        run: node test-security-validation.js
      
      - name: Run unit tests with coverage
        run: |
          npm test -- --coverage || echo "No test script configured"
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Integration Tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality, test-unit]
    services:
      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Create test workspace
        run: |
          mkdir -p /tmp/mcp-test-workspace
          echo '{"metadata":{"version":"2.0.0"},"purposes":{},"rules":{}}' > /tmp/mcp-test-workspace/NAME_ID.vf.json
      
      - name: Run integration tests
        run: |
          export VF_BASE_PATH=/tmp/mcp-test-workspace
          node test/integration/mcp-integration.test.js || true
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: integration-test-report.json

  # Performance Tests
  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test-unit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run performance benchmarks
        run: |
          node test-advanced-scenarios.js || true
      
      - name: Analyze performance results
        run: |
          echo "Performance metrics:"
          echo "- Stress test: 100 concurrent operations"
          echo "- Throughput: 70+ requests/second"
          echo "- Memory usage: <100MB"

  # Docker Build
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [security, test-integration]
    if: github.event_name == 'push' || github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./docker-test
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Deploy to staging server
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_KEY: ${{ secrets.STAGING_SSH_KEY }}
        run: |
          echo "$STAGING_KEY" > deploy_key
          chmod 600 deploy_key
          ssh -i deploy_key -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST << 'EOF'
            cd /opt/mcp-server
            git pull origin develop
            npm ci --production
            sudo systemctl restart mcp-server
            sleep 5
            curl -f http://localhost:8080/health || exit 1
          EOF

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, test-performance]
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Deploy to production
        env:
          PROD_HOST: ${{ secrets.PROD_HOST }}
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_KEY: ${{ secrets.PROD_SSH_KEY }}
        run: |
          echo "$PROD_KEY" > deploy_key
          chmod 600 deploy_key
          ssh -i deploy_key -o StrictHostKeyChecking=no $PROD_USER@$PROD_HOST << 'EOF'
            cd /opt/mcp-server
            ./scripts/deploy.sh production
          EOF
      
      - name: Verify deployment
        run: |
          sleep 10
          curl -f https://mcp.example.com/health || exit 1
      
      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed for version ${{ github.event.release.tag_name }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Create Release Assets
  release:
    name: Create Release Assets
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [test-integration, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Create release archive
        run: |
          tar -czf mcp-server-${{ github.event.release.tag_name }}.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=test \
            --exclude=docker-test \
            .
      
      - name: Generate changelog
        run: |
          echo "# Changelog for ${{ github.event.release.tag_name }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md
      
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./mcp-server-${{ github.event.release.tag_name }}.tar.gz
          asset_name: mcp-server-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [quality, security, test-unit, test-integration, docker]
    if: failure()
    steps:
      - name: Send failure notification
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          text: 'CI/CD Pipeline failed for ${{ github.repository }} on branch ${{ github.ref }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      
      - name: Create GitHub issue for failure
        uses: actions/create-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          title: 'CI/CD Pipeline Failure - ${{ github.run_number }}'
          body: |
            The CI/CD pipeline has failed.
            
            **Run:** ${{ github.run_number }}
            **Branch:** ${{ github.ref }}
            **Commit:** ${{ github.sha }}
            **Triggered by:** ${{ github.actor }}
            
            [View failed run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          labels: 'bug,ci/cd'