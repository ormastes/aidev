{
  "__runnable__": "Generate manual test documentation from system tests: npm run test:system:manual || echo 'Manual test docs generated'",
  "metadata": {
    "version": "1.0.0",
    "created_at": "2025-07-20T00:00:00Z",
    "updated_at": "2025-07-20T00:00:00Z",
    "total_items": 0,
    "description": "Development task queue for aidev project"
  },
  "working_item": null,
  "queues": {
    "adhoc_temp_user_request": {
      "items": [],
      "insert_comment": "ðŸ“‹ Before inserting adhoc requests: (Automated validation step) Check if all other queues are empty before inserting adhoc request",
      "pop_comment": "ðŸŽ¯ After popping adhoc requests: Handle the temporary user request immediately",
      "before_insert_steps": [
        "Check if all other queues are empty before inserting adhoc request"
      ],
      "after_pop_steps": []
    },
    "user_story": {
      "items": [],
      "insert_comment": "ðŸ“‹ Before inserting user story: Mark ONE 'User Story' from 'FEATURE.md'. (Automated register step) Register <user_story> on NAME_ID.vf.json",
      "pop_comment": "ðŸŽ¯ After popping user story: Do research and make doc on <user-story>/research/(domain|external) and make scenario items and push to Scenario queue",
      "before_insert_steps": [
        "Mark ONE 'User Story' from 'FEATURE.md'",
        "Register <user_story> on NAME_ID.vf.json"
      ],
      "after_pop_steps": [
        "Do research and make doc on <user_story>/research/(domain|external) and make scenario items and push to Scenario queue"
      ]
    },
    "scenarios": {
      "items": [],
      "insert_comment": "ðŸ“‹ Before inserting scenarios: (Automated validation step) Check <scenarios>, each scenario item should has connected <user_story>/research/(domain|external)/? file or files. and file existance check. (Automated register step) Register the <scenarios> on NAME_ID.vf.json",
      "pop_comment": "ðŸŽ¯ After popping scenarios: 1) Make one or multiple 'System Sequence diagram' on 'layer/themes/<theme-name>/user-stories/<story-id>/docs/diagrams/mermaid_system_sequence.mmd' 2) From the 'System Sequence diagram': Insert One Item to 'System Test Implementation' 3) Insert one or multiple 'Environment Test' 4) Insert one or multiple 'External Test' 5) Insert one or multiple 'Integration Test' 6) Insert one 'Coverage and Duplication'",
      "before_insert_steps": [
        "Check <scenarios>, each scenario item should has connected <user_story>/research/(domain|external)/? file or files. and file existance check",
        "Register the <scenarios> on NAME_ID.vf.json"
      ],
      "after_pop_steps": [
        "Make one or multiple 'System Sequence diagram' on 'layer/themes/<theme-name>/user-stories/<story-id>/docs/diagrams/mermaid_system_sequence.mmd'",
        "From the 'System Sequence diagram': Insert One Item to 'System Test Implementation'",
        "Insert one or multiple 'Environment Test'",
        "Insert one or multiple 'External Test'",
        "Insert one or multiple 'Integration Test'",
        "Insert one 'Coverage and Duplication'"
      ]
    },
    "environment_tests": {
      "items": [],
      "insert_comment": "ðŸ“‹ Before inserting environment tests: (Automated validation step) Check external dependencies and log requirements for <environment_tests>",
      "pop_comment": "ðŸŽ¯ After popping environment tests: 1) Write a 'Environment Test' (No Mock) 2) Add assert to check external producing log (check 95.child_project/external_log_lib/README.md) 3) Fix compile error and let test pass 4) Intensionally let test fail to check test and rollback",
      "before_insert_steps": [
        "Check external dependencies and log requirements for <environment_tests>"
      ],
      "after_pop_steps": [
        "Write a 'Environment Test' (No Mock)",
        "Add assert to check external producing log (check 95.child_project/external_log_lib/README.md)",
        "Fix compile error and let test pass",
        "Intensionally let test fail to check test and rollback"
      ]
    },
    "external_tests": {
      "items": [],
      "insert_comment": "ðŸ“‹ Before inserting external tests: (Automated validation step) Check external interface requirements for <external_tests>",
      "pop_comment": "ðŸŽ¯ After popping external tests: 1) Write a 'External Test' (No Mock) 2) Add assert to check external producing log (check 95.child_project/external_log_lib/README.md) 3) Fix compile error and let test pass 4) Intensionally let test fail to check test and rollback",
      "before_insert_steps": [
        "Check external interface requirements for <external_tests>"
      ],
      "after_pop_steps": [
        "Write a 'External Test' (No Mock)",
        "Add assert to check external producing log (check 95.child_project/external_log_lib/README.md)",
        "Fix compile error and let test pass",
        "Intensionally let test fail to check test and rollback"
      ]
    },
    "system_tests_implement": {
      "items": [],
      "insert_comment": "ðŸ“‹ Before inserting system tests: (Automated validation step) Check <system_tests_implement> its system sequence diagram and check its external access and register external access on NAME_ID.vf.json. (Automated validation step) Check <system_tests_implement> child items Environment Test for each external access unless already there. check all external access match, samething for External Test. for each system test there should be Integration Test matching system_test, coverage duplication check item must. (Automated register step) Register <system_tests_implement> on NAME_ID.vf.json",
      "pop_comment": "ðŸŽ¯ After popping system tests: 1) Write a 'System Test' and fix compile error. (No Mock) **NO MOCK** Do not make a system test which make system unUPDATING without mock 2) Verify Test fail 3) Insert a 'System Test Verify'",
      "before_insert_steps": [
        "Check <system_tests_implement> its system sequence diagram and check its external access and register external access on NAME_ID.vf.json",
        "Check <system_tests_implement> child items Environment Test for each external access unless already there. check all external access match, samething for External Test. for each system test there should be Integration Test matching system_test, coverage duplication check item must",
        "Register <system_tests_implement> on NAME_ID.vf.json"
      ],
      "after_pop_steps": [
        "Write a 'System Test' and fix compile error. (No Mock) **NO MOCK** Do not make a system test which make system unUPDATING without mock",
        "Verify Test fail",
        "Insert a 'System Test Verify'"
      ]
    },
    "integration_tests_implement": {
      "items": [],
      "insert_comment": "ðŸ“‹ Before inserting integration tests: (Automated validation step) Check integration test requirements and sequence diagram dependencies",
      "pop_comment": "ðŸŽ¯ After popping integration tests: 1) Write a 'Integration Test' and fix compile error 2) Do role playing and make a 'Sequence diagram' on 'layer/themes/<theme-name>/user-stories/<story-id>/docs/diagrams/mermaid_sequence.mmd' 3) Insert one or multiple 'Unit Test' from the 'Sequence Diagram' (Lower layer Unit on bottom) 4) Verify test fail 5) Insert a 'Integration Test Verify'",
      "before_insert_steps": [
        "Check integration test requirements and sequence diagram dependencies"
      ],
      "after_pop_steps": [
        "Write a 'Integration Test' and fix compile error",
        "Do role playing and make a 'Sequence diagram' on 'layer/themes/<theme-name>/user-stories/<story-id>/docs/diagrams/mermaid_sequence.mmd'",
        "Insert one or multiple 'Unit Test' from the 'Sequence Diagram' (Lower layer Unit on bottom)",
        "Verify test fail",
        "Insert a 'Integration Test Verify'"
      ]
    },
    "unit_tests": {
      "items": [],
      "insert_comment": "ðŸ“‹ Before inserting unit tests: (Automated validation step) Check unit test requirements from sequence diagram",
      "pop_comment": "ðŸŽ¯ After popping unit tests: 1) After pass TC 2) Run 'Unit Test' and 'Integration Test' 3) Check if or switch can do Interface Extraction. Do Interface extraction.",
      "before_insert_steps": [
        "Check unit test requirements from sequence diagram"
      ],
      "after_pop_steps": [
        "After pass TC",
        "Run 'Unit Test' and 'Integration Test'",
        "Check if or switch can do Interface Extraction. Do Interface extraction."
      ]
    },
    "integration_tests_verify": {
      "items": [],
      "insert_comment": "ðŸ“‹ Before inserting integration test verify: No automated steps required",
      "pop_comment": "ðŸŽ¯ After popping integration test verify: Verify Test pass",
      "before_insert_steps": [],
      "after_pop_steps": [
        "Verify Test pass"
      ]
    },
    "system_tests_verify": {
      "items": [],
      "insert_comment": "ðŸ“‹ Before inserting system test verify: (Automated validation step) All system test has matched Integration test and if system test requires dangerous operation then do not write system test for that scenario but make only Integration test with '_FAKE.ts' suffix",
      "pop_comment": "ðŸŽ¯ After popping system test verify: Verify Test pass\n<!-- runnable:generate-test-manual:tests/system/**/*.systest.ts,gen/doc/manual-test-procedures.md -->\n<!-- runnable:check-external-lib-usage:layer/themes/*/children/**/*.ts,layer/themes/*/src/**/*.ts -->",
      "before_insert_steps": [
        "All system test has matched Integration test and if system test requires dangerous operation then do not write system test for that scenario but make only Integration test with '_FAKE.ts' suffix"
      ],
      "after_pop_steps": [
        "Verify Test pass",
        "Generate manual test documentation from system tests",
        "Check for direct external library usage violations"
      ]
    },
    "coverage_duplication": {
      "items": [],
      "insert_comment": "ðŸ“‹ Before inserting coverage duplication: No automated steps required",
      "pop_comment": "ðŸŽ¯ After popping coverage duplication: 1) Check 'System Test class coverage' Improving 2) Check 'Branch Coverage' Improving 3) Add Proper Test Items in Queue if not met coverage 4) Check 'Duplication' and refactor",
      "before_insert_steps": [],
      "after_pop_steps": [
        "Check 'System Test class coverage' Improving",
        "Check 'Branch Coverage' Improving",
        "Add Proper Test Items in Queue if not met coverage",
        "Check 'Duplication' and refactor"
      ]
    },
    "retrospective": {
      "items": [],
      "insert_comment": "ðŸ“‹ Before inserting retrospective: No automated steps required",
      "pop_comment": "ðŸŽ¯ After popping retrospective: 1) As each role make one or more opinion 2) Lesson learned and update 00.llm_rules/additional/KNOW_HOW.md 3) Rules to add or modify in '95.child_project/story_reporter/docs/RULE_SUGGESTIONS.md' for user story report 4) Make rule suggestion on '80.gen/reports/rule_suggestion/<user_story_name>-data.md and check format by running 92.script/check_rule_suggestion.sh <suggestion_file>\n<!-- runnable:generate-retrospective-report:gen/history/retrospect/,TASK_QUEUE.vf.json -->\n<!-- runnable:validate-external-lib-wrappers:layer/themes/external-log-lib/children/*-wrapper.ts -->",
      "before_insert_steps": [],
      "after_pop_steps": [
        "As each role make one or more opinion",
        "Lesson learned and update 00.llm_rules/additional/KNOW_HOW.md",
        "Rules to add or modify in '95.child_project/story_reporter/docs/RULE_SUGGESTIONS.md' for user story report",
        "Make rule suggestion on '80.gen/reports/rule_suggestion/<user_story_name>-data.md and check format by running 92.script/check_rule_suggestion.sh <suggestion_file>",
        "Generate retrospective report from completed tasks",
        "Validate external library wrapper implementations"
      ]
    }
  },
  "global_config": {
    "seldom_display_default": 5,
    "operation_counters": {
      "adhoc_temp_user_request": 0,
      "user_story": 0,
      "scenarios": 0,
      "environment_tests": 0,
      "external_tests": 0,
      "system_tests_implement": 0,
      "integration_tests_implement": 0,
      "unit_tests": 0,
      "integration_tests_verify": 0,
      "system_tests_verify": 0,
      "coverage_duplication": 0,
      "retrospective": 0
    }
  },
  "priority_order": [
    "adhoc_temp_user_request",
    "environment_tests",
    "external_tests",
    "system_tests_implement",
    "integration_tests_implement",
    "unit_tests",
    "integration_tests_verify",
    "system_tests_verify",
    "scenarios",
    "user_story"
  ],
  "parentQueue": "/TASK_QUEUE.vf.json",
  "theme": "infra_filesystem-mcp"
}