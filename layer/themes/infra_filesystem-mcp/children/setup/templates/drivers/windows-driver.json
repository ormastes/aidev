{
  "name": "windows-driver",
  "description": "Windows kernel driver development template (WDM/KMDF)",
  "type": "os-driver",
  "language": "cpp",
  "platform": "windows",
  "supported_architectures": ["x86", "x86_64", "arm64"],
  "dependencies": {
    "wdk": ">=10.0.22621.0",
    "visual_studio": ">=2022",
    "windows_sdk": ">=10.0.22621.0"
  },
  "files": {
    "src/driver.cpp": "#include <ntddk.h>\n#include <wdf.h>\n\n// Driver entry point declarations\nEXTERN_C_START\nDRIVER_INITIALIZE DriverEntry;\nEVT_WDF_DRIVER_DEVICE_ADD EvtDeviceAdd;\nEVT_WDF_IO_QUEUE_IO_READ EvtIoRead;\nEVT_WDF_IO_QUEUE_IO_WRITE EvtIoWrite;\nEXTERN_C_END\n\n#define DEVICE_NAME L\"\\\\Device\\\\${PROJECT_NAME}\"\n#define SYMLINK_NAME L\"\\\\DosDevices\\\\${PROJECT_NAME}\"\n\nNTSTATUS DriverEntry(\n    _In_ PDRIVER_OBJECT DriverObject,\n    _In_ PUNICODE_STRING RegistryPath\n    )\n{\n    WDF_DRIVER_CONFIG config;\n    NTSTATUS status;\n    \n    KdPrintEx((DPFLTR_IHVDRIVER_ID, DPFLTR_INFO_LEVEL,\n        \"${PROJECT_NAME}: DriverEntry\\n\"));\n    \n    WDF_DRIVER_CONFIG_INIT(&config, EvtDeviceAdd);\n    \n    status = WdfDriverCreate(\n        DriverObject,\n        RegistryPath,\n        WDF_NO_OBJECT_ATTRIBUTES,\n        &config,\n        WDF_NO_HANDLE\n        );\n    \n    if (!NT_SUCCESS(status)) {\n        KdPrintEx((DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL,\n            \"${PROJECT_NAME}: WdfDriverCreate failed 0x%x\\n\", status));\n    }\n    \n    return status;\n}\n\nNTSTATUS EvtDeviceAdd(\n    _In_ WDFDRIVER Driver,\n    _Inout_ PWDFDEVICE_INIT DeviceInit\n    )\n{\n    NTSTATUS status;\n    WDFDEVICE device;\n    WDF_IO_QUEUE_CONFIG queueConfig;\n    WDFQUEUE queue;\n    \n    UNREFERENCED_PARAMETER(Driver);\n    \n    // Create device\n    status = WdfDeviceCreate(&DeviceInit, WDF_NO_OBJECT_ATTRIBUTES, &device);\n    if (!NT_SUCCESS(status)) {\n        return status;\n    }\n    \n    // Configure and create I/O queue\n    WDF_IO_QUEUE_CONFIG_INIT_DEFAULT_QUEUE(\n        &queueConfig,\n        WdfIoQueueDispatchSequential\n        );\n    \n    queueConfig.EvtIoRead = EvtIoRead;\n    queueConfig.EvtIoWrite = EvtIoWrite;\n    \n    status = WdfIoQueueCreate(\n        device,\n        &queueConfig,\n        WDF_NO_OBJECT_ATTRIBUTES,\n        &queue\n        );\n    \n    return status;\n}\n\nVOID EvtIoRead(\n    _In_ WDFQUEUE Queue,\n    _In_ WDFREQUEST Request,\n    _In_ size_t Length\n    )\n{\n    NTSTATUS status;\n    PVOID buffer;\n    const char message[] = \"Hello from Windows driver!\";\n    \n    UNREFERENCED_PARAMETER(Queue);\n    \n    status = WdfRequestRetrieveOutputBuffer(\n        Request,\n        Length,\n        &buffer,\n        NULL\n        );\n    \n    if (NT_SUCCESS(status)) {\n        size_t bytesToCopy = min(Length, sizeof(message));\n        RtlCopyMemory(buffer, message, bytesToCopy);\n        WdfRequestCompleteWithInformation(Request, status, bytesToCopy);\n    } else {\n        WdfRequestComplete(Request, status);\n    }\n}\n\nVOID EvtIoWrite(\n    _In_ WDFQUEUE Queue,\n    _In_ WDFREQUEST Request,\n    _In_ size_t Length\n    )\n{\n    UNREFERENCED_PARAMETER(Queue);\n    \n    KdPrintEx((DPFLTR_IHVDRIVER_ID, DPFLTR_INFO_LEVEL,\n        \"${PROJECT_NAME}: Write request received, length %zu\\n\", Length));\n    \n    WdfRequestCompleteWithInformation(Request, STATUS_SUCCESS, Length);\n}",
    "src/driver.inf": "; ${PROJECT_NAME}.inf\n; Installation file for ${PROJECT_NAME} driver\n\n[Version]\nSignature=\"$WINDOWS NT$\"\nClass=System\nClassGuid={4D36E97D-E325-11CE-BFC1-08002BE10318}\nProvider=%ProviderString%\nDriverVer=01/01/2024,1.0.0.0\nCatalogFile=${PROJECT_NAME}.cat\nPnpLockdown=1\n\n[DestinationDirs]\nDefaultDestDir = 13\n\n[SourceDisksNames]\n1 = %DiskName%,,,\"\"\n\n[SourceDisksFiles]\n${PROJECT_NAME}.sys = 1,,\n\n[Manufacturer]\n%ManufacturerString%=Standard,NT$ARCH$.10.0...22621\n\n[Standard.NT$ARCH$.10.0...22621]\n%${PROJECT_NAME}.DeviceDesc%=DefaultInstall, Root\\${PROJECT_NAME}\n\n[DefaultInstall.NT$ARCH$]\nCopyFiles=Drivers_Dir\n\n[Drivers_Dir]\n${PROJECT_NAME}.sys\n\n[DefaultInstall.NT$ARCH$.Services]\nAddService = ${PROJECT_NAME},%SPSVCINST_ASSOCSERVICE%, ${PROJECT_NAME}_Service_Inst\n\n[${PROJECT_NAME}_Service_Inst]\nDisplayName    = %${PROJECT_NAME}.SVCDESC%\nServiceType    = 1               ; SERVICE_KERNEL_DRIVER\nStartType      = 3               ; SERVICE_DEMAND_START\nErrorControl   = 1               ; SERVICE_ERROR_NORMAL\nServiceBinary  = %13%\\${PROJECT_NAME}.sys\n\n[Strings]\nProviderString = \"${AUTHOR}\"\nManufacturerString = \"${COMPANY}\"\nDiskName = \"${PROJECT_NAME} Installation Disk\"\n${PROJECT_NAME}.DeviceDesc = \"${PROJECT_NAME} Device\"\n${PROJECT_NAME}.SVCDESC = \"${PROJECT_NAME} Driver\"",
    "CMakeLists.txt": "cmake_minimum_required(VERSION 3.20)\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\n# Find Windows Driver Kit\nfind_package(WDK REQUIRED)\n\n# Create driver target\nwdk_add_driver(${PROJECT_NAME}\n    src/driver.cpp\n)\n\n# Set driver properties\ntarget_compile_definitions(${PROJECT_NAME} PRIVATE\n    UNICODE\n    _UNICODE\n)\n\n# Link required libraries\ntarget_link_libraries(${PROJECT_NAME}\n    wdmsec.lib\n    ntoskrnl.lib\n    hal.lib\n    wmilib.lib\n)\n\n# Create INF file\nconfigure_file(\n    ${CMAKE_CURRENT_SOURCE_DIR}/src/driver.inf\n    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.inf\n    @ONLY\n)",
    "build.bat": "@echo off\nREM Windows Driver Build Script\n\nset PROJECT_NAME=${PROJECT_NAME}\nset WDK_PATH=C:\\Program Files (x86)\\Windows Kits\\10\nset VS_PATH=C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\n\necho Building %PROJECT_NAME% driver...\n\nREM Set up build environment\ncall \"%VS_PATH%\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x64\n\nREM Build driver\nmsbuild /p:Configuration=Release /p:Platform=x64 %PROJECT_NAME%.vcxproj\n\nif %ERRORLEVEL% EQU 0 (\n    echo Build successful!\n    echo Driver file: x64\\Release\\%PROJECT_NAME%.sys\n) else (\n    echo Build failed!\n    exit /b 1\n)",
    "test/test_driver.ps1": "# Windows Driver Test Script\n# Requires Administrator privileges\n\n$DriverName = \"${PROJECT_NAME}\"\n$DriverPath = \"./x64/Release/$DriverName.sys\"\n$InfPath = \"./$DriverName.inf\"\n\nWrite-Host \"Testing Windows driver: $DriverName\" -ForegroundColor Green\n\n# Check if running as Administrator\nif (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] \"Administrator\")) {\n    Write-Host \"This script requires Administrator privileges\" -ForegroundColor Red\n    exit 1\n}\n\n# Build the driver\nWrite-Host \"Building driver...\" -ForegroundColor Yellow\n& ./build.bat\nif ($LASTEXITCODE -ne 0) {\n    Write-Host \"Build failed\" -ForegroundColor Red\n    exit 1\n}\n\n# Install the driver\nWrite-Host \"Installing driver...\" -ForegroundColor Yellow\npnputil /add-driver $InfPath /install\n\n# Start the driver service\nWrite-Host \"Starting driver service...\" -ForegroundColor Yellow\nsc.exe start $DriverName\n\n# Test the driver\nWrite-Host \"Testing driver operations...\" -ForegroundColor Yellow\n$device = \"\\\\.\\$DriverName\"\n\ntry {\n    $file = [System.IO.File]::Open($device, 'Open', 'Read')\n    $reader = New-Object System.IO.StreamReader($file)\n    $content = $reader.ReadToEnd()\n    Write-Host \"Read from driver: $content\" -ForegroundColor Green\n    $reader.Close()\n    $file.Close()\n} catch {\n    Write-Host \"Failed to communicate with driver: $_\" -ForegroundColor Red\n}\n\n# Stop the driver\nWrite-Host \"Stopping driver...\" -ForegroundColor Yellow\nsc.exe stop $DriverName\n\n# Uninstall the driver\nWrite-Host \"Uninstalling driver...\" -ForegroundColor Yellow\npnputil /delete-driver $InfPath /uninstall\n\nWrite-Host \"Test complete!\" -ForegroundColor Green",
    ".gitignore": "*.sys\n*.pdb\n*.obj\n*.log\n*.tlog\n*.idb\n*.ilk\n*.exp\n*.lib\nx64/\nx86/\nARM64/\nDebug/\nRelease/\n.vs/\n*.user\n*.filters\n*.vcxproj.user"
  },
  "test_config": {
    "framework": "catch2-cucumber",
    "kernel_test": true,
    "requires_admin": true,
    "test_commands": [
      "powershell.exe -ExecutionPolicy Bypass -File test/test_driver.ps1"
    ]
  }
}