{
  "name": "mobile-react-native",
  "description": "Mobile application using React Native for iOS and Android",
  "type": "gui-mobile",
  "language": "typescript",
  "framework": "react-native",
  "test_framework": "detox",
  "supported_platforms": ["android", "ios"],
  "supported_architectures": ["arm64", "x86_64"],
  "dependencies": {
    "node": ">=18.0.0",
    "bun": ">=9.0.0",
    "java": ">=17 (Android)",
    "xcode": ">=14 (iOS)"
  },
  "npm_packages": {
    "react-native": "^0.72.0",
    "react": "^18.2.0",
    "@types/react": "^18.0.0",
    "@types/react-native": "^0.72.0",
    "typescript": "^5.0.0",
    "detox": "^20.0.0",
    "jest": "^29.0.0",
    "@testing-library/react-native": "^12.0.0"
  },
  "files": {
    "App.tsx": "import React from 'react';\nimport {\n  SafeAreaView,\n  ScrollView,\n  StatusBar,\n  StyleSheet,\n  Text,\n  useColorScheme,\n  View,\n  Button,\n  Alert\n} from 'react-native';\n\nfunction App(): JSX.Element {\n  const isDarkMode = useColorScheme() === 'dark';\n  \n  const handlePress = () => {\n    Alert.alert('Hello', 'Welcome to React Native!');\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />\n      <ScrollView contentInsetAdjustmentBehavior=\"automatic\">\n        <View style={styles.content}>\n          <Text style={styles.title}>${PROJECT_NAME}</Text>\n          <Text style={styles.subtitle}>Built with React Native</Text>\n          <Button title=\"Press Me\" onPress={handlePress} />\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 10,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#666',\n    marginBottom: 20,\n  },\n});\n\nexport default App;",
    "index.js": "import {AppRegistry} from 'react-native';\nimport App from './App';\nimport {name as appName} from './app.json';\n\nAppRegistry.registerComponent(appName, () => App);",
    "app.json": "{\n  \"name\": \"${PROJECT_NAME}\",\n  \"displayName\": \"${PROJECT_NAME}\"\n}",
    "package.json": "{\n  \"name\": \"${PROJECT_NAME}\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"android\": \"react-native run-android\",\n    \"ios\": \"react-native run-ios\",\n    \"start\": \"react-native start\",\n    \"test\": \"jest\",\n    \"test:e2e:android\": \"detox test -c android\",\n    \"test:e2e:ios\": \"detox test -c ios\"\n  }\n}",
    "e2e/app.test.js": "describe('App', () => {\n  beforeAll(async () => {\n    await device.launchApp();\n  });\n\n  beforeEach(async () => {\n    await device.reloadReactNative();\n  });\n\n  it('should show app title', async () => {\n    await expect(element(by.text('${PROJECT_NAME}'))).toBeVisible();\n  });\n\n  it('should show alert on button press', async () => {\n    await element(by.text('Press Me')).tap();\n    await expect(element(by.text('Welcome to React Native!'))).toBeVisible();\n  });\n});",
    ".detoxrc.js": "module.exports = {\n  testRunner: {\n    args: {\n      '$0': 'jest',\n      config: 'e2e/jest.config.js'\n    },\n    jest: {\n      setupFilesAfterEnv: ['<rootDir>/e2e/init.js'],\n      testEnvironment: 'node'\n    }\n  },\n  apps: {\n    'ios': {\n      type: 'ios.app',\n      binaryPath: 'ios/build/Build/Products/Debug-iphonesimulator/${PROJECT_NAME}.app',\n      build: 'xcodebuild -workspace ios/${PROJECT_NAME}.xcworkspace -scheme ${PROJECT_NAME} -configuration Debug -sdk iphonesimulator -derivedDataPath ios/build'\n    },\n    'android': {\n      type: 'android.apk',\n      binaryPath: 'android/app/build/outputs/apk/debug/app-debug.apk',\n      build: 'cd android && ./gradlew assembleDebug assembleAndroidTest -DtestBuildType=debug',\n      reversePorts: [8081]\n    }\n  },\n  devices: {\n    simulator: {\n      type: 'ios.simulator',\n      device: {\n        type: 'iPhone 14'\n      }\n    },\n    emulator: {\n      type: 'android.emulator',\n      device: {\n        avdName: 'Pixel_6_API_33'\n      }\n    }\n  },\n  configurations: {\n    'ios': {\n      device: 'simulator',\n      app: 'ios'\n    },\n    'android': {\n      device: 'emulator',\n      app: 'android'\n    }\n  }\n};"
  }
}