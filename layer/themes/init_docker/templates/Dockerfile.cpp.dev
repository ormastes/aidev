# C++ Development Dockerfile with Debug Support
FROM ubuntu:22.04

# Avoid prompts from apt
ENV DEBIAN_FRONTEND=noninteractive

# Install C++ development tools
RUN apt-get update && apt-get install -y \
    # Compilers
    clang-15 \
    g++-12 \
    # Build tools
    cmake \
    ninja-build \
    make \
    # Debuggers
    gdb \
    lldb-15 \
    # Analysis tools
    valgrind \
    clang-tools-15 \
    clang-format-15 \
    clang-tidy-15 \
    cppcheck \
    # Version control
    git \
    # Package managers
    python3 \
    python3-pip \
    wget \
    curl \
    # Development utilities
    vim \
    tmux \
    htop \
    # Libraries commonly needed
    libboost-all-dev \
    libssl-dev \
    libcurl4-openssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Set clang as default compiler
ENV CC=clang-15
ENV CXX=clang++-15

# Install Conan package manager
RUN pip3 install conan

# Install vcpkg
RUN git clone https://github.com/Microsoft/vcpkg.git /opt/vcpkg && \
    /opt/vcpkg/bootstrap-vcpkg.sh && \
    /opt/vcpkg/vcpkg integrate install

ENV VCPKG_ROOT=/opt/vcpkg
ENV PATH="${VCPKG_ROOT}:${PATH}"

# Install Google Test
RUN cd /tmp && \
    git clone https://github.com/google/googletest.git && \
    cd googletest && \
    cmake -B build -DCMAKE_BUILD_TYPE=Release && \
    cmake --build build && \
    cmake --install build && \
    cd / && rm -rf /tmp/googletest

# Install Catch2
RUN cd /tmp && \
    git clone https://github.com/catchorg/Catch2.git && \
    cd Catch2 && \
    cmake -B build -DCMAKE_BUILD_TYPE=Release && \
    cmake --build build && \
    cmake --install build && \
    cd / && rm -rf /tmp/Catch2

WORKDIR /app

# Copy project files (will be overridden by volume mount in dev)
COPY CMakeLists.txt* ./
COPY conanfile.txt* ./
COPY vcpkg.json* ./
COPY cmake/ ./cmake/
COPY include/ ./include/
COPY src/ ./src/
COPY tests/ ./tests/

# Create build directory
RUN mkdir -p build

# Generate compile_commands.json for IDE support
RUN cd build && \
    cmake .. \
        -DCMAKE_BUILD_TYPE=Debug \
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
        -DENABLE_TESTING=ON \
        -DENABLE_COVERAGE=ON \
        -G Ninja

# Expose GDB server port
EXPOSE 2345

# Expose application port
EXPOSE 8080

# Development entrypoint - can be overridden
CMD ["bash", "-c", "cd build && ninja && ./bin/app"]