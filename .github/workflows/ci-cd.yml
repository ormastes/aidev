name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1

jobs:
  # Code Quality and Testing
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - api-gateway
          - portal
          - monitoring-dashboard
          - web-scraper
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: layer/themes/${{ matrix.service }}/package-lock.json

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          layer/themes/${{ matrix.service }}/node_modules
        key: ${{ runner.os }}-node-${{ matrix.service }}-${{ hashFiles('layer/themes/${{ matrix.service }}/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.service }}-

    - name: Install dependencies
      working-directory: layer/themes/${{ matrix.service }}
      run: npm ci

    - name: Run linter
      working-directory: layer/themes/${{ matrix.service }}
      run: npm run lint || true
      continue-on-error: true

    - name: Run tests
      working-directory: layer/themes/${{ matrix.service }}
      run: npm test -- --coverage --passWithNoTests
      env:
        CI: true

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: layer/themes/${{ matrix.service }}/coverage
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage

    - name: TypeScript check
      working-directory: layer/themes/${{ matrix.service }}
      run: npx tsc --noEmit || true
      continue-on-error: true

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'aidev-platform'
        path: '.'
        format: 'HTML'
        args: >
          --enableRetired
          --enableExperimental

    - name: Upload dependency check results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/

  # Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        service:
          - api-gateway
          - portal
          - monitoring-dashboard
          - web-scraper
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./layer/themes/${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev.aidev-platform.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.DEV_KUBECONFIG }}" | base64 -d > /tmp/kubeconfig
        echo "KUBECONFIG=/tmp/kubeconfig" >> $GITHUB_ENV

    - name: Deploy with Kustomize
      run: |
        kubectl apply -k k8s/overlays/dev
        kubectl rollout status deployment/dev-api-gateway -n aidev-platform-dev
        kubectl rollout status deployment/dev-portal -n aidev-platform-dev
        kubectl rollout status deployment/dev-monitoring-dashboard -n aidev-platform-dev

    - name: Run smoke tests
      run: |
        sleep 30
        curl -f https://dev-api.aidev-platform.com/health || exit 1
        curl -f https://dev-portal.aidev-platform.com/health || exit 1

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.aidev-platform.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > /tmp/kubeconfig
        echo "KUBECONFIG=/tmp/kubeconfig" >> $GITHUB_ENV

    - name: Deploy with Helm
      run: |
        helm upgrade --install aidev-platform ./helm/aidev-platform \
          --namespace aidev-platform-staging \
          --create-namespace \
          --values ./helm/aidev-platform/values.yaml \
          --values ./helm/aidev-platform/values.staging.yaml \
          --set global.imageTag=${{ github.sha }} \
          --wait \
          --timeout 10m

    - name: Run integration tests
      run: |
        npm run test:integration
      env:
        API_URL: https://staging-api.aidev-platform.com
        PORTAL_URL: https://staging-portal.aidev-platform.com

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://aidev-platform.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.PROD_KUBECONFIG }}" | base64 -d > /tmp/kubeconfig
        echo "KUBECONFIG=/tmp/kubeconfig" >> $GITHUB_ENV

    - name: Backup current deployment
      run: |
        kubectl get all -n aidev-platform -o yaml > backup-${{ github.sha }}.yaml
        # Upload to S3 or other backup storage

    - name: Deploy with Helm (Blue-Green)
      run: |
        # Deploy to green environment
        helm upgrade --install aidev-platform-green ./helm/aidev-platform \
          --namespace aidev-platform \
          --values ./helm/aidev-platform/values.yaml \
          --values ./helm/aidev-platform/values.prod.yaml \
          --set global.imageTag=${{ github.ref_name }} \
          --set global.deployment=green \
          --wait \
          --timeout 15m
        
        # Run health checks
        ./scripts/health-check.sh green
        
        # Switch traffic to green
        kubectl patch service api-gateway-service -n aidev-platform \
          -p '{"spec":{"selector":{"deployment":"green"}}}'
        
        # Wait and monitor
        sleep 60
        ./scripts/monitor-deployment.sh
        
        # If successful, remove blue deployment
        helm uninstall aidev-platform-blue -n aidev-platform || true

    - name: Run smoke tests
      run: |
        ./scripts/smoke-tests.sh production
      env:
        API_URL: https://api.aidev-platform.com
        PORTAL_URL: https://portal.aidev-platform.com

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Production deployment ${{ github.ref_name }} - ${{ job.status }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Rollback on failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: deploy-prod
    if: failure()
    
    steps:
    - name: Configure kubectl
      run: |
        echo "${{ secrets.PROD_KUBECONFIG }}" | base64 -d > /tmp/kubeconfig
        echo "KUBECONFIG=/tmp/kubeconfig" >> $GITHUB_ENV

    - name: Rollback to blue deployment
      run: |
        kubectl patch service api-gateway-service -n aidev-platform \
          -p '{"spec":{"selector":{"deployment":"blue"}}}'
        
        helm uninstall aidev-platform-green -n aidev-platform || true

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        text: 'Production deployment rolled back!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}