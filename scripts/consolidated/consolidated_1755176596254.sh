#!/bin/bash

# Consolidated script from 72 similar files

# Common functions:
# - runTests (from setup-calculator-tests.sh)
# - print_status (from setup.sh)
# - print_success (from setup.sh)
# - print_warning (from setup.sh)
# - print_error (from setup.sh)
# - usage (from setup.sh)
# - show_welcome (from setup.sh)
# - check_requirements (from setup.sh)
# - initialize_package (from setup.sh)
# - install_dependencies (from setup.sh)
# - create_tsconfig (from setup.sh)
# - create_jest_config (from setup.sh)
# - create_eslint_config (from setup.sh)
# - create_test_setup (from setup.sh)
# - create_example_test (from setup.sh)
# - create_test_readme (from setup.sh)
# - verify_setup (from setup.sh)
# - main (from setup.sh)
# - print_color (from setup.sh)
# - print_help (from setup.sh)
# - list_templates (from setup.sh)
# - create_default_structure (from setup.sh)
# - create_project (from setup.sh)
# - generate_hello_world (from setup.sh)
# - generate_build_script (from setup.sh)
# - validate_config (from setup.sh)
# - show_template_info (from setup.sh)
# - log_header (from run_tests.sh)
# - log_test (from run_tests.sh)
# - log_pass (from run_tests.sh)
# - log_fail (from run_tests.sh)
# - log_skip (from run_tests.sh)
# - log_info (from run_tests.sh)
# - manual_verify (from run_tests.sh)
# - run_test (from run_tests.sh)
# - test_typescript_cli_ink (from run_tests.sh)
# - test_python_cli (from run_tests.sh)
# - test_cpp_library_docker (from run_tests.sh)
# - test_cpp_clang_plugin_docker (from run_tests.sh)
# - test_cpp_linux_driver (from run_tests.sh)
# - test_web_server_express (from run_tests.sh)
# - test_python_uv_environment (from run_tests.sh)
# - test_mobile_react_native (from run_tests.sh)
# - test_cross_compilation (from run_tests.sh)
# - test_qemu_environment (from run_tests.sh)
# - log_step (from setup_steps.sh)
# - log_success (from setup_steps.sh)
# - log_error (from setup_steps.sh)
# - log_pending (from setup_steps.sh)
# - given_setup_system_installed (from setup_steps.sh)
# - given_clean_test_directory (from setup_steps.sh)
# - given_dependencies_available (from setup_steps.sh)
# - given_application_type (from setup_steps.sh)
# - given_language (from setup_steps.sh)
# - given_framework (from setup_steps.sh)
# - given_environment (from setup_steps.sh)
# - when_run_setup (from setup_steps.sh)
# - then_project_created (from setup_steps.sh)
# - then_files_exist (from setup_steps.sh)
# - when_run_command (from setup_steps.sh)
# - then_see_output (from setup_steps.sh)
# - then_build_successful (from setup_steps.sh)
# - then_docker_configured (from setup_steps.sh)
# - then_binary_exists (from setup_steps.sh)
# - cleanup_test (from setup_steps.sh)
# - run_manual_test (from setup_steps.sh)
# - test_cpp_library (from verify_hello_world.sh)
# - test_clang_plugin (from verify_hello_world.sh)
# - test_regular_cli (from verify_hello_world.sh)
# - log_warning (from test-all-themes.sh)
# - log_theme (from test-all-themes.sh)
# - test_theme (from test-all-themes.sh)
# - test_themes_in_directory (from test-all-themes.sh)
# - test_root_themes (from test-all-themes.sh)
# - test_setup_themes (from test-all-themes.sh)
# - aggregate_coverage (from test-all-themes.sh)
# - check_bun_installation (from migrate-to-bun.sh)
# - clean_node_modules (from migrate-to-bun.sh)
# - clean_package_locks (from migrate-to-bun.sh)
# - install_with_bun (from migrate-to-bun.sh)
# - create_bun_config (from migrate-to-bun.sh)
# - update_package_scripts (from migrate-to-bun.sh)
# - verify_migration (from migrate-to-bun.sh)
# - run_component_tests (from run-mock-free-tests.sh)
# - start_with_logging (from demo-themes-intercepted.sh)
# - cleanup (from demo-themes-intercepted.sh)
# - runE2ETest (from setup-story-reporter-demo.sh)
# - check_target_directory (from folder.sh)
# - create_directory_structure (from folder.sh)
# - copy_essential_files (from folder.sh)
# - create_mcp_configuration (from folder.sh)
# - create_setup_script (from folder.sh)
# - create_mcp_server (from folder.sh)
# - create_package_json (from folder.sh)
# - check_package_json (from test-health-check.sh)
# - run_tests (from test-health-check.sh)
# - check_coverage (from test-health-check.sh)
# - update_file (from update-npm-to-bun.sh)
# - update_markdown_files (from update-npm-to-bun.sh)
# - update_shell_scripts (from update-npm-to-bun.sh)
# - update_js_ts_files (from update-npm-to-bun.sh)
# - update_json_files (from update-npm-to-bun.sh)
# - check_port (from test-e2e.sh)
# - check_prerequisites (from build-linux-kernel.sh)
# - download_kernel (from build-linux-kernel.sh)
# - configure_kernel (from build-linux-kernel.sh)
# - check_rust_available (from build-linux-kernel.sh)
# - build_kernel (from build-linux-kernel.sh)
# - build_modules (from build-linux-kernel.sh)
# - create_initramfs (from build-linux-kernel.sh)
# - create_boot_script (from build-linux-kernel.sh)
# - clean_build (from build-linux-kernel.sh)
# - init_directories (from qemu-vm-manager.sh)
# - list_vms (from qemu-vm-manager.sh)
# - create_vm (from qemu-vm-manager.sh)
# - start_vm (from qemu-vm-manager.sh)
# - stop_vm (from qemu-vm-manager.sh)
# - delete_vm (from qemu-vm-manager.sh)
# - connect_vm (from qemu-vm-manager.sh)
# - info_vm (from qemu-vm-manager.sh)
# - find_free_port (from qemu-vm-manager.sh)
# - install_os (from qemu-vm-manager.sh)
# - check_command (from setup-qemu-environment.sh)
# - check_dependencies (from setup_qemu_image.sh)
# - download_iso (from setup_qemu_image.sh)
# - create_image (from setup_qemu_image.sh)
# - create_cloud_init (from setup_qemu_image.sh)
# - install_ubuntu (from setup_qemu_image.sh)
# - create_scripts (from setup_qemu_image.sh)
# - check_setting (from verify-config.sh)
# - check_script (from verify-config.sh)
# - check_security_compliance (from fix-port-security.sh)
