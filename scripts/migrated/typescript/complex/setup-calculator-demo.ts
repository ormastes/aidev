#!/usr/bin/env bun
/**
 * Migrated from: setup-calculator-demo.sh
 * Auto-generated TypeScript - 2025-08-16T04:57:27.652Z
 */

import { readFile, writeFile, mkdir, rm, copyFile, rename, access } from 'fs/promises';
import { join, dirname, basename, resolve } from 'path';
import { existsSync } from 'fs';
import { $ } from 'bun';

async function main() {
  // GUI Calculator Demo Setup Script
  // This script sets up a GUI calculator demo with AI Dev Portal theme integration
  await $`set -e`;
  await $`SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"`;
  await $`PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"`;
  await $`DEMO_NAME="gui-calculator"`;
  await $`DEMO_DIR="$PROJECT_ROOT/demo/$DEMO_NAME"`;
  console.log("=== GUI Calculator Demo Setup ===");
  console.log("Setting up GUI calculator demo with AI Dev Portal integration...");
  // Step 1: Create demo using the existing demo.py script
  console.log("Step 1: Creating demo project structure...");
  process.chdir(""$SCRIPT_DIR/setup"");
  await $`python3 demo.py "$DEMO_NAME" --language typescript`;
  // Step 2: Navigate to demo directory
  process.chdir(""$DEMO_DIR"");
  // Step 3: Update package.json with GUI dependencies
  console.log("Step 3: Adding GUI dependencies...");
  await $`npm install --save react react-dom @types/react @types/react-dom`;
  await $`npm install --save-dev webpack webpack-cli webpack-dev-server html-webpack-plugin css-loader style-loader ts-loader`;
  // Step 4: Create webpack configuration
  console.log("Step 4: Creating webpack configuration...");
  await $`cat > webpack.config.js << 'EOF'`;
  await $`const path = require('path');`;
  await $`const HtmlWebpackPlugin = require('html-webpack-plugin');`;
  await $`module.exports = {`;
  await $`mode: process.env.NODE_ENV || 'development',`;
  await $`entry: './src/client/index.tsx',`;
  await $`output: {`;
  await $`path: path.resolve(__dirname, 'dist/public'),`;
  await $`filename: 'bundle.js',`;
  await $`publicPath: '/'`;
  await $`},`;
  await $`resolve: {`;
  await $`extensions: ['.ts', '.tsx', '.js', '.jsx']`;
  await $`},`;
  await $`module: {`;
  await $`rules: [`;
  await $`{`;
  await $`test: /\.tsx?$/,`;
  await $`use: 'ts-loader',`;
  await $`exclude: /node_modules/`;
  await $`},`;
  await $`{`;
  await $`test: /\.css$/,`;
  await $`use: ['style-loader', 'css-loader']`;
  await $`}`;
  await $`]`;
  await $`},`;
  await $`plugins: [`;
  await $`new HtmlWebpackPlugin({`;
  await $`template: './src/client/index.html',`;
  await $`title: 'GUI Calculator - AI Dev Portal'`;
  await $`})`;
  await $`],`;
  await $`devServer: {`;
  await $`port: 3310,`;
  await $`hot: true,`;
  await $`historyApiFallback: true,`;
  await $`proxy: {`;
  await $`'/api': 'http://localhost:3311'`;
  await $`}`;
  await $`}`;
  await $`};`;
  await $`EOF`;
  // Step 5: Create client directory structure
  console.log("Step 5: Creating client application...");
  await mkdir("src/client/components src/client/styles", { recursive: true });
  // Step 6: Create main React component
  await $`cat > src/client/components/Calculator.tsx << 'EOF'`;
  await $`import React, { useState } from 'react';`;
  await $`import '../styles/calculator.css';`;
  process.env.const Calculator: React.FC  = " () => {";
  await $`const [display, setDisplay] = useState('0');`;
  await $`const [previousValue, setPreviousValue] = useState<number | null>(null);`;
  await $`const [operation, setOperation] = useState<string | null>(null);`;
  await $`const [waitingForNewValue, setWaitingForNewValue] = useState(false);`;
  await $`const inputNumber = (num: string) => {`;
  await $`if (waitingForNewValue) {`;
  await $`setDisplay(num);`;
  await $`setWaitingForNewValue(false);`;
  await $`} else {`;
  await $`setDisplay(display === '0' ? num : display + num);`;
  await $`}`;
  await $`};`;
  await $`const inputOperation = (nextOperation: string) => {`;
  await $`const inputValue = parseFloat(display);`;
  await $`if (previousValue === null) {`;
  await $`setPreviousValue(inputValue);`;
  await $`} else if (operation) {`;
  await $`const currentValue = previousValue || 0;`;
  await $`const newValue = calculate(currentValue, inputValue, operation);`;
  await $`setDisplay(String(newValue));`;
  await $`setPreviousValue(newValue);`;
  await $`}`;
  await $`setWaitingForNewValue(true);`;
  await $`setOperation(nextOperation);`;
  await $`};`;
  await $`const calculate = (firstValue: number, secondValue: number, operation: string) => {`;
  await $`switch (operation) {`;
  await $`case '+': return firstValue + secondValue;`;
  await $`case '-': return firstValue - secondValue;`;
  await $`case '*': return firstValue * secondValue;`;
  await $`case '/': return firstValue / secondValue;`;
  await $`case '=': return secondValue;`;
  await $`default: return secondValue;`;
  await $`}`;
  await $`};`;
  await $`const performCalculation = () => {`;
  await $`const inputValue = parseFloat(display);`;
  await $`if (previousValue !== null && operation) {`;
  await $`const newValue = calculate(previousValue, inputValue, operation);`;
  await $`setDisplay(String(newValue));`;
  await $`setPreviousValue(null);`;
  await $`setOperation(null);`;
  await $`setWaitingForNewValue(true);`;
  await $`}`;
  await $`};`;
  await $`const clear = () => {`;
  await $`setDisplay('0');`;
  await $`setPreviousValue(null);`;
  await $`setOperation(null);`;
  await $`setWaitingForNewValue(false);`;
  await $`};`;
  await $`const buttons = [`;
  await $`['C', '+/-', '%', '÷'],`;
  await $`['7', '8', '9', '×'],`;
  await $`['4', '5', '6', '-'],`;
  await $`['1', '2', '3', '+'],`;
  await $`['0', '.', '=']`;
  await $`];`;
  await $`const handleButtonClick = (btn: string) => {`;
  await $`if (btn === 'C') {`;
  await $`clear();`;
  await $`} else if (btn === '=') {`;
  await $`performCalculation();`;
  await $`} else if (['+', '-', '×', '÷'].includes(btn)) {`;
  await $`const op = btn === '×' ? '*' : btn === '÷' ? '/' : btn;`;
  await $`inputOperation(op);`;
  await $`} else if (btn === '.') {`;
  await $`if (!display.includes('.')) {`;
  await $`setDisplay(display + '.');`;
  await $`}`;
  await $`} else if (btn === '+/-') {`;
  await $`setDisplay(String(parseFloat(display) * -1));`;
  await $`} else if (btn === '%') {`;
  await $`setDisplay(String(parseFloat(display) / 100));`;
  await $`} else {`;
  await $`inputNumber(btn);`;
  await $`}`;
  await $`};`;
  await $`return (`;
  await $`<div className="calculator">`;
  await $`<div className="display">{display}</div>`;
  await $`<div className="buttons">`;
  await $`{buttons.map((row, i) => (`;
  await $`<div key={i} className="button-row">`;
  await $`{row.map((btn) => (`;
  await $`<button`;
  await $`key={btn}`;
  await $`className={`button ${btn === '0' ? 'button-wide' : ''} ${`;
  await $`['+', '-', '×', '÷', '='].includes(btn) ? 'button-operator' : ''`;
  await $`}`}`;
  await $`onClick={() => handleButtonClick(btn)}`;
  await $`>`;
  await $`{btn}`;
  await $`</button>`;
  await $`))}`;
  await $`</div>`;
  await $`))}`;
  await $`</div>`;
  await $`</div>`;
  await $`);`;
  await $`};`;
  await $`EOF`;
  // Step 7: Create App component
  await $`cat > src/client/App.tsx << 'EOF'`;
  await $`import React from 'react';`;
  await $`import { Calculator } from './components/Calculator';`;
  await $`import './styles/aidev-theme.css';`;
  await $`import './styles/app.css';`;
  process.env.const App: React.FC  = " () => {";
  await $`return (`;
  await $`<div className="app-container">`;
  await $`<header className="app-header">`;
  await $`<h1>GUI Calculator</h1>`;
  await $`<p className="subtitle">AI Dev Portal Demo</p>`;
  await $`</header>`;
  await $`<main className="app-main">`;
  await $`<Calculator />`;
  await $`</main>`;
  await $`<footer className="app-footer">`;
  await $`<p>Built with AI Dev Portal Theme</p>`;
  await $`</footer>`;
  await $`</div>`;
  await $`);`;
  await $`};`;
  await $`EOF`;
  // Step 8: Create entry point
  await $`cat > src/client/index.tsx << 'EOF'`;
  await $`import React from 'react';`;
  await $`import ReactDOM from 'react-dom/client';`;
  await $`import { App } from './App';`;
  await $`const root = ReactDOM.createRoot(`;
  await $`document.getElementById('root') as HTMLElement`;
  await $`);`;
  await $`root.render(`;
  await $`<React.StrictMode>`;
  await $`<App />`;
  await $`</React.StrictMode>`;
  await $`);`;
  await $`EOF`;
  // Step 9: Create HTML template
  await $`cat > src/client/index.html << 'EOF'`;
  await $`<!DOCTYPE html>`;
  await $`<html lang="en">`;
  await $`<head>`;
  await $`<meta charset="UTF-8">`;
  await $`<meta name="viewport" content="width=device-width, initial-scale=1.0">`;
  await $`<title>GUI Calculator - AI Dev Portal</title>`;
  await $`</head>`;
  await $`<body>`;
  await $`<div id="root"></div>`;
  await $`</body>`;
  await $`</html>`;
  await $`EOF`;
  // Step 10: Create AI Dev Portal theme CSS
  await $`cat > src/client/styles/aidev-theme.css << 'EOF'`;
  await $`:root {`;
  await $`--primary-color: #2563eb;`;
  await $`--primary-hover: #1d4ed8;`;
  await $`--secondary-color: #10b981;`;
  await $`--accent-color: #8b5cf6;`;
  await $`--background-color: #f9fafb;`;
  await $`--surface-color: #ffffff;`;
  await $`--text-primary: #111827;`;
  await $`--text-secondary: #6b7280;`;
  await $`--border-color: #e5e7eb;`;
  await $`--shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);`;
  await $`--shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);`;
  await $`--shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);`;
  await $`--radius-sm: 0.375rem;`;
  await $`--radius-md: 0.5rem;`;
  await $`--radius-lg: 0.75rem;`;
  await $`}`;
  await $`* {`;
  await $`margin: 0;`;
  await $`padding: 0;`;
  await $`box-sizing: border-box;`;
  await $`}`;
  await $`body {`;
  await $`font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;`;
  await $`background-color: var(--background-color);`;
  await $`color: var(--text-primary);`;
  await $`line-height: 1.6;`;
  await $`}`;
  await $`EOF`;
  // Step 11: Create app styles
  await $`cat > src/client/styles/app.css << 'EOF'`;
  await $`.app-container {`;
  await $`min-height: 100vh;`;
  await $`display: flex;`;
  await $`flex-direction: column;`;
  await $`align-items: center;`;
  await $`}`;
  await $`.app-header {`;
  await $`width: 100%;`;
  await $`background-color: var(--surface-color);`;
  await $`border-bottom: 1px solid var(--border-color);`;
  await $`padding: 2rem;`;
  await $`text-align: center;`;
  await $`box-shadow: var(--shadow-sm);`;
  await $`}`;
  await $`.app-header h1 {`;
  await $`color: var(--primary-color);`;
  await $`margin-bottom: 0.5rem;`;
  await $`}`;
  await $`.subtitle {`;
  await $`color: var(--text-secondary);`;
  await $`font-size: 0.875rem;`;
  await $`}`;
  await $`.app-main {`;
  await $`flex: 1;`;
  await $`padding: 2rem;`;
  await $`display: flex;`;
  await $`align-items: center;`;
  await $`justify-content: center;`;
  await $`}`;
  await $`.app-footer {`;
  await $`width: 100%;`;
  await $`padding: 1rem;`;
  await $`text-align: center;`;
  await $`color: var(--text-secondary);`;
  await $`font-size: 0.875rem;`;
  await $`border-top: 1px solid var(--border-color);`;
  await $`}`;
  await $`EOF`;
  // Step 12: Create calculator styles
  await $`cat > src/client/styles/calculator.css << 'EOF'`;
  await $`.calculator {`;
  await $`background-color: var(--surface-color);`;
  await $`border-radius: var(--radius-lg);`;
  await $`box-shadow: var(--shadow-lg);`;
  await $`padding: 1.5rem;`;
  await $`max-width: 320px;`;
  await $`}`;
  await $`.display {`;
  await $`background-color: var(--background-color);`;
  await $`border: 1px solid var(--border-color);`;
  await $`border-radius: var(--radius-md);`;
  await $`padding: 1rem;`;
  await $`text-align: right;`;
  await $`font-size: 2rem;`;
  await $`font-weight: 500;`;
  await $`margin-bottom: 1rem;`;
  await $`min-height: 60px;`;
  await $`display: flex;`;
  await $`align-items: center;`;
  await $`justify-content: flex-end;`;
  await $`overflow: hidden;`;
  await $`}`;
  await $`.buttons {`;
  await $`display: flex;`;
  await $`flex-direction: column;`;
  await $`gap: 0.5rem;`;
  await $`}`;
  await $`.button-row {`;
  await $`display: flex;`;
  await $`gap: 0.5rem;`;
  await $`}`;
  await $`.button {`;
  await $`flex: 1;`;
  await $`padding: 1.25rem;`;
  await $`font-size: 1.25rem;`;
  await $`font-weight: 500;`;
  await $`border: none;`;
  await $`border-radius: var(--radius-md);`;
  await $`background-color: var(--background-color);`;
  await $`color: var(--text-primary);`;
  await $`cursor: pointer;`;
  await $`transition: all 0.2s;`;
  await $`}`;
  await $`.button:hover {`;
  await $`background-color: var(--border-color);`;
  await $`}`;
  await $`.button:active {`;
  await $`transform: scale(0.95);`;
  await $`}`;
  await $`.button-wide {`;
  await $`flex: 2.13;`;
  await $`}`;
  await $`.button-operator {`;
  await $`background-color: var(--primary-color);`;
  await $`color: white;`;
  await $`}`;
  await $`.button-operator:hover {`;
  await $`background-color: var(--primary-hover);`;
  await $`}`;
  await $`EOF`;
  // Step 13: Update tsconfig for JSX
  console.log("Step 13: Updating TypeScript configuration...");
  await $`cat > tsconfig.json << 'EOF'`;
  await $`{`;
  await $`"compilerOptions": {`;
  await $`"target": "ES2020",`;
  await $`"module": "commonjs",`;
  await $`"lib": ["ES2020", "DOM"],`;
  await $`"jsx": "react",`;
  await $`"outDir": "./dist",`;
  await $`"strict": true,`;
  await $`"esModuleInterop": true,`;
  await $`"skipLibCheck": true,`;
  await $`"forceConsistentCasingInFileNames": true,`;
  await $`"resolveJsonModule": true,`;
  await $`"moduleResolution": "node"`;
  await $`},`;
  await $`"include": ["src/**/*"],`;
  await $`"exclude": ["node_modules", "dist"]`;
  await $`}`;
  await $`EOF`;
  // Step 14: Update package.json scripts
  console.log("Step 14: Updating package.json scripts...");
  await $`node -e "`;
  await $`const fs = require('fs');`;
  await $`const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));`;
  await $`pkg.scripts = {`;
  await $`...pkg.scripts,`;
  await $`'dev': 'webpack serve --mode development',`;
  await $`'build': 'webpack --mode production',`;
  await $`'start': 'npm run build && node dist/server.js',`;
  await $`'test': 'jest'`;
  await $`};`;
  await $`fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));`;
  await $`"`;
  // Step 15: Create a simple backend server
  console.log("Step 15: Creating backend server...");
  await $`cat > src/server.ts << 'EOF'`;
  await $`import express from 'express';`;
  await $`import path from 'path';`;
  await $`const app = express();`;
  await $`const PORT = process.env.PORT || 3311;`;
  await $`app.use(express.json());`;
  await $`app.use(express.static(path.join(__dirname, 'public')));`;
  // API endpoint for calculator history (optional)
  await $`app.get('/api/health', (req, res) => {`;
  await $`res.json({ status: 'healthy', service: 'gui-calculator' });`;
  await $`});`;
  await $`app.get('*', (req, res) => {`;
  await $`res.sendFile(path.join(__dirname, 'public', 'index.html'));`;
  await $`});`;
  await $`app.listen(PORT, () => {`;
  await $`console.log(`GUI Calculator server running on port ${PORT}`);`;
  await $`});`;
  await $`EOF`;
  // Step 16: Install dependencies
  console.log("Step 16: Installing all dependencies...");
  await $`npm install`;
  // Step 17: Create README
  console.log("Step 17: Creating README...");
  await $`cat > README.md << 'EOF'`;
  // GUI Calculator Demo
  await $`A modern calculator application built with React and TypeScript, featuring the AI Dev Portal theme.`;
  // # Features
  await $`- Modern, responsive UI with AI Dev Portal theme`;
  await $`- Basic arithmetic operations (+, -, ×, ÷)`;
  await $`- Clear function`;
  await $`- Decimal point support`;
  await $`- Percentage calculation`;
  await $`- Sign toggle (+/-)`;
  // # Development
  await $````bash`;
  // Install dependencies
  await $`npm install`;
  // Run development server
  await $`npm run dev`;
  // Build for production
  await $`npm run build`;
  // Start production server
  await $`npm start`;
  await $`````;
  // # Ports
  await $`- Development: http://localhost:3310 (webpack-dev-server)`;
  await $`- Production: http://localhost:3311 (Express server)`;
  // # Integration with AI Dev Portal
  await $`This calculator demo uses the AI Dev Portal theme and can be integrated with:`;
  await $`- GUI Selector Server (port 3402)`;
  await $`- Story Reporter (port 3401)`;
  await $`- AI Dev Portal main app (port 3456)`;
  // # Testing
  await $````bash`;
  await $`npm test`;
  await $`````;
  await $`EOF`;
  console.log("=== Setup Complete ===");
  console.log("");
  console.log("GUI Calculator demo has been created at: $DEMO_DIR");
  console.log("");
  console.log("To start the development server:");
  console.log("  cd $DEMO_DIR");
  console.log("  npm run dev");
  console.log("");
  console.log("The calculator will be available at:");
  console.log("  - Development: http://localhost:3310");
  console.log("  - Production: http://localhost:3311");
  console.log("");
  console.log("To integrate with GUI Selector:");
  console.log("  1. Start the GUI Selector Server (port 3402)");
  console.log("  2. Navigate to the template selection page");
  console.log("  3. Select a template for your calculator UI");
}

// Run main
if (import.meta.main) {
  main().catch(console.error);
}