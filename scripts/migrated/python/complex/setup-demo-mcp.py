#!/usr/bin/env python3
"""
Migrated from: setup-demo-mcp.sh
Auto-generated Python - 2025-08-16T04:57:27.698Z
"""

import os
import sys
import subprocess
import shutil
import glob
from pathlib import Path

def main():
    # Setup and Test Enhanced MCP Server Demo
    # This script creates a demo environment and installs the enhanced MCP server
    subprocess.run("set -e", shell=True)
    print("🚀 Setting up Enhanced MCP Demo Environment")
    print("===========================================")
    # Get script directory
    subprocess.run("SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"", shell=True)
    subprocess.run("PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"", shell=True)
    # Create demo directory
    subprocess.run("DEMO_DIR="/tmp/mcp-demo-$(date +%s)"", shell=True)
    print("📁 Creating demo directory: $DEMO_DIR")
    Path(""$DEMO_DIR"").mkdir(parents=True, exist_ok=True)
    # Initialize demo environment
    print("📋 Initializing demo environment structure...")
    subprocess.run("cat > "$DEMO_DIR/init-demo.js" << 'EOF'", shell=True)
    subprocess.run("const fs = require('fs').promises;", shell=True)
    subprocess.run("const path = require('path');", shell=True)
    subprocess.run("async function initDemo() {", shell=True)
    subprocess.run("const demoDir = process.argv[2] || process.cwd();", shell=True)
    subprocess.run("// Create directory structure", shell=True)
    subprocess.run("const dirs = [", shell=True)
    subprocess.run("'layer/themes/infra_filesystem-mcp/children',", shell=True)
    subprocess.run("'layer/themes/infra_filesystem-mcp/tests',", shell=True)
    subprocess.run("'layer/themes/infra_filesystem-mcp/schemas',", shell=True)
    subprocess.run("'gen/doc',", shell=True)
    subprocess.run("'gen/history/retrospect',", shell=True)
    subprocess.run("'temp'", shell=True)
    subprocess.run("];", shell=True)
    subprocess.run("for (const dir of dirs) {", shell=True)
    subprocess.run("await fs.mkdir(path.join(demoDir, dir), { recursive: true });", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("// Create required JSON files", shell=True)
    subprocess.run("const taskQueue = {", shell=True)
    subprocess.run("taskQueues: {", shell=True)
    subprocess.run("critical: [],", shell=True)
    subprocess.run("high: [],", shell=True)
    subprocess.run("medium: [],", shell=True)
    subprocess.run("low: [],", shell=True)
    subprocess.run("completed: []", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("working: [],", shell=True)
    subprocess.run("metadata: {", shell=True)
    subprocess.run("totalTasks: 0,", shell=True)
    subprocess.run("lastUpdated: new Date().toISOString()", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("const features = {", shell=True)
    subprocess.run("metadata: { level: 'root', version: '1.0.0' },", shell=True)
    subprocess.run("features: {", shell=True)
    subprocess.run("platform: [],", shell=True)
    subprocess.run("infrastructure: []", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("const artifacts = {", shell=True)
    subprocess.run("metadata: { version: '1.0.0', artifact_count: 0 },", shell=True)
    subprocess.run("artifacts: []", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("await fs.writeFile(", shell=True)
    subprocess.run("path.join(demoDir, 'TASK_QUEUE.vf.json'),", shell=True)
    subprocess.run("JSON.stringify(taskQueue, null, 2)", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("await fs.writeFile(", shell=True)
    subprocess.run("path.join(demoDir, 'FEATURE.vf.json'),", shell=True)
    subprocess.run("JSON.stringify(features, null, 2)", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("await fs.writeFile(", shell=True)
    subprocess.run("path.join(demoDir, 'ARTIFACTS.vf.json'),", shell=True)
    subprocess.run("JSON.stringify(artifacts, null, 2)", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("// Create CLAUDE.md", shell=True)
    subprocess.run("await fs.writeFile(", shell=True)
    subprocess.run("path.join(demoDir, 'CLAUDE.md'),", shell=True)
    subprocess.run("`# Demo Environment", shell=True)
    subprocess.run("This is a test environment for the Enhanced MCP Server with artifact validation.", shell=True)
    # # Features
    subprocess.run("- Artifact requirement checking", shell=True)
    subprocess.run("- Task dependency validation", shell=True)
    subprocess.run("- Feature-task linking", shell=True)
    subprocess.run("- Lifecycle state management", shell=True)
    subprocess.run("`", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("console.log('✅ Demo environment initialized');", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("initDemo().catch(console.error);", shell=True)
    subprocess.run("EOF", shell=True)
    subprocess.run("node "$DEMO_DIR/init-demo.js" "$DEMO_DIR"", shell=True)
    # Copy necessary files
    print("📦 Copying MCP server files...")
    shutil.copy2("-r "$PROJECT_ROOT/dist" "$DEMO_DIR/dist" 2>/dev/null || echo "⚠️  No dist folder found, will", "build"")
    shutil.copy2("-r "$PROJECT_ROOT/src" "$DEMO_DIR/src" 2>/dev/null || echo "⚠️  No src folder", "found"")
    shutil.copy2(""$PROJECT_ROOT/package.json"", ""$DEMO_DIR/package.json"")
    shutil.copy2(""$PROJECT_ROOT/mcp-server-enhanced.js"", ""$DEMO_DIR/mcp-server-enhanced.js"")
    # Copy schema files
    Path(""$DEMO_DIR/layer/themes/infra_filesystem-mcp/schemas"").mkdir(parents=True, exist_ok=True)
    if -f "$PROJECT_ROOT/schemas/artifact_patterns.json" :; then
    shutil.copy2(""$PROJECT_ROOT/schemas/artifact_patterns.json"", ""$DEMO_DIR/layer/themes/infra_filesystem-mcp/schemas/"")
    # Build if needed
    if ! -d "$DEMO_DIR/dist" :; then
    print("🔨 Building TypeScript files...")
    os.chdir(""$PROJECT_ROOT"")
    subprocess.run("npm run build", shell=True)
    shutil.copy2("-r "$PROJECT_ROOT/dist"", ""$DEMO_DIR/dist"")
    # Create test script
    print("🧪 Creating test script...")
    subprocess.run("cat > "$DEMO_DIR/test-mcp.js" << 'EOF'", shell=True)
    subprocess.run("const EnhancedFilesystemMCPServer = require('./mcp-server-enhanced.js');", shell=True)
    subprocess.run("async function testMCP() {", shell=True)
    subprocess.run("console.log('\n🧪 Testing Enhanced MCP Server\n');", shell=True)
    subprocess.run("const server = new EnhancedFilesystemMCPServer(process.cwd(), true);", shell=True)
    subprocess.run("// Test 1: Startup", shell=True)
    subprocess.run("console.log('Test 1: Startup');", shell=True)
    subprocess.run("const startup = await server.handleRequest('vf_startup', {});", shell=True)
    subprocess.run("console.log('✅ Startup:', startup.status === 'ready' ? 'PASSED' : 'FAILED');", shell=True)
    subprocess.run("console.log('   Features:', Object.keys(startup.features).join(', '));", shell=True)
    subprocess.run("// Test 2: Try to push task without artifacts (should be refused)", shell=True)
    subprocess.run("console.log('\nTest 2: Push task requiring artifacts (should be refused)');", shell=True)
    subprocess.run("const pushResult = await server.handleRequest('vf_push_task_validated', {", shell=True)
    subprocess.run("task: {", shell=True)
    subprocess.run("id: 'deploy-test',", shell=True)
    subprocess.run("type: 'deployment',", shell=True)
    subprocess.run("content: { title: 'Deploy feature' },", shell=True)
    subprocess.run("artifactRequirements: [", shell=True)
    subprocess.run("{ type: 'source_code', minCount: 1, mustExist: true },", shell=True)
    subprocess.run("{ type: 'test_code', minCount: 1, mustExist: true }", shell=True)
    subprocess.run("],", shell=True)
    subprocess.run("status: 'pending'", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("priority: 'high'", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("console.log('✅ Validation:', pushResult.allowed === false ? 'CORRECTLY REFUSED' : 'FAILED');", shell=True)
    subprocess.run("if (pushResult.errors) {", shell=True)
    subprocess.run("console.log('   Errors:', pushResult.errors.join('; '));", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("// Test 3: Save artifact with adhoc type (requires reason)", shell=True)
    subprocess.run("console.log('\nTest 3: Save adhoc artifact without reason (should be refused)');", shell=True)
    subprocess.run("const adhocResult = await server.handleRequest('vf_save_artifact', {", shell=True)
    subprocess.run("content: 'test content',", shell=True)
    subprocess.run("type: 'adhoc'", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("console.log('✅ Adhoc validation:', adhocResult.success === false ? 'CORRECTLY REFUSED' : 'FAILED');", shell=True)
    subprocess.run("console.log('   Message:', adhocResult.message);", shell=True)
    subprocess.run("// Test 4: Save proper artifact", shell=True)
    subprocess.run("console.log('\nTest 4: Save source code artifact');", shell=True)
    subprocess.run("const saveResult = await server.handleRequest('vf_save_artifact', {", shell=True)
    subprocess.run("content: 'export class TestClass {}',", shell=True)
    subprocess.run("type: 'source_code',", shell=True)
    subprocess.run("metadata: { state: 'draft' }", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("console.log('✅ Save artifact:', saveResult.success ? 'PASSED' : 'FAILED');", shell=True)
    subprocess.run("// Test 5: Get queue status", shell=True)
    subprocess.run("console.log('\nTest 5: Get queue status');", shell=True)
    subprocess.run("const status = await server.handleRequest('vf_get_queue_status', {});", shell=True)
    subprocess.run("console.log('✅ Queue status:');", shell=True)
    subprocess.run("console.log('   Total tasks:', status.totalTasks);", shell=True)
    subprocess.run("console.log('   Ready tasks:', status.readyTasks);", shell=True)
    subprocess.run("console.log('   Blocked tasks:', status.blockedTasks);", shell=True)
    subprocess.run("console.log('   Invalid tasks:', status.invalidTasks);", shell=True)
    subprocess.run("// Test 6: Validate task queue", shell=True)
    subprocess.run("console.log('\nTest 6: Validate entire task queue');", shell=True)
    subprocess.run("const validation = await server.handleRequest('vf_validate_task_queue', {});", shell=True)
    subprocess.run("console.log('✅ Queue validation:', validation.isValid ? 'VALID' : 'INVALID');", shell=True)
    subprocess.run("console.log('   Has circular dependencies:', validation.hasCircularDependencies);", shell=True)
    subprocess.run("console.log('\n✨ All tests completed!');", shell=True)
    subprocess.run("console.log('📊 Summary: The enhanced MCP server correctly refuses invalid operations');", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("testMCP().catch(console.error);", shell=True)
    subprocess.run("EOF", shell=True)
    # Run tests
    print("")
    print("🧪 Running MCP tests...")
    os.chdir(""$DEMO_DIR"")
    subprocess.run("node test-mcp.js", shell=True)
    # Create MCP config for Claude Code
    print("")
    print("📝 Creating MCP configuration...")
    subprocess.run("cat > "$DEMO_DIR/mcp-config.json" << EOF", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run(""mcpServers": {", shell=True)
    subprocess.run(""filesystem-mcp-enhanced": {", shell=True)
    subprocess.run(""command": "node",", shell=True)
    subprocess.run(""args": ["$DEMO_DIR/mcp-server-enhanced.js"],", shell=True)
    subprocess.run(""env": {", shell=True)
    subprocess.run(""VF_BASE_PATH": "$DEMO_DIR",", shell=True)
    subprocess.run(""VF_STRICT_MODE": "true"", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("EOF", shell=True)
    # Create run script
    subprocess.run("cat > "$DEMO_DIR/run-mcp.sh" << EOF", shell=True)
    print("Starting Enhanced MCP Server...")
    print("Base path: $DEMO_DIR")
    print("Strict mode: ENABLED")
    print("")
    subprocess.run("VF_BASE_PATH="$DEMO_DIR" VF_STRICT_MODE="true" node "$DEMO_DIR/mcp-server-enhanced.js"", shell=True)
    subprocess.run("EOF", shell=True)
    subprocess.run("chmod +x "$DEMO_DIR/run-mcp.sh"", shell=True)
    # Display results
    print("")
    print("✅ Demo environment setup complete!")
    print("===========================================")
    print("")
    print("📁 Demo location: $DEMO_DIR")
    print("")
    print("To run the enhanced MCP server:")
    print("  cd $DEMO_DIR")
    print("  ./run-mcp.sh")
    print("")
    print("To use with Claude Code:")
    print("  1. Copy the MCP config to your Claude Code settings:")
    print("     cat $DEMO_DIR/mcp-config.json")
    print("")
    print("  2. Or run Claude Code in the demo directory:")
    print("     cd $DEMO_DIR")
    print("     claude-code .")
    print("")
    print("Key features demonstrated:")
    print("  ✅ Artifact requirement validation")
    print("  ✅ Task dependency checking")
    print("  ✅ Adhoc file justification")
    print("  ✅ Queue status with validation")
    print("  ✅ Operations correctly refused when requirements not met")
    print("")
    print("The server will REFUSE operations that don't meet artifact requirements!")

if __name__ == "__main__":
    main()