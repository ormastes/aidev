#!/usr/bin/env python3
"""
Migrated from: folder.sh
Auto-generated Python - 2025-08-16T04:57:27.656Z
"""

import os
import sys
import subprocess
import shutil
import glob
from pathlib import Path

def main():
    # Setup script for deploying aidev folder structure with MCP configuration
    # This script creates a complete aidev environment for demo/release purposes
    subprocess.run("set -euo pipefail", shell=True)
    # Configuration
    subprocess.run("SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"", shell=True)
    subprocess.run("PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"", shell=True)
    subprocess.run("TARGET_DIR="${1:-./aidev}"", shell=True)
    subprocess.run("MODE="${2:-demo}" # demo or release", shell=True)
    # Colors for output
    subprocess.run("RED='\033[0;31m'", shell=True)
    subprocess.run("GREEN='\033[0;32m'", shell=True)
    subprocess.run("YELLOW='\033[1;33m'", shell=True)
    subprocess.run("BLUE='\033[0;34m'", shell=True)
    subprocess.run("NC='\033[0m' # No Color", shell=True)
    # Logging functions
    subprocess.run("log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }", shell=True)
    subprocess.run("log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }", shell=True)
    subprocess.run("log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }", shell=True)
    subprocess.run("log_error() { echo -e "${RED}[ERROR]${NC} $1"; }", shell=True)
    # Check if target directory already exists
    subprocess.run("check_target_directory() {", shell=True)
    if [ -d "$TARGET_DIR" ]:; then
    subprocess.run("log_warning "Target directory $TARGET_DIR already exists"", shell=True)
    subprocess.run("read -p "Do you want to overwrite it? (y/N): " -n 1 -r", shell=True)
    subprocess.run("echo", shell=True)
    if [ ! $REPLY =~ ^[Yy]$ ]:; then
    subprocess.run("log_info "Aborting setup"", shell=True)
    sys.exit(1)
    shutil.rmtree(""$TARGET_DIR"", ignore_errors=True)
    subprocess.run("}", shell=True)
    # Create directory structure
    subprocess.run("create_directory_structure() {", shell=True)
    subprocess.run("log_info "Creating directory structure at $TARGET_DIR"", shell=True)
    # Core directories
    Path(""$TARGET_DIR"/{scripts,config,docs,llm_rules,templates,gen,layer,src,tests}").mkdir(parents=True, exist_ok=True)
    Path(""$TARGET_DIR"/scripts/{core,setup,utils}").mkdir(parents=True, exist_ok=True)
    Path(""$TARGET_DIR"/config/{mcp,typescript,testing}").mkdir(parents=True, exist_ok=True)
    Path(""$TARGET_DIR"/gen/{doc,history/retrospect}").mkdir(parents=True, exist_ok=True)
    Path(""$TARGET_DIR"/layer/themes").mkdir(parents=True, exist_ok=True)
    Path(""$TARGET_DIR"/templates/llm_rules").mkdir(parents=True, exist_ok=True)
    subprocess.run("log_success "Directory structure created"", shell=True)
    subprocess.run("}", shell=True)
    # Copy essential files
    subprocess.run("copy_essential_files() {", shell=True)
    subprocess.run("log_info "Copying essential files"", shell=True)
    # Copy CLAUDE.md
    if [ -f "$PROJECT_ROOT/CLAUDE.md" ]:; then
    shutil.copy2(""$PROJECT_ROOT/CLAUDE.md"", ""$TARGET_DIR/"")
    subprocess.run("log_success "Copied CLAUDE.md"", shell=True)
    else:
    subprocess.run("log_error "CLAUDE.md not found in source"", shell=True)
    # Copy llm_rules directory
    if [ -d "$PROJECT_ROOT/llm_rules" ]:; then
    shutil.copy2("-r "$PROJECT_ROOT/llm_rules"", ""$TARGET_DIR/"")
    subprocess.run("log_success "Copied llm_rules directory"", shell=True)
    else:
    subprocess.run("log_warning "llm_rules directory not found in source"", shell=True)
    # Copy other essential files
    for file in [README.md FEATURE.vf.json TASK_QUEUE.vf.json FILE_STRUCTURE.vf.json NAME_ID.vf.json; do]:
    if [ -f "$PROJECT_ROOT/$file" ]:; then
    shutil.copy2(""$PROJECT_ROOT/$file"", ""$TARGET_DIR/"")
    subprocess.run("log_success "Copied $file"", shell=True)
    else:
    subprocess.run("log_warning "$file not found in source"", shell=True)
    # Copy documentation
    if [ -d "$PROJECT_ROOT/docs" ]:; then
    shutil.copy2("-r "$PROJECT_ROOT/docs"", ""$TARGET_DIR/"")
    subprocess.run("log_success "Copied documentation"", shell=True)
    # Copy templates
    if [ -d "$PROJECT_ROOT/templates" ]:; then
    shutil.copy2("-r "$PROJECT_ROOT/templates"", ""$TARGET_DIR/"")
    subprocess.run("log_success "Copied templates"", shell=True)
    # Copy setup-folder theme
    if [ -d "$PROJECT_ROOT/layer/themes/setup-folder" ]:; then
    Path(""$TARGET_DIR/layer/themes"").mkdir(parents=True, exist_ok=True)
    shutil.copy2("-r "$PROJECT_ROOT/layer/themes/setup-folder"", ""$TARGET_DIR/layer/themes/"")
    subprocess.run("log_success "Copied setup-folder theme"", shell=True)
    else:
    subprocess.run("log_warning "setup-folder theme not found in source"", shell=True)
    subprocess.run("}", shell=True)
    # Create MCP configuration
    subprocess.run("create_mcp_configuration() {", shell=True)
    subprocess.run("log_info "Creating MCP configuration"", shell=True)
    # Create Claude Desktop configuration directory
    subprocess.run("CLAUDE_CONFIG_DIR="$TARGET_DIR/config/claude"", shell=True)
    Path(""$CLAUDE_CONFIG_DIR"").mkdir(parents=True, exist_ok=True)
    # Create MCP server configuration
    subprocess.run("cat > "$CLAUDE_CONFIG_DIR/claude_desktop_config.json" << 'EOF'", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run(""mcpServers": {", shell=True)
    subprocess.run(""aidev": {", shell=True)
    subprocess.run(""command": "node",", shell=True)
    subprocess.run(""args": ["${AIDEV_PATH}/scripts/mcp-server.js"],", shell=True)
    subprocess.run(""env": {", shell=True)
    subprocess.run(""AIDEV_ROOT": "${AIDEV_PATH}"", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run(""filesystem": {", shell=True)
    subprocess.run(""command": "bunx",", shell=True)
    subprocess.run(""args": ["@modelcontextprotocol/server-filesystem", "${AIDEV_PATH}"]", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("EOF", shell=True)
    # Create MCP agent configuration
    subprocess.run("cat > "$TARGET_DIR/config/mcp/mcp-agent.json" << 'EOF'", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run(""agents": {", shell=True)
    subprocess.run(""architect": {", shell=True)
    subprocess.run(""description": "System architecture and design",", shell=True)
    subprocess.run(""capabilities": ["design", "architecture", "patterns"],", shell=True)
    subprocess.run(""tools": ["filesystem", "search", "edit"]", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run(""developer": {", shell=True)
    subprocess.run(""description": "Implementation and coding",", shell=True)
    subprocess.run(""capabilities": ["coding", "testing", "debugging"],", shell=True)
    subprocess.run(""tools": ["filesystem", "edit", "bash", "git"]", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run(""tester": {", shell=True)
    subprocess.run(""description": "Testing and quality assurance",", shell=True)
    subprocess.run(""capabilities": ["testing", "coverage", "e2e"],", shell=True)
    subprocess.run(""tools": ["filesystem", "bash", "playwright"]", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run(""gui": {", shell=True)
    subprocess.run(""description": "GUI design and implementation",", shell=True)
    subprocess.run(""capabilities": ["ui", "ux", "design"],", shell=True)
    subprocess.run(""tools": ["filesystem", "edit", "preview"]", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("EOF", shell=True)
    subprocess.run("log_success "Created MCP configuration"", shell=True)
    subprocess.run("}", shell=True)
    # Create setup script
    subprocess.run("create_setup_script() {", shell=True)
    subprocess.run("log_info "Creating setup.sh script"", shell=True)
    subprocess.run("cat > "$TARGET_DIR/setup.sh" << 'EOF'", shell=True)
    # Setup script for aidev environment
    # This is a wrapper that delegates to the setup-folder theme
    # By default installs locally, use --user-wide for system-wide installation
    subprocess.run("set -euo pipefail", shell=True)
    subprocess.run("SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"", shell=True)
    subprocess.run("AIDEV_PATH="$SCRIPT_DIR"", shell=True)
    # Colors
    subprocess.run("GREEN='\033[0;32m'", shell=True)
    subprocess.run("BLUE='\033[0;34m'", shell=True)
    subprocess.run("YELLOW='\033[1;33m'", shell=True)
    subprocess.run("RED='\033[0;31m'", shell=True)
    subprocess.run("NC='\033[0m'", shell=True)
    print("-e ")${BLUE}=== Aidev Setup ===${NC}"
    print("Using setup-folder theme for configuration")
    # Check if setup-folder theme is available
    if [ ! -d "$AIDEV_PATH/layer/themes/setup-folder" ]:; then
    print("-e ")${RED}[ERROR]${NC} setup-folder theme not found!"
    print("Please ensure the aidev folder was properly installed.")
    sys.exit(1)
    # Check if bun is available
    subprocess.run("if ! command -v bun &> /dev/null; then", shell=True)
    print("-e ")${RED}[ERROR]${NC} Bun is required but not found!"
    print("Please install bun: curl -fsSL https://bun.sh/install | bash")
    sys.exit(1)
    subprocess.run("PACKAGE_MANAGER="bun"", shell=True)
    print("-e ")${GREEN}Using bun as package manager${NC}"
    # Navigate to setup-folder theme
    os.chdir(""$AIDEV_PATH/layer/themes/setup-folder"")
    # Install dependencies if needed
    if [ ! -d "node_modules" ]:; then
    print("-e ")${BLUE}Installing setup-folder dependencies...${NC}"
    subprocess.run("bun install", shell=True)
    # Build if necessary
    if [ ! -d "dist" ]] || [[ ! -f "dist/cli.js" ]:; then
    print("-e ")${BLUE}Building setup-folder theme...${NC}"
    subprocess.run("bun run build", shell=True)
    # Create a setup configuration file
    subprocess.run("cat > "$AIDEV_PATH/setup-config.json" << EOJ", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run(""targetDir": "$AIDEV_PATH",", shell=True)
    subprocess.run(""deployedEnvironment": true,", shell=True)
    subprocess.run(""mode": "$MODE"", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("EOJ", shell=True)
    # Run the setup-folder MCP configuration
    print("-e ")${BLUE}Running MCP configuration...${NC}"
    # Execute with bun, passing all arguments
    subprocess.run("bun run "$AIDEV_PATH/layer/themes/setup-folder/dist/cli.js" mcp-config \", shell=True)
    subprocess.run("--target-dir "$AIDEV_PATH" \", shell=True)
    subprocess.run("--deployed-environment \", shell=True)
    subprocess.run(""$@"", shell=True)
    # Clean up temporary config
    subprocess.run("rm -f "$AIDEV_PATH/setup-config.json"", shell=True)
    print("-e ")${GREEN}Setup complete!${NC}"
    subprocess.run("EOF", shell=True)
    subprocess.run("chmod +x "$TARGET_DIR/setup.sh"", shell=True)
    subprocess.run("log_success "Created setup.sh script"", shell=True)
    subprocess.run("}", shell=True)
    # Create MCP server script
    subprocess.run("create_mcp_server() {", shell=True)
    subprocess.run("log_info "Creating MCP server script"", shell=True)
    subprocess.run("cat > "$TARGET_DIR/scripts/mcp-server.js" << 'EOF'", shell=True)
    subprocess.run("// MCP Server for aidev", shell=True)
    subprocess.run("// This server provides tools for Claude to interact with the aidev environment", shell=True)
    subprocess.run("const { Server } = require('@modelcontextprotocol/sdk/server/index.js');", shell=True)
    subprocess.run("const { StdioServerTransport } = require('@modelcontextprotocol/sdk/server/stdio.js');", shell=True)
    subprocess.run("const { readFile, writeFile, readdir } = require('fs').promises;", shell=True)
    subprocess.run("const path = require('path');", shell=True)
    subprocess.run("const AIDEV_ROOT = process.env.AIDEV_ROOT || __dirname;", shell=True)
    subprocess.run("class AidevMcpServer {", shell=True)
    subprocess.run("constructor() {", shell=True)
    subprocess.run("this.server = new Server(", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run("name: 'aidev-mcp-server',", shell=True)
    subprocess.run("version: '1.0.0',", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run("capabilities: {", shell=True)
    subprocess.run("tools: {},", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("this.setupHandlers();", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("setupHandlers() {", shell=True)
    subprocess.run("// List available tools", shell=True)
    subprocess.run("this.server.setRequestHandler('tools/list', async () => ({", shell=True)
    subprocess.run("tools: [", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run("name: 'read_task_queue',", shell=True)
    subprocess.run("description: 'Read the current task queue',", shell=True)
    subprocess.run("inputSchema: {", shell=True)
    subprocess.run("type: 'object',", shell=True)
    subprocess.run("properties: {},", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run("name: 'read_feature_backlog',", shell=True)
    subprocess.run("description: 'Read the feature backlog',", shell=True)
    subprocess.run("inputSchema: {", shell=True)
    subprocess.run("type: 'object',", shell=True)
    subprocess.run("properties: {},", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run("name: 'read_llm_rule',", shell=True)
    subprocess.run("description: 'Read a specific LLM rule',", shell=True)
    subprocess.run("inputSchema: {", shell=True)
    subprocess.run("type: 'object',", shell=True)
    subprocess.run("properties: {", shell=True)
    subprocess.run("ruleName: {", shell=True)
    subprocess.run("type: 'string',", shell=True)
    subprocess.run("description: 'Name of the rule file (without .md extension)',", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("required: ['ruleName'],", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run("name: 'list_llm_rules',", shell=True)
    subprocess.run("description: 'List all available LLM rules',", shell=True)
    subprocess.run("inputSchema: {", shell=True)
    subprocess.run("type: 'object',", shell=True)
    subprocess.run("properties: {},", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("],", shell=True)
    subprocess.run("}));", shell=True)
    subprocess.run("// Handle tool calls", shell=True)
    subprocess.run("this.server.setRequestHandler('tools/call', async (request) => {", shell=True)
    subprocess.run("const { name, arguments: args } = request.params;", shell=True)
    subprocess.run("switch (name) {", shell=True)
    subprocess.run("case 'read_task_queue':", shell=True)
    subprocess.run("return await this.readTaskQueue();", shell=True)
    subprocess.run("case 'read_feature_backlog':", shell=True)
    subprocess.run("return await this.readFeatureBacklog();", shell=True)
    subprocess.run("case 'read_llm_rule':", shell=True)
    subprocess.run("return await this.readLlmRule(args.ruleName);", shell=True)
    subprocess.run("case 'list_llm_rules':", shell=True)
    subprocess.run("return await this.listLlmRules();", shell=True)
    subprocess.run("default:", shell=True)
    subprocess.run("throw new Error(`Unknown tool: ${name}`);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("async readTaskQueue() {", shell=True)
    subprocess.run("try {", shell=True)
    subprocess.run("const content = await readFile(", shell=True)
    subprocess.run("path.join(AIDEV_ROOT, 'TASK_QUEUE.vf.json'),", shell=True)
    subprocess.run("'utf-8'", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("return {", shell=True)
    subprocess.run("content: [", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run("type: 'text',", shell=True)
    subprocess.run("text: content,", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("],", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("} catch (error) {", shell=True)
    subprocess.run("return {", shell=True)
    subprocess.run("content: [", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run("type: 'text',", shell=True)
    subprocess.run("text: `Error reading task queue: ${error.message}`,", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("],", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("async readFeatureBacklog() {", shell=True)
    subprocess.run("try {", shell=True)
    subprocess.run("const content = await readFile(", shell=True)
    subprocess.run("path.join(AIDEV_ROOT, 'FEATURE.vf.json'),", shell=True)
    subprocess.run("'utf-8'", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("return {", shell=True)
    subprocess.run("content: [", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run("type: 'text',", shell=True)
    subprocess.run("text: content,", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("],", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("} catch (error) {", shell=True)
    subprocess.run("return {", shell=True)
    subprocess.run("content: [", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run("type: 'text',", shell=True)
    subprocess.run("text: `Error reading feature backlog: ${error.message}`,", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("],", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("async readLlmRule(ruleName) {", shell=True)
    subprocess.run("try {", shell=True)
    subprocess.run("const content = await readFile(", shell=True)
    subprocess.run("path.join(AIDEV_ROOT, 'llm_rules', `${ruleName}.md`),", shell=True)
    subprocess.run("'utf-8'", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("return {", shell=True)
    subprocess.run("content: [", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run("type: 'text',", shell=True)
    subprocess.run("text: content,", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("],", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("} catch (error) {", shell=True)
    subprocess.run("return {", shell=True)
    subprocess.run("content: [", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run("type: 'text',", shell=True)
    subprocess.run("text: `Error reading LLM rule: ${error.message}`,", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("],", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("async listLlmRules() {", shell=True)
    subprocess.run("try {", shell=True)
    subprocess.run("const files = await readdir(path.join(AIDEV_ROOT, 'llm_rules'));", shell=True)
    subprocess.run("const rules = files", shell=True)
    subprocess.run(".filter((file) => file.endsWith('.md'))", shell=True)
    subprocess.run(".map((file) => file.replace('.md', ''));", shell=True)
    subprocess.run("return {", shell=True)
    subprocess.run("content: [", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run("type: 'text',", shell=True)
    subprocess.run("text: `Available LLM rules:\n${rules.join('\n')}`,", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("],", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("} catch (error) {", shell=True)
    subprocess.run("return {", shell=True)
    subprocess.run("content: [", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run("type: 'text',", shell=True)
    subprocess.run("text: `Error listing LLM rules: ${error.message}`,", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("],", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("async run() {", shell=True)
    subprocess.run("const transport = new StdioServerTransport();", shell=True)
    subprocess.run("await this.server.connect(transport);", shell=True)
    subprocess.run("console.error('Aidev MCP server running');", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("const server = new AidevMcpServer();", shell=True)
    subprocess.run("server.run().catch(console.error);", shell=True)
    subprocess.run("EOF", shell=True)
    subprocess.run("chmod +x "$TARGET_DIR/scripts/mcp-server.js"", shell=True)
    subprocess.run("log_success "Created MCP server script"", shell=True)
    subprocess.run("}", shell=True)
    # Create package.json for MCP server
    subprocess.run("create_package_json() {", shell=True)
    subprocess.run("log_info "Creating package.json for MCP server"", shell=True)
    subprocess.run("cat > "$TARGET_DIR/scripts/package.json" << 'EOF'", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run(""name": "aidev-mcp-server",", shell=True)
    subprocess.run(""version": "1.0.0",", shell=True)
    subprocess.run(""description": "MCP server for aidev environment",", shell=True)
    subprocess.run(""main": "mcp-server.js",", shell=True)
    subprocess.run(""scripts": {", shell=True)
    subprocess.run(""start": "node mcp-server.js"", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run(""dependencies": {", shell=True)
    subprocess.run(""@modelcontextprotocol/sdk": "^0.5.0"", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run(""engines": {", shell=True)
    subprocess.run(""node": ">=18.0.0"", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("EOF", shell=True)
    subprocess.run("log_success "Created package.json"", shell=True)
    subprocess.run("}", shell=True)
    # Install dependencies if in release mode
    subprocess.run("install_dependencies() {", shell=True)
    if [ "$MODE" == "release" ]:; then
    subprocess.run("log_info "Installing MCP server dependencies"", shell=True)
    os.chdir(""$TARGET_DIR/scripts"")
    subprocess.run("if command -v bun &> /dev/null; then", shell=True)
    subprocess.run("bun install", shell=True)
    subprocess.run("log_success "Dependencies installed with bun"", shell=True)
    else:
    subprocess.run("log_warning "Bun not found, skipping dependency installation"", shell=True)
    os.chdir("- > /dev/null")
    subprocess.run("}", shell=True)
    # Main execution
    subprocess.run("main() {", shell=True)
    print("-e ")${BLUE}=== Aidev Folder Setup ===${NC}"
    print("Target directory: $TARGET_DIR")
    print("Mode: $MODE")
    subprocess.run("echo", shell=True)
    subprocess.run("check_target_directory", shell=True)
    subprocess.run("create_directory_structure", shell=True)
    subprocess.run("copy_essential_files", shell=True)
    subprocess.run("create_mcp_configuration", shell=True)
    subprocess.run("create_setup_script", shell=True)
    subprocess.run("create_mcp_server", shell=True)
    subprocess.run("create_package_json", shell=True)
    subprocess.run("install_dependencies", shell=True)
    subprocess.run("echo", shell=True)
    print("-e ")${GREEN}=== Setup Complete ===${NC}"
    print("-e ")${GREEN}✅ Aidev environment created at: $TARGET_DIR${NC}"
    subprocess.run("echo", shell=True)
    print("Next steps:")
    print("1. cd $TARGET_DIR")
    print("2. ./setup.sh")
    print("3. Restart Claude Desktop")
    subprocess.run("echo", shell=True)
    if [ "$MODE" == "demo" ]:; then
    print("This is a DEMO setup - perfect for testing and evaluation")
    else:
    print("This is a RELEASE setup - ready for production deployment")
    subprocess.run("}", shell=True)
    # Run main function
    subprocess.run("main", shell=True)

if __name__ == "__main__":
    main()