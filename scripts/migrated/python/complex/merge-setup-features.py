#!/usr/bin/env python3
"""
Migrated from: merge-setup-features.sh
Auto-generated Python - 2025-08-16T04:57:27.721Z
"""

import os
import sys
import subprocess
import shutil
import glob
from pathlib import Path

def main():
    # Merge setup folder features into the filesystem-mcp theme
    # This consolidates the setup capabilities into the theme structure
    subprocess.run("set -e", shell=True)
    subprocess.run("THEME_DIR="layer/themes/infra_filesystem-mcp"", shell=True)
    subprocess.run("SETUP_DIR="setup"", shell=True)
    subprocess.run("BACKUP_DIR="setup_backup_20250816_014001"", shell=True)
    print("=== Merging Setup Features into Theme ===")
    # Create setup module within the theme
    Path(""$THEME_DIR/children/setup"").mkdir(parents=True, exist_ok=True)
    # Move configuration templates to theme
    print("Moving configuration templates...")
    shutil.copy2("-r "$SETUP_DIR/templates"", ""$THEME_DIR/children/setup/"")
    shutil.copy2("-r "$SETUP_DIR/config"", ""$THEME_DIR/children/setup/"")
    # Move hello world tests to theme examples
    print("Moving hello world examples...")
    Path(""$THEME_DIR/examples/hello-world"").mkdir(parents=True, exist_ok=True)
    shutil.copy2("-r "$SETUP_DIR/hello_world_tests"", ""$THEME_DIR/examples/hello-world/"")
    shutil.copy2("-r "$SETUP_DIR/hello_demo"", ""$THEME_DIR/examples/hello-world/"")
    # Move docker configurations
    print("Moving docker configurations...")
    Path(""$THEME_DIR/docker"").mkdir(parents=True, exist_ok=True)
    shutil.copy2("-r "$SETUP_DIR/docker"", ""$THEME_DIR/"")
    # Move QEMU configurations
    print("Moving QEMU configurations...")
    Path(""$THEME_DIR/qemu"").mkdir(parents=True, exist_ok=True)
    shutil.copy2("-r "$SETUP_DIR/qemu"", ""$THEME_DIR/"")
    # Move test scripts to theme scripts
    print("Moving test scripts...")
    shutil.copy2(""$SETUP_DIR"/*.sh "$THEME_DIR/scripts/" 2>/dev/null ||", "true")
    # Move documentation
    print("Moving documentation...")
    shutil.copy2(""$SETUP_DIR"/*.md "$THEME_DIR/docs/" 2>/dev/null ||", "true")
    # Create a setup wrapper module
    subprocess.run("cat > "$THEME_DIR/children/setup/SetupManager.ts" << 'EOF'", shell=True)
    subprocess.run("/**", shell=True)
    subprocess.run("* SetupManager - Manages project setup and configuration", shell=True)
    subprocess.run("* Migrated from standalone setup folder to theme integration", shell=True)
    subprocess.run("*/", shell=True)
    subprocess.run("import * as fs from 'fs';", shell=True)
    subprocess.run("import * as path from 'path';", shell=True)
    subprocess.run("import { exec } from 'child_process';", shell=True)
    subprocess.run("import { promisify } from 'util';", shell=True)
    subprocess.run("const execAsync = promisify(exec);", shell=True)
    subprocess.run("export interface SetupConfig {", shell=True)
    subprocess.run("language: string;", shell=True)
    subprocess.run("platform: string;", shell=True)
    subprocess.run("framework?: string;", shell=True)
    subprocess.run("buildSystem: string;", shell=True)
    subprocess.run("testFramework?: string;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("export class SetupManager {", shell=True)
    subprocess.run("private configPath: string;", shell=True)
    subprocess.run("private templatesPath: string;", shell=True)
    subprocess.run("constructor(basePath: string = '.') {", shell=True)
    subprocess.run("this.configPath = path.join(basePath, 'children/setup/config');", shell=True)
    subprocess.run("this.templatesPath = path.join(basePath, 'children/setup/templates');", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("/**", shell=True)
    subprocess.run("* Initialize a project with the specified configuration", shell=True)
    subprocess.run("*/", shell=True)
    subprocess.run("async initializeProject(config: SetupConfig): Promise<void> {", shell=True)
    subprocess.run("console.log('Initializing project with config:', config);", shell=True)
    subprocess.run("// Load template based on configuration", shell=True)
    subprocess.run("const template = await this.loadTemplate(config);", shell=True)
    subprocess.run("// Apply template to project", shell=True)
    subprocess.run("await this.applyTemplate(template, config);", shell=True)
    subprocess.run("// Run setup scripts", shell=True)
    subprocess.run("await this.runSetupScripts(config);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("/**", shell=True)
    subprocess.run("* Load configuration template", shell=True)
    subprocess.run("*/", shell=True)
    subprocess.run("private async loadTemplate(config: SetupConfig): Promise<any> {", shell=True)
    subprocess.run("const templatePath = path.join(", shell=True)
    subprocess.run("this.templatesPath,", shell=True)
    subprocess.run("config.language,", shell=True)
    subprocess.run("`${config.platform}.json`", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("if (!fs.existsSync(templatePath)) {", shell=True)
    subprocess.run("throw new Error(`Template not found: ${templatePath}`);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("return JSON.parse(fs.readFileSync(templatePath, 'utf-8'));", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("/**", shell=True)
    subprocess.run("* Apply template to create project structure", shell=True)
    subprocess.run("*/", shell=True)
    subprocess.run("private async applyTemplate(template: any, config: SetupConfig): Promise<void> {", shell=True)
    subprocess.run("// Create project directories", shell=True)
    subprocess.run("for (const dir of template.directories || []) {", shell=True)
    subprocess.run("fs.mkdirSync(dir, { recursive: true });", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("// Copy template files", shell=True)
    subprocess.run("for (const file of template.files || []) {", shell=True)
    subprocess.run("const sourcePath = path.join(this.templatesPath, file.source);", shell=True)
    subprocess.run("const destPath = file.destination;", shell=True)
    subprocess.run("if (fs.existsSync(sourcePath)) {", shell=True)
    subprocess.run("fs.copyFileSync(sourcePath, destPath);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("/**", shell=True)
    subprocess.run("* Run setup scripts for the configuration", shell=True)
    subprocess.run("*/", shell=True)
    subprocess.run("private async runSetupScripts(config: SetupConfig): Promise<void> {", shell=True)
    subprocess.run("const scriptPath = path.join(this.configPath, `setup_${config.language}.sh`);", shell=True)
    subprocess.run("if (fs.existsSync(scriptPath)) {", shell=True)
    subprocess.run("await execAsync(`bash ${scriptPath}`);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("/**", shell=True)
    subprocess.run("* Verify hello world works for the configuration", shell=True)
    subprocess.run("*/", shell=True)
    subprocess.run("async verifyHelloWorld(config: SetupConfig): Promise<boolean> {", shell=True)
    subprocess.run("const verifyScript = path.join(", shell=True)
    subprocess.run("this.templatesPath,", shell=True)
    subprocess.run("'verify_hello_world.sh'", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("try {", shell=True)
    subprocess.run("const { stdout } = await execAsync(`bash ${verifyScript} ${config.language}`);", shell=True)
    subprocess.run("return stdout.includes('Hello World');", shell=True)
    subprocess.run("} catch (error) {", shell=True)
    subprocess.run("console.error('Hello world verification failed:', error);", shell=True)
    subprocess.run("return false;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("EOF", shell=True)
    # Create package.json for the setup module
    subprocess.run("cat > "$THEME_DIR/children/setup/package.json" << 'EOF'", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run(""name": "@aidev/setup-manager",", shell=True)
    subprocess.run(""version": "1.0.0",", shell=True)
    subprocess.run(""description": "Setup and configuration management integrated with filesystem-mcp theme",", shell=True)
    subprocess.run(""main": "SetupManager.ts",", shell=True)
    subprocess.run(""scripts": {", shell=True)
    subprocess.run(""test": "bun test",", shell=True)
    subprocess.run(""setup": "bash setup.sh",", shell=True)
    subprocess.run(""verify": "bash verify_hello_world.sh"", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run(""dependencies": {", shell=True)
    subprocess.run(""@types/node": "^20.0.0"", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("EOF", shell=True)
    # Create integration script
    subprocess.run("cat > "$THEME_DIR/children/setup/integrate-setup.sh" << 'EOF'", shell=True)
    # Integration script to use setup features from the theme
    subprocess.run("set -e", shell=True)
    print("Setup features are now integrated into the filesystem-mcp theme")
    print("Usage:")
    print("  - Configuration templates: children/setup/templates/")
    print("  - Docker environments: docker/")
    print("  - QEMU environments: qemu/")
    print("  - Examples: examples/hello-world/")
    print("")
    print("To use setup features:")
    print("  1. Import SetupManager from children/setup/SetupManager.ts")
    print("  2. Configure using templates in children/setup/templates/")
    print("  3. Run verification with examples/hello-world/")
    subprocess.run("EOF", shell=True)
    subprocess.run("chmod +x "$THEME_DIR/children/setup/integrate-setup.sh"", shell=True)
    print("=== Setup Features Merged Successfully ===")
    print("")
    print("Next steps:")
    print("1. Test the integrated setup features")
    print("2. Remove the redundant setup folders")
    print("3. Update references to use the theme-integrated setup")

if __name__ == "__main__":
    main()