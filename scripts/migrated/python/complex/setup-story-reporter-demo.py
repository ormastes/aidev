#!/usr/bin/env python3
"""
Migrated from: setup-story-reporter-demo.sh
Auto-generated Python - 2025-08-16T04:57:27.635Z
"""

import os
import sys
import subprocess
import shutil
import glob
from pathlib import Path

def main():
    # Setup Script for Story Reporter Demo with Calculator
    # Sets up a complete demo environment for testing story reporter
    subprocess.run("set -e", shell=True)
    # Colors for output
    subprocess.run("RED='\033[0;31m'", shell=True)
    subprocess.run("GREEN='\033[0;32m'", shell=True)
    subprocess.run("YELLOW='\033[1;33m'", shell=True)
    subprocess.run("BLUE='\033[0;34m'", shell=True)
    subprocess.run("MAGENTA='\033[0;35m'", shell=True)
    subprocess.run("CYAN='\033[0;36m'", shell=True)
    subprocess.run("NC='\033[0m' # No Color", shell=True)
    print("-e ")${BLUE}📚 Story Reporter Demo Setup${NC}"
    print("================================")
    print("")
    # Check if we're in the right directory
    if ! -f "package.json" :; then
    print("-e ")${RED}Error: Please run this script from the project root directory${NC}"
    sys.exit(1)
    # Create demo directory structure
    subprocess.run("DEMO_DIR="demo/calculator-story"", shell=True)
    print("-e ")${YELLOW}Creating demo directory: ${DEMO_DIR}${NC}"
    Path(""$DEMO_DIR"").mkdir(parents=True, exist_ok=True)
    # Build the project first
    print("-e ")${YELLOW}Building project...${NC}"
    subprocess.run("npm run build || {", shell=True)
    print("-e ")${RED}Build failed! Please fix build errors first.${NC}"
    sys.exit(1)
    subprocess.run("}", shell=True)
    # Create Calculator Agent
    print("-e ")${GREEN}Creating Calculator Agent...${NC}"
    subprocess.run("cat > "$DEMO_DIR/calculator-agent.js" << 'EOF'", shell=True)
    subprocess.run("/**", shell=True)
    subprocess.run("* Calculator Agent for Story Reporter Demo", shell=True)
    subprocess.run("* A simple agent that can perform calculations", shell=True)
    subprocess.run("*/", shell=True)
    subprocess.run("const WebSocket = require('ws');", shell=True)
    subprocess.run("const { v4: uuidv4 } = require('uuid');", shell=True)
    subprocess.run("class CalculatorAgent {", shell=True)
    subprocess.run("constructor(serverUrl, roomId, agentName = 'Calculator') {", shell=True)
    subprocess.run("this.serverUrl = serverUrl;", shell=True)
    subprocess.run("this.roomId = roomId;", shell=True)
    subprocess.run("this.agentName = agentName;", shell=True)
    subprocess.run("this.userId = uuidv4();", shell=True)
    subprocess.run("this.ws = null;", shell=True)
    subprocess.run("this.connected = false;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("async connect() {", shell=True)
    subprocess.run("return new Promise((resolve, reject) => {", shell=True)
    subprocess.run("console.log(`🧮 Connecting Calculator to ${this.serverUrl}...`);", shell=True)
    subprocess.run("this.ws = new WebSocket(this.serverUrl);", shell=True)
    subprocess.run("this.ws.on('open', () => {", shell=True)
    subprocess.run("// Join room", shell=True)
    subprocess.run("this.ws.send(JSON.stringify({", shell=True)
    subprocess.run("type: 'join_room',", shell=True)
    subprocess.run("roomId: this.roomId,", shell=True)
    subprocess.run("userId: this.userId,", shell=True)
    subprocess.run("username: this.agentName,", shell=True)
    subprocess.run("isAgent: true", shell=True)
    subprocess.run("}));", shell=True)
    subprocess.run("this.connected = true;", shell=True)
    subprocess.run("console.log(`✅ Calculator connected to room ${this.roomId}`);", shell=True)
    subprocess.run("// Announce capabilities", shell=True)
    subprocess.run("setTimeout(() => {", shell=True)
    subprocess.run("this.sendMessage({", shell=True)
    subprocess.run("type: 'agent_message',", shell=True)
    subprocess.run("content: '🧮 Calculator Agent ready! I can solve: add, subtract, multiply, divide. Try: "calculate 5 + 3"',", shell=True)
    subprocess.run("sender: this.agentName", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("resolve();", shell=True)
    subprocess.run("}, 1000);", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("this.ws.on('message', (data) => {", shell=True)
    subprocess.run("try {", shell=True)
    subprocess.run("const message = JSON.parse(data.toString());", shell=True)
    subprocess.run("this.handleMessage(message);", shell=True)
    subprocess.run("} catch (error) {", shell=True)
    subprocess.run("console.error('Error parsing message:', error);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("this.ws.on('error', reject);", shell=True)
    subprocess.run("this.ws.on('close', () => {", shell=True)
    subprocess.run("this.connected = false;", shell=True)
    subprocess.run("console.log('Calculator disconnected');", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("handleMessage(message) {", shell=True)
    subprocess.run("// Skip own messages and system messages", shell=True)
    subprocess.run("if (message.sender === this.agentName ||", shell=True)
    subprocess.run("message.type === 'system_message' ||", shell=True)
    subprocess.run("message.type === 'user_joined' ||", shell=True)
    subprocess.run("message.type === 'user_left') {", shell=True)
    subprocess.run("return;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("const content = message.content?.toLowerCase() || '';", shell=True)
    subprocess.run("// Check for calculation requests", shell=True)
    subprocess.run("if (content.includes('calculate') || content.includes('calc') ||", shell=True)
    subprocess.run("content.includes('what is') || content.includes('solve')) {", shell=True)
    subprocess.run("const result = this.parseAndCalculate(message.content);", shell=True)
    subprocess.run("if (result !== null) {", shell=True)
    subprocess.run("this.sendMessage({", shell=True)
    subprocess.run("type: 'agent_message',", shell=True)
    subprocess.run("content: `🧮 ${message.content} = ${result}`,", shell=True)
    subprocess.run("sender: this.agentName,", shell=True)
    subprocess.run("metadata: {", shell=True)
    subprocess.run("calculation: message.content,", shell=True)
    subprocess.run("result: result,", shell=True)
    subprocess.run("respondingTo: message.sender", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("} else if (content.includes('help') && content.includes('calc')) {", shell=True)
    subprocess.run("this.sendMessage({", shell=True)
    subprocess.run("type: 'agent_message',", shell=True)
    subprocess.run("content: '🧮 I can help with: add (+), subtract (-), multiply (*), divide (/). Example: "calculate 10 + 5"',", shell=True)
    subprocess.run("sender: this.agentName", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("parseAndCalculate(text) {", shell=True)
    subprocess.run("// Extract mathematical expression", shell=True)
    subprocess.run("const patterns = [", shell=True)
    subprocess.run("/calculate\s+(.+)/i,", shell=True)
    subprocess.run("/calc\s+(.+)/i,", shell=True)
    subprocess.run("/what\s+is\s+(.+)/i,", shell=True)
    subprocess.run("/solve\s+(.+)/i,", shell=True)
    subprocess.run("/(\d+\s*[\+\-\*\/]\s*\d+)/", shell=True)
    subprocess.run("];", shell=True)
    subprocess.run("let expression = null;", shell=True)
    subprocess.run("for (const pattern of patterns) {", shell=True)
    subprocess.run("const match = text.match(pattern);", shell=True)
    subprocess.run("if (match) {", shell=True)
    subprocess.run("expression = match[1].trim();", shell=True)
    subprocess.run("break;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("if (!expression) return null;", shell=True)
    subprocess.run("// Simple calculator - only basic operations", shell=True)
    subprocess.run("try {", shell=True)
    subprocess.run("// Clean the expression", shell=True)
    subprocess.run("expression = expression.replace(/[^0-9\+\-\*\/\.\s\(\)]/g, '');", shell=True)
    subprocess.run("// Basic validation", shell=True)
    subprocess.run("if (!/^\d+(\.\d+)?[\s]*[\+\-\*\/][\s]*\d+(\.\d+)?$/.test(expression)) {", shell=True)
    subprocess.run("return null;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("// Parse operation", shell=True)
    subprocess.run("const operators = ['+', '-', '*', '/'];", shell=True)
    subprocess.run("let operator = null;", shell=True)
    subprocess.run("let parts = [];", shell=True)
    subprocess.run("for (const op of operators) {", shell=True)
    subprocess.run("if (expression.includes(op)) {", shell=True)
    subprocess.run("parts = expression.split(op).map(p => p.trim());", shell=True)
    subprocess.run("operator = op;", shell=True)
    subprocess.run("break;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("if (!operator || parts.length !== 2) return null;", shell=True)
    subprocess.run("const a = parseFloat(parts[0]);", shell=True)
    subprocess.run("const b = parseFloat(parts[1]);", shell=True)
    subprocess.run("if (isNaN(a) || isNaN(b)) return null;", shell=True)
    subprocess.run("// Perform calculation", shell=True)
    subprocess.run("let result;", shell=True)
    subprocess.run("switch (operator) {", shell=True)
    subprocess.run("case '+': result = a + b; break;", shell=True)
    subprocess.run("case '-': result = a - b; break;", shell=True)
    subprocess.run("case '*': result = a * b; break;", shell=True)
    subprocess.run("case '/':", shell=True)
    subprocess.run("if (b === 0) return 'Error: Division by zero';", shell=True)
    subprocess.run("result = a / b;", shell=True)
    subprocess.run("break;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("// Format result", shell=True)
    subprocess.run("return Number.isInteger(result) ? result : result.toFixed(2);", shell=True)
    subprocess.run("} catch (error) {", shell=True)
    subprocess.run("console.error('Calculation error:', error);", shell=True)
    subprocess.run("return null;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("sendMessage(message) {", shell=True)
    subprocess.run("if (this.connected && this.ws) {", shell=True)
    subprocess.run("this.ws.send(JSON.stringify(message));", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("disconnect() {", shell=True)
    subprocess.run("if (this.ws) {", shell=True)
    subprocess.run("this.ws.close();", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("// Start the calculator agent", shell=True)
    subprocess.run("const serverUrl = process.env.SERVER_URL || 'ws://localhost:3000';", shell=True)
    subprocess.run("const roomId = process.env.ROOM_ID || 'calculator-demo';", shell=True)
    subprocess.run("const calculator = new CalculatorAgent(serverUrl, roomId);", shell=True)
    subprocess.run("calculator.connect().catch(console.error);", shell=True)
    subprocess.run("// Handle shutdown", shell=True)
    subprocess.run("process.on('SIGINT', () => {", shell=True)
    subprocess.run("console.log('\nShutting down Calculator...');", shell=True)
    subprocess.run("calculator.disconnect();", shell=True)
    subprocess.run("process.exit(0);", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("EOF", shell=True)
    # Create Demo Runner Script
    print("-e ")${GREEN}Creating demo runner...${NC}"
    subprocess.run("cat > "$DEMO_DIR/run-demo.js" << 'EOF'", shell=True)
    subprocess.run("/**", shell=True)
    subprocess.run("* Calculator Demo Runner with Story Reporter", shell=True)
    subprocess.run("* Runs a full demo showing story reporter tracking calculator interactions", shell=True)
    subprocess.run("*/", shell=True)
    subprocess.run("const { spawn } = require('child_process');", shell=True)
    subprocess.run("const WebSocket = require('ws');", shell=True)
    subprocess.run("const { v4: uuidv4 } = require('uuid');", shell=True)
    subprocess.run("const path = require('path');", shell=True)
    subprocess.run("const fs = require('fs');", shell=True)
    subprocess.run("const chalk = require('chalk');", shell=True)
    subprocess.run("class CalculatorDemo {", shell=True)
    subprocess.run("constructor() {", shell=True)
    subprocess.run("this.processes = [];", shell=True)
    subprocess.run("this.roomId = 'calculator-demo';", shell=True)
    subprocess.run("this.serverUrl = 'ws://localhost:3000';", shell=True)
    subprocess.run("this.logDir = path.join(process.cwd(), 'logs', 'calculator-demo');", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("async run() {", shell=True)
    subprocess.run("console.log(chalk.bold.blue('\n🧮 Calculator Demo with Story Reporter\n'));", shell=True)
    subprocess.run("try {", shell=True)
    subprocess.run("// Ensure log directory", shell=True)
    subprocess.run("if (!fs.existsSync(this.logDir)) {", shell=True)
    subprocess.run("fs.mkdirSync(this.logDir, { recursive: true });", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("// Start server", shell=True)
    subprocess.run("await this.startServer();", shell=True)
    subprocess.run("// Start story reporter", shell=True)
    subprocess.run("await this.startStoryReporter();", shell=True)
    subprocess.run("// Start calculator agent", shell=True)
    subprocess.run("await this.startCalculator();", shell=True)
    subprocess.run("// Run test scenarios", shell=True)
    subprocess.run("await this.runTestScenarios();", shell=True)
    subprocess.run("// Wait for story report", shell=True)
    subprocess.run("console.log(chalk.yellow('\n⏳ Waiting for story report generation...'));", shell=True)
    subprocess.run("await this.delay(65000); // Wait for report interval", shell=True)
    subprocess.run("// Show results", shell=True)
    subprocess.run("await this.showResults();", shell=True)
    subprocess.run("} catch (error) {", shell=True)
    subprocess.run("console.error(chalk.red('Demo error:'), error);", shell=True)
    subprocess.run("} finally {", shell=True)
    subprocess.run("await this.cleanup();", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("async startServer() {", shell=True)
    subprocess.run("console.log(chalk.cyan('1️⃣ Starting Chat Server with Interception...'));", shell=True)
    subprocess.run("const server = spawn('node', [", shell=True)
    subprocess.run("'--require', './dist/logging/preload-interceptors.js',", shell=True)
    subprocess.run("'./dist/index.js'", shell=True)
    subprocess.run("], {", shell=True)
    subprocess.run("env: {", shell=True)
    subprocess.run("...process.env,", shell=True)
    subprocess.run("CHAT_PORT: 3000,", shell=True)
    subprocess.run("INTERCEPT_CONSOLE: 'false',", shell=True)
    subprocess.run("INTERCEPT_METRICS: 'true',", shell=True)
    subprocess.run("INTERCEPT_LOG_DIR: path.join(this.logDir, 'server')", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("stdio: 'pipe'", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("this.processes.push(server);", shell=True)
    subprocess.run("await new Promise((resolve) => {", shell=True)
    subprocess.run("server.stdout.on('data', (data) => {", shell=True)
    subprocess.run("if (data.toString().includes('Chat server running')) {", shell=True)
    subprocess.run("console.log(chalk.green('✅ Server started'));", shell=True)
    subprocess.run("resolve();", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("setTimeout(resolve, 5000);", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("async startStoryReporter() {", shell=True)
    subprocess.run("console.log(chalk.cyan('2️⃣ Starting Story Reporter...'));", shell=True)
    subprocess.run("const reporter = spawn('node', [", shell=True)
    subprocess.run("'--require', './dist/logging/preload-interceptors.js',", shell=True)
    subprocess.run("'./scripts/start-story-reporter.js',", shell=True)
    subprocess.run("this.serverUrl,", shell=True)
    subprocess.run("this.roomId,", shell=True)
    subprocess.run("'StoryBot'", shell=True)
    subprocess.run("], {", shell=True)
    subprocess.run("env: {", shell=True)
    subprocess.run("...process.env,", shell=True)
    subprocess.run("INTERCEPT_CONSOLE: 'false',", shell=True)
    subprocess.run("INTERCEPT_LOG_DIR: path.join(this.logDir, 'story-reporter')", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("stdio: 'pipe'", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("this.processes.push(reporter);", shell=True)
    subprocess.run("reporter.stdout.on('data', (data) => {", shell=True)
    subprocess.run("const output = data.toString();", shell=True)
    subprocess.run("if (output.includes('Story Reporter')) {", shell=True)
    subprocess.run("console.log(chalk.gray(`[StoryBot] ${output.trim()}`));", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("await this.delay(3000);", shell=True)
    subprocess.run("console.log(chalk.green('✅ Story Reporter ready'));", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("async startCalculator() {", shell=True)
    subprocess.run("console.log(chalk.cyan('3️⃣ Starting Calculator Agent...'));", shell=True)
    subprocess.run("const calculator = spawn('node', [", shell=True)
    subprocess.run("path.join(__dirname, 'calculator-agent.js')", shell=True)
    subprocess.run("], {", shell=True)
    subprocess.run("env: {", shell=True)
    subprocess.run("...process.env,", shell=True)
    subprocess.run("SERVER_URL: this.serverUrl,", shell=True)
    subprocess.run("ROOM_ID: this.roomId", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("stdio: 'pipe'", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("this.processes.push(calculator);", shell=True)
    subprocess.run("calculator.stdout.on('data', (data) => {", shell=True)
    subprocess.run("console.log(chalk.gray(`[Calculator] ${data.toString().trim()}`));", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("await this.delay(3000);", shell=True)
    subprocess.run("console.log(chalk.green('✅ Calculator ready'));", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("async runTestScenarios() {", shell=True)
    subprocess.run("console.log(chalk.cyan('\n4️⃣ Running Test Scenarios...'));", shell=True)
    subprocess.run("const scenarios = [", shell=True)
    subprocess.run("{ user: 'Alice', messages: [", shell=True)
    subprocess.run("'Hello everyone!',", shell=True)
    subprocess.run("'Can someone help me calculate 25 + 17?',", shell=True)
    subprocess.run("'Thanks! Now what is 100 - 42?'", shell=True)
    subprocess.run("]},", shell=True)
    subprocess.run("{ user: 'Bob', messages: [", shell=True)
    subprocess.run("'Hi Alice!',", shell=True)
    subprocess.run("'I need to solve 15 * 4',", shell=True)
    subprocess.run("'And also 120 / 5 please'", shell=True)
    subprocess.run("]},", shell=True)
    subprocess.run("{ user: 'Charlie', messages: [", shell=True)
    subprocess.run("'Testing error: calculate 10 / 0',", shell=True)
    subprocess.run("'Let me try: what is 3.14 * 2?',", shell=True)
    subprocess.run("'One more: solve 999 + 1'", shell=True)
    subprocess.run("]}", shell=True)
    subprocess.run("];", shell=True)
    subprocess.run("for (const scenario of scenarios) {", shell=True)
    subprocess.run("const client = await this.createClient(scenario.user);", shell=True)
    subprocess.run("for (const message of scenario.messages) {", shell=True)
    subprocess.run("console.log(chalk.blue(`[${scenario.user}]`), message);", shell=True)
    subprocess.run("client.send(message);", shell=True)
    subprocess.run("await this.delay(2000);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("client.close();", shell=True)
    subprocess.run("await this.delay(1000);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("async createClient(username) {", shell=True)
    subprocess.run("const ws = new WebSocket(this.serverUrl);", shell=True)
    subprocess.run("const userId = uuidv4();", shell=True)
    subprocess.run("await new Promise((resolve) => {", shell=True)
    subprocess.run("ws.on('open', () => {", shell=True)
    subprocess.run("ws.send(JSON.stringify({", shell=True)
    subprocess.run("type: 'join_room',", shell=True)
    subprocess.run("roomId: this.roomId,", shell=True)
    subprocess.run("userId,", shell=True)
    subprocess.run("username,", shell=True)
    subprocess.run("isAgent: false", shell=True)
    subprocess.run("}));", shell=True)
    subprocess.run("resolve();", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("ws.on('message', (data) => {", shell=True)
    subprocess.run("const msg = JSON.parse(data.toString());", shell=True)
    subprocess.run("if (msg.sender && msg.sender !== username && msg.type === 'agent_message') {", shell=True)
    subprocess.run("console.log(chalk.green(`[${msg.sender}]`), msg.content);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("return {", shell=True)
    subprocess.run("send: (content) => {", shell=True)
    subprocess.run("ws.send(JSON.stringify({", shell=True)
    subprocess.run("type: 'user_message',", shell=True)
    subprocess.run("content,", shell=True)
    subprocess.run("sender: username", shell=True)
    subprocess.run("}));", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("close: () => ws.close()", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("async showResults() {", shell=True)
    subprocess.run("console.log(chalk.bold.yellow('\n📊 Demo Results:\n'));", shell=True)
    subprocess.run("// Check story reports", shell=True)
    subprocess.run("const storyDir = path.join(process.cwd(), 'logs', 'stories');", shell=True)
    subprocess.run("if (fs.existsSync(storyDir)) {", shell=True)
    subprocess.run("const files = fs.readdirSync(storyDir).filter(f => f.startsWith('story-'));", shell=True)
    subprocess.run("console.log(chalk.cyan('Story Reports Generated:'), files.length);", shell=True)
    subprocess.run("if (files.length > 0) {", shell=True)
    subprocess.run("const latestReport = files[files.length - 1];", shell=True)
    subprocess.run("const reportPath = path.join(storyDir, latestReport);", shell=True)
    subprocess.run("const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));", shell=True)
    subprocess.run("console.log(chalk.gray('\nLatest Story Report Summary:'));", shell=True)
    subprocess.run("console.log('- Total Events:', report.analysis.totalEvents);", shell=True)
    subprocess.run("console.log('- Themes:', JSON.stringify(report.analysis.themes));", shell=True)
    subprocess.run("console.log('- Active Users:', report.analysis.activeUsers);", shell=True)
    subprocess.run("console.log('- Narrative:', report.narrative);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("// Check intercepted logs", shell=True)
    subprocess.run("console.log(chalk.cyan('\n📡 Interception Summary:'));", shell=True)
    subprocess.run("const logFiles = this.countLogFiles(this.logDir);", shell=True)
    subprocess.run("console.log('- Network Logs:', logFiles.network);", shell=True)
    subprocess.run("console.log('- System Metrics:', logFiles.metrics);", shell=True)
    subprocess.run("console.log('- Total Files:', logFiles.total);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("countLogFiles(dir) {", shell=True)
    subprocess.run("let count = { network: 0, metrics: 0, total: 0 };", shell=True)
    subprocess.run("function scan(currentDir) {", shell=True)
    subprocess.run("if (!fs.existsSync(currentDir)) return;", shell=True)
    subprocess.run("const items = fs.readdirSync(currentDir);", shell=True)
    subprocess.run("items.forEach(item => {", shell=True)
    subprocess.run("const fullPath = path.join(currentDir, item);", shell=True)
    subprocess.run("const stat = fs.statSync(fullPath);", shell=True)
    subprocess.run("if (stat.isDirectory()) {", shell=True)
    subprocess.run("scan(fullPath);", shell=True)
    subprocess.run("} else {", shell=True)
    subprocess.run("count.total++;", shell=True)
    subprocess.run("if (item.includes('network-')) count.network++;", shell=True)
    subprocess.run("if (item.includes('metrics')) count.metrics++;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("scan(dir);", shell=True)
    subprocess.run("return count;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("async cleanup() {", shell=True)
    subprocess.run("console.log(chalk.yellow('\n🧹 Cleaning up...'));", shell=True)
    subprocess.run("this.processes.forEach(proc => {", shell=True)
    subprocess.run("proc.kill('SIGTERM');", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("await this.delay(1000);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("delay(ms) {", shell=True)
    subprocess.run("return new Promise(resolve => setTimeout(resolve, ms));", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("// Run the demo", shell=True)
    subprocess.run("const demo = new CalculatorDemo();", shell=True)
    subprocess.run("demo.run().catch(console.error);", shell=True)
    subprocess.run("EOF", shell=True)
    # Create E2E Test for Calculator Demo
    print("-e ")${GREEN}Creating E2E test...${NC}"
    subprocess.run("cat > "$DEMO_DIR/e2e-calculator-story.test.js" << 'EOF'", shell=True)
    subprocess.run("/**", shell=True)
    subprocess.run("* E2E Test for Calculator with Story Reporter", shell=True)
    subprocess.run("* Verifies story reporter correctly tracks calculator interactions", shell=True)
    subprocess.run("*/", shell=True)
    subprocess.run("const { spawn } = require('child_process');", shell=True)
    subprocess.run("const WebSocket = require('ws');", shell=True)
    subprocess.run("const path = require('path');", shell=True)
    subprocess.run("const fs = require('fs');", shell=True)
    subprocess.run("const chalk = require('chalk');", shell=True)
    subprocess.run("async function runE2ETest() {", shell=True)
    subprocess.run("console.log(chalk.bold.blue('\n🧪 E2E Test: Calculator with Story Reporter\n'));", shell=True)
    subprocess.run("const testResults = [];", shell=True)
    subprocess.run("const processes = [];", shell=True)
    subprocess.run("let storyReportGenerated = false;", shell=True)
    subprocess.run("let calculationsTracked = false;", shell=True)
    subprocess.run("let themesDetected = false;", shell=True)
    subprocess.run("try {", shell=True)
    subprocess.run("// Start server", shell=True)
    subprocess.run("console.log(chalk.cyan('Starting test environment...'));", shell=True)
    subprocess.run("const server = spawn('node', ['./dist/index.js'], {", shell=True)
    subprocess.run("env: { ...process.env, CHAT_PORT: 3001 },", shell=True)
    subprocess.run("stdio: 'pipe'", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("processes.push(server);", shell=True)
    subprocess.run("await new Promise(resolve => setTimeout(resolve, 3000));", shell=True)
    subprocess.run("// Start story reporter with short interval", shell=True)
    subprocess.run("const reporter = spawn('node', ['./scripts/start-story-reporter.js'], {", shell=True)
    subprocess.run("env: {", shell=True)
    subprocess.run("...process.env,", shell=True)
    subprocess.run("SERVER_URL: 'ws://localhost:3001',", shell=True)
    subprocess.run("ROOM_ID: 'test-room'", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("stdio: 'pipe'", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("processes.push(reporter);", shell=True)
    subprocess.run("// Start calculator", shell=True)
    subprocess.run("const calculator = spawn('node', ['./demo/calculator-story/calculator-agent.js'], {", shell=True)
    subprocess.run("env: {", shell=True)
    subprocess.run("...process.env,", shell=True)
    subprocess.run("SERVER_URL: 'ws://localhost:3001',", shell=True)
    subprocess.run("ROOM_ID: 'test-room'", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("stdio: 'pipe'", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("processes.push(calculator);", shell=True)
    subprocess.run("await new Promise(resolve => setTimeout(resolve, 3000));", shell=True)
    subprocess.run("// Run test interactions", shell=True)
    subprocess.run("console.log(chalk.cyan('Running test calculations...'));", shell=True)
    subprocess.run("const ws = new WebSocket('ws://localhost:3001');", shell=True)
    subprocess.run("await new Promise(resolve => ws.on('open', resolve));", shell=True)
    subprocess.run("ws.send(JSON.stringify({", shell=True)
    subprocess.run("type: 'join_room',", shell=True)
    subprocess.run("roomId: 'test-room',", shell=True)
    subprocess.run("userId: 'test-user',", shell=True)
    subprocess.run("username: 'Tester',", shell=True)
    subprocess.run("isAgent: false", shell=True)
    subprocess.run("}));", shell=True)
    subprocess.run("const testMessages = [", shell=True)
    subprocess.run("'Hello calculator!',", shell=True)
    subprocess.run("'calculate 42 + 58',", shell=True)
    subprocess.run("'what is 100 * 3?',", shell=True)
    subprocess.run("'solve 1000 / 10'", shell=True)
    subprocess.run("];", shell=True)
    subprocess.run("for (const msg of testMessages) {", shell=True)
    subprocess.run("ws.send(JSON.stringify({", shell=True)
    subprocess.run("type: 'user_message',", shell=True)
    subprocess.run("content: msg,", shell=True)
    subprocess.run("sender: 'Tester'", shell=True)
    subprocess.run("}));", shell=True)
    subprocess.run("await new Promise(resolve => setTimeout(resolve, 1000));", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("// Wait for story report", shell=True)
    subprocess.run("console.log(chalk.cyan('Waiting for story report...'));", shell=True)
    subprocess.run("await new Promise(resolve => setTimeout(resolve, 65000));", shell=True)
    subprocess.run("// Check results", shell=True)
    subprocess.run("console.log(chalk.cyan('Checking results...'));", shell=True)
    subprocess.run("// Check story reports", shell=True)
    subprocess.run("const storyDir = path.join(process.cwd(), 'logs', 'stories');", shell=True)
    subprocess.run("if (fs.existsSync(storyDir)) {", shell=True)
    subprocess.run("const reports = fs.readdirSync(storyDir).filter(f => f.startsWith('story-'));", shell=True)
    subprocess.run("storyReportGenerated = reports.length > 0;", shell=True)
    subprocess.run("if (storyReportGenerated) {", shell=True)
    subprocess.run("const report = JSON.parse(fs.readFileSync(path.join(storyDir, reports[0]), 'utf8'));", shell=True)
    subprocess.run("// Check if calculations were tracked", shell=True)
    subprocess.run("calculationsTracked = report.events.some(e =>", shell=True)
    subprocess.run("e.content && e.content.includes('calculate')", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("// Check themes", shell=True)
    subprocess.run("themesDetected = report.analysis.themes &&", shell=True)
    subprocess.run("(report.analysis.themes.technical > 0 || report.analysis.themes.general > 0);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("// Report results", shell=True)
    subprocess.run("console.log(chalk.bold.yellow('\n📊 Test Results:'));", shell=True)
    subprocess.run("testResults.push({", shell=True)
    subprocess.run("name: 'Story Report Generated',", shell=True)
    subprocess.run("passed: storyReportGenerated", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("testResults.push({", shell=True)
    subprocess.run("name: 'Calculations Tracked',", shell=True)
    subprocess.run("passed: calculationsTracked", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("testResults.push({", shell=True)
    subprocess.run("name: 'Themes Detected',", shell=True)
    subprocess.run("passed: themesDetected", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("// Display results", shell=True)
    subprocess.run("testResults.forEach(result => {", shell=True)
    subprocess.run("const icon = result.passed ? '✅' : '❌';", shell=True)
    subprocess.run("const color = result.passed ? chalk.green : chalk.red;", shell=True)
    subprocess.run("console.log(color(`${icon} ${result.name}`));", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("const passed = testResults.filter(r => r.passed).length;", shell=True)
    subprocess.run("const total = testResults.length;", shell=True)
    subprocess.run("console.log(chalk.bold(`\nTotal: ${passed}/${total} tests passed`));", shell=True)
    subprocess.run("if (passed === total) {", shell=True)
    subprocess.run("console.log(chalk.bold.green('\n✅ All tests passed!'));", shell=True)
    subprocess.run("} else {", shell=True)
    subprocess.run("console.log(chalk.bold.red('\n❌ Some tests failed'));", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("ws.close();", shell=True)
    subprocess.run("} catch (error) {", shell=True)
    subprocess.run("console.error(chalk.red('Test error:'), error);", shell=True)
    subprocess.run("} finally {", shell=True)
    subprocess.run("// Cleanup", shell=True)
    subprocess.run("processes.forEach(p => p.kill());", shell=True)
    subprocess.run("await new Promise(resolve => setTimeout(resolve, 1000));", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("// Run the test", shell=True)
    subprocess.run("runE2ETest().catch(console.error);", shell=True)
    subprocess.run("EOF", shell=True)
    # Create README for the demo
    print("-e ")${GREEN}Creating demo README...${NC}"
    subprocess.run("cat > "$DEMO_DIR/README.md" << 'EOF'", shell=True)
    # Calculator Demo with Story Reporter
    subprocess.run("This demo showcases how the Story Reporter agent tracks and reports on chat room interactions, using a simple calculator agent as an example.", shell=True)
    # # Components
    subprocess.run("1. **Calculator Agent** (`calculator-agent.js`)", shell=True)
    subprocess.run("- Simple math operations (add, subtract, multiply, divide)", shell=True)
    subprocess.run("- Responds to calculation requests in natural language", shell=True)
    subprocess.run("- Demonstrates agent interaction patterns", shell=True)
    subprocess.run("2. **Story Reporter**", shell=True)
    subprocess.run("- Tracks all chat events and messages", shell=True)
    subprocess.run("- Detects conversation themes (technical, social, system)", shell=True)
    subprocess.run("- Generates periodic narrative reports", shell=True)
    subprocess.run("- Saves detailed logs for analysis", shell=True)
    subprocess.run("3. **External Log Library**", shell=True)
    subprocess.run("- Intercepts all network communications", shell=True)
    subprocess.run("- Captures system metrics", shell=True)
    subprocess.run("- Provides transparent monitoring", shell=True)
    # # Running the Demo
    # ## Quick Start
    subprocess.run("```bash", shell=True)
    # From project root
    subprocess.run("npm run build", shell=True)
    subprocess.run("node demo/calculator-story/run-demo.js", shell=True)
    subprocess.run("```", shell=True)
    # ## Manual Steps
    subprocess.run("1. Start the chat server:", shell=True)
    subprocess.run("```bash", shell=True)
    subprocess.run("npm run server", shell=True)
    subprocess.run("```", shell=True)
    subprocess.run("2. Start Story Reporter:", shell=True)
    subprocess.run("```bash", shell=True)
    subprocess.run("npm run start:story-reporter", shell=True)
    subprocess.run("```", shell=True)
    subprocess.run("3. Start Calculator Agent:", shell=True)
    subprocess.run("```bash", shell=True)
    subprocess.run("node demo/calculator-story/calculator-agent.js", shell=True)
    subprocess.run("```", shell=True)
    subprocess.run("4. Connect a client and interact:", shell=True)
    subprocess.run("```bash", shell=True)
    subprocess.run("npm run client TestUser calculator-demo", shell=True)
    subprocess.run("```", shell=True)
    # ## E2E Test
    subprocess.run("```bash", shell=True)
    subprocess.run("node demo/calculator-story/e2e-calculator-story.test.js", shell=True)
    subprocess.run("```", shell=True)
    # # What to Observe
    subprocess.run("1. **Real-time Tracking**: Story Reporter tracks every message and event", shell=True)
    subprocess.run("2. **Theme Detection**: Messages are categorized (technical for calculations)", shell=True)
    subprocess.run("3. **User Activity**: Tracks who is most active", shell=True)
    subprocess.run("4. **Narrative Generation**: Creates a story about what happened", shell=True)
    subprocess.run("5. **External Monitoring**: All network calls are logged", shell=True)
    # # Story Report Format
    subprocess.run("Reports are saved to `logs/stories/story-*.json` with:", shell=True)
    subprocess.run("- Event timeline", shell=True)
    subprocess.run("- Theme analysis", shell=True)
    subprocess.run("- User activity metrics", shell=True)
    subprocess.run("- Generated narrative", shell=True)
    subprocess.run("- Key events summary", shell=True)
    # # Expected Output
    subprocess.run("The demo will show:", shell=True)
    subprocess.run("- Calculator responding to math requests", shell=True)
    subprocess.run("- Story Reporter generating periodic reports", shell=True)
    subprocess.run("- Themes detected (technical, social)", shell=True)
    subprocess.run("- User activity tracking", shell=True)
    subprocess.run("- Narrative about calculation session", shell=True)
    # # Customization
    subprocess.run("Modify `calculator-agent.js` to:", shell=True)
    subprocess.run("- Add more complex operations", shell=True)
    subprocess.run("- Change response format", shell=True)
    subprocess.run("- Add error handling", shell=True)
    subprocess.run("Modify story reporter config to:", shell=True)
    subprocess.run("- Change report interval", shell=True)
    subprocess.run("- Add custom themes", shell=True)
    subprocess.run("- Adjust narrative style", shell=True)
    subprocess.run("EOF", shell=True)
    # Make scripts executable
    subprocess.run("chmod +x "$DEMO_DIR/run-demo.js"", shell=True)
    subprocess.run("chmod +x "$DEMO_DIR/e2e-calculator-story.test.js"", shell=True)
    print("")
    print("-e ")${GREEN}✅ Setup Complete!${NC}"
    print("")
    print("-e ")${CYAN}Demo created in: ${DEMO_DIR}${NC}"
    print("")
    print("To run the demo:")
    print("-e ")${YELLOW}  node ${DEMO_DIR}/run-demo.js${NC}"
    print("")
    print("To run E2E test:")
    print("-e ")${YELLOW}  node ${DEMO_DIR}/e2e-calculator-story.test.js${NC}"
    print("")
    print("Components created:")
    print("  - Calculator Agent (simple math operations)")
    print("  - Demo Runner (automated scenario)")
    print("  - E2E Test (verification)")
    print("  - README with instructions")
    print("")

if __name__ == "__main__":
    main()