#!/usr/bin/env python3
"""
Migrated from: setup-demo.sh
Auto-generated Python - 2025-08-16T04:57:27.640Z
"""

import os
import sys
import subprocess
import shutil
import glob
from pathlib import Path

def main():
    # Setup script for Mate Dealer Demo
    # This creates a demo version of the mate dealer app with GUI selector integration
    subprocess.run("set -e", shell=True)
    subprocess.run("SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"", shell=True)
    subprocess.run("PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"", shell=True)
    subprocess.run("DEMO_NAME="mate-dealer"", shell=True)
    subprocess.run("DEMO_DIR="$PROJECT_ROOT/demo/$DEMO_NAME"", shell=True)
    print("=== Mate Dealer Demo Setup ===")
    print("Creating demo project for mate dealer marketplace app...")
    # Step 1: Create demo using existing setup script
    print("Step 1: Creating demo project structure...")
    os.chdir(""$SCRIPT_DIR/setup"")
    subprocess.run("python3 demo.py "$DEMO_NAME" --language typescript", shell=True)
    # Step 2: Navigate to demo directory
    os.chdir(""$DEMO_DIR"")
    # Step 3: Create FEATURE.md based on original mate_dealer
    print("Step 3: Creating FEATURE.md...")
    subprocess.run("cat > FEATURE.md << 'EOF'", shell=True)
    # Mate Dealer - Feature Backlog
    # # Overview
    subprocess.run("Mate Dealer is a marketplace application that connects mate tea dealers with customers, providing a platform for discovery, ordering, and business management.", shell=True)
    # # User Stories
    # ## Authentication & User Management
    subprocess.run("- [ ] As a user, I want to register as either a dealer or customer", shell=True)
    subprocess.run("- [ ] As a user, I want to login with my credentials", shell=True)
    subprocess.run("- [ ] As a user, I want to maintain a persistent session", shell=True)
    subprocess.run("- [ ] As a user, I want to update my profile information", shell=True)
    subprocess.run("- [ ] As a user, I want to reset my password if forgotten", shell=True)
    # ## Dealer Features
    subprocess.run("- [ ] As a dealer, I want to view my business dashboard", shell=True)
    subprocess.run("- [ ] As a dealer, I want to manage my product inventory", shell=True)
    subprocess.run("- [ ] As a dealer, I want to view and manage my client list", shell=True)
    subprocess.run("- [ ] As a dealer, I want to track orders and sales", shell=True)
    subprocess.run("- [ ] As a dealer, I want to set my service area and availability", shell=True)
    subprocess.run("- [ ] As a dealer, I want to view analytics of my business performance", shell=True)
    # ## Customer Features
    subprocess.run("- [ ] As a customer, I want to browse available dealers in my area", shell=True)
    subprocess.run("- [ ] As a customer, I want to search and filter dealers by location, products, and ratings", shell=True)
    subprocess.run("- [ ] As a customer, I want to view dealer profiles and product catalogs", shell=True)
    subprocess.run("- [ ] As a customer, I want to receive personalized dealer recommendations", shell=True)
    subprocess.run("- [ ] As a customer, I want to place orders with dealers", shell=True)
    subprocess.run("- [ ] As a customer, I want to track my order status", shell=True)
    subprocess.run("- [ ] As a customer, I want to leave reviews and ratings for dealers", shell=True)
    # ## Matching System
    subprocess.run("- [ ] As a customer, I want to be matched with compatible dealers based on preferences", shell=True)
    subprocess.run("- [ ] As a dealer, I want to be matched with customers in my service area", shell=True)
    subprocess.run("- [ ] As a user, I want the matching algorithm to consider location, preferences, and availability", shell=True)
    # ## Communication
    subprocess.run("- [ ] As a user, I want to message dealers/customers within the app", shell=True)
    subprocess.run("- [ ] As a user, I want to receive notifications for new messages and orders", shell=True)
    subprocess.run("- [ ] As a dealer, I want to send promotional messages to my customers", shell=True)
    # ## Technical Features
    subprocess.run("- [ ] As a developer, I want comprehensive logging for debugging", shell=True)
    subprocess.run("- [ ] As a developer, I want error boundaries to handle crashes gracefully", shell=True)
    subprocess.run("- [ ] As a user, I want dark/light theme support", shell=True)
    subprocess.run("- [ ] As a user, I want the app to work offline with data sync", shell=True)
    subprocess.run("- [ ] As a developer, I want E2E tests to ensure quality", shell=True)
    # # Implementation Priority
    subprocess.run("1. Authentication system", shell=True)
    subprocess.run("2. Basic dealer and customer dashboards", shell=True)
    subprocess.run("3. Dealer discovery and search", shell=True)
    subprocess.run("4. Product catalog management", shell=True)
    subprocess.run("5. Order placement and tracking", shell=True)
    subprocess.run("6. Matching algorithm", shell=True)
    subprocess.run("7. Reviews and ratings", shell=True)
    subprocess.run("8. In-app messaging", shell=True)
    subprocess.run("9. Analytics and reporting", shell=True)
    subprocess.run("10. Push notifications", shell=True)
    subprocess.run("EOF", shell=True)
    # Step 4: Create project structure
    print("Step 4: Creating project structure...")
    Path("src/{components,screens,services,utils,types}").mkdir(parents=True, exist_ok=True)
    Path("src/components/{common,dealer,customer}").mkdir(parents=True, exist_ok=True)
    Path("src/screens/{auth,dealer,customer,shared}").mkdir(parents=True, exist_ok=True)
    Path("tests/{unit,integration,e2e}").mkdir(parents=True, exist_ok=True)
    Path("public/{images,styles}").mkdir(parents=True, exist_ok=True)
    # Step 5: Create main application files
    print("Step 5: Creating application files...")
    # Create TypeScript config
    subprocess.run("cat > tsconfig.json << 'EOF'", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run(""compilerOptions": {", shell=True)
    subprocess.run(""target": "ES2020",", shell=True)
    subprocess.run(""module": "commonjs",", shell=True)
    subprocess.run(""lib": ["ES2020", "DOM"],", shell=True)
    subprocess.run(""jsx": "react",", shell=True)
    subprocess.run(""outDir": "./dist",", shell=True)
    subprocess.run(""strict": true,", shell=True)
    subprocess.run(""esModuleInterop": true,", shell=True)
    subprocess.run(""skipLibCheck": true,", shell=True)
    subprocess.run(""forceConsistentCasingInFileNames": true,", shell=True)
    subprocess.run(""resolveJsonModule": true,", shell=True)
    subprocess.run(""moduleResolution": "node",", shell=True)
    subprocess.run(""baseUrl": "./src",", shell=True)
    subprocess.run(""paths": {", shell=True)
    subprocess.run(""@/*": ["*"]", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run(""include": ["src/**/*"],", shell=True)
    subprocess.run(""exclude": ["node_modules", "dist", "tests"]", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("EOF", shell=True)
    # Create package.json
    subprocess.run("cat > package.json << 'EOF'", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run(""name": "mate-dealer-demo",", shell=True)
    subprocess.run(""version": "1.0.0",", shell=True)
    subprocess.run(""description": "Mate Dealer - Marketplace for mate tea dealers and customers",", shell=True)
    subprocess.run(""main": "dist/server.js",", shell=True)
    subprocess.run(""scripts": {", shell=True)
    subprocess.run(""dev": "webpack serve --mode development",", shell=True)
    subprocess.run(""build": "webpack --mode production",", shell=True)
    subprocess.run(""server": "node dist/server.js",", shell=True)
    subprocess.run(""server:dev": "tsx watch src/server.ts",", shell=True)
    subprocess.run(""test": "jest",", shell=True)
    subprocess.run(""test:e2e": "playwright test",", shell=True)
    subprocess.run(""lint": "eslint src/**/*.{ts,tsx}",", shell=True)
    subprocess.run(""format": "prettier --write src/**/*.{ts,tsx,css}"", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run(""dependencies": {", shell=True)
    subprocess.run(""react": "^18.2.0",", shell=True)
    subprocess.run(""react-dom": "^18.2.0",", shell=True)
    subprocess.run(""react-router-dom": "^6.20.0",", shell=True)
    subprocess.run(""express": "^4.18.2",", shell=True)
    subprocess.run(""cors": "^2.8.5",", shell=True)
    subprocess.run(""dotenv": "^16.3.1",", shell=True)
    subprocess.run(""bcryptjs": "^2.4.3",", shell=True)
    subprocess.run(""jsonwebtoken": "^9.0.2",", shell=True)
    subprocess.run(""sqlite3": "^5.1.6"", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run(""devDependencies": {", shell=True)
    subprocess.run(""@types/react": "^18.2.0",", shell=True)
    subprocess.run(""@types/react-dom": "^18.2.0",", shell=True)
    subprocess.run(""@types/node": "^20.10.0",", shell=True)
    subprocess.run(""@types/express": "^4.17.21",", shell=True)
    subprocess.run(""@types/cors": "^2.8.17",", shell=True)
    subprocess.run(""@types/bcryptjs": "^2.4.6",", shell=True)
    subprocess.run(""@types/jsonwebtoken": "^9.0.5",", shell=True)
    subprocess.run(""typescript": "^5.3.0",", shell=True)
    subprocess.run(""webpack": "^5.89.0",", shell=True)
    subprocess.run(""webpack-cli": "^5.1.4",", shell=True)
    subprocess.run(""webpack-dev-server": "^4.15.1",", shell=True)
    subprocess.run(""html-webpack-plugin": "^5.5.3",", shell=True)
    subprocess.run(""ts-loader": "^9.5.1",", shell=True)
    subprocess.run(""css-loader": "^6.8.1",", shell=True)
    subprocess.run(""style-loader": "^3.3.3",", shell=True)
    subprocess.run(""tsx": "^4.6.2",", shell=True)
    subprocess.run(""@playwright/test": "^1.40.0",", shell=True)
    subprocess.run(""jest": "^29.7.0",", shell=True)
    subprocess.run(""@testing-library/react": "^14.1.0",", shell=True)
    subprocess.run(""@testing-library/jest-dom": "^6.1.5",", shell=True)
    subprocess.run(""eslint": "^8.55.0",", shell=True)
    subprocess.run(""prettier": "^3.1.0"", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("EOF", shell=True)
    # Create webpack config
    subprocess.run("cat > webpack.config.js << 'EOF'", shell=True)
    subprocess.run("const path = require('path');", shell=True)
    subprocess.run("const HtmlWebpackPlugin = require('html-webpack-plugin');", shell=True)
    subprocess.run("module.exports = {", shell=True)
    subprocess.run("entry: './src/client/index.tsx',", shell=True)
    subprocess.run("output: {", shell=True)
    subprocess.run("path: path.resolve(__dirname, 'dist/public'),", shell=True)
    subprocess.run("filename: 'bundle.js',", shell=True)
    subprocess.run("publicPath: '/'", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("resolve: {", shell=True)
    subprocess.run("extensions: ['.ts', '.tsx', '.js', '.jsx'],", shell=True)
    subprocess.run("alias: {", shell=True)
    subprocess.run("'@': path.resolve(__dirname, 'src')", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("module: {", shell=True)
    subprocess.run("rules: [", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run("test: /\.tsx?$/,", shell=True)
    subprocess.run("use: 'ts-loader',", shell=True)
    subprocess.run("exclude: /node_modules/", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run("test: /\.css$/,", shell=True)
    subprocess.run("use: ['style-loader', 'css-loader']", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("]", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("plugins: [", shell=True)
    subprocess.run("new HtmlWebpackPlugin({", shell=True)
    subprocess.run("template: './public/index.html',", shell=True)
    subprocess.run("title: 'Mate Dealer - Demo'", shell=True)
    subprocess.run("})", shell=True)
    subprocess.run("],", shell=True)
    subprocess.run("devServer: {", shell=True)
    subprocess.run("port: 3310,", shell=True)
    subprocess.run("hot: true,", shell=True)
    subprocess.run("historyApiFallback: true,", shell=True)
    subprocess.run("proxy: {", shell=True)
    subprocess.run("'/api': 'http://localhost:3311'", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("EOF", shell=True)
    # Create HTML template
    subprocess.run("cat > public/index.html << 'EOF'", shell=True)
    subprocess.run("<!DOCTYPE html>", shell=True)
    subprocess.run("<html lang="en">", shell=True)
    subprocess.run("<head>", shell=True)
    subprocess.run("<meta charset="UTF-8">", shell=True)
    subprocess.run("<meta name="viewport" content="width=device-width, initial-scale=1.0">", shell=True)
    subprocess.run("<title>Mate Dealer - Marketplace Demo</title>", shell=True)
    subprocess.run("<link rel="stylesheet" href="/styles/main.css">", shell=True)
    subprocess.run("</head>", shell=True)
    subprocess.run("<body>", shell=True)
    subprocess.run("<div id="root"></div>", shell=True)
    subprocess.run("</body>", shell=True)
    subprocess.run("</html>", shell=True)
    subprocess.run("EOF", shell=True)
    # Create main CSS with AI Dev Portal theme
    subprocess.run("cat > public/styles/main.css << 'EOF'", shell=True)
    subprocess.run("/* AI Dev Portal Theme Variables */", shell=True)
    subprocess.run(":root {", shell=True)
    subprocess.run("--primary-color: #2563eb;", shell=True)
    subprocess.run("--primary-hover: #1d4ed8;", shell=True)
    subprocess.run("--secondary-color: #10b981;", shell=True)
    subprocess.run("--accent-color: #8b5cf6;", shell=True)
    subprocess.run("--background-color: #f9fafb;", shell=True)
    subprocess.run("--surface-color: #ffffff;", shell=True)
    subprocess.run("--text-primary: #111827;", shell=True)
    subprocess.run("--text-secondary: #6b7280;", shell=True)
    subprocess.run("--border-color: #e5e7eb;", shell=True)
    subprocess.run("--shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);", shell=True)
    subprocess.run("--shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);", shell=True)
    subprocess.run("--shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);", shell=True)
    subprocess.run("--radius-sm: 0.375rem;", shell=True)
    subprocess.run("--radius-md: 0.5rem;", shell=True)
    subprocess.run("--radius-lg: 0.75rem;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("* {", shell=True)
    subprocess.run("margin: 0;", shell=True)
    subprocess.run("padding: 0;", shell=True)
    subprocess.run("box-sizing: border-box;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("body {", shell=True)
    subprocess.run("font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;", shell=True)
    subprocess.run("background-color: var(--background-color);", shell=True)
    subprocess.run("color: var(--text-primary);", shell=True)
    subprocess.run("line-height: 1.6;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run(".container {", shell=True)
    subprocess.run("max-width: 1200px;", shell=True)
    subprocess.run("margin: 0 auto;", shell=True)
    subprocess.run("padding: 0 1rem;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("/* Common styles */", shell=True)
    subprocess.run(".btn {", shell=True)
    subprocess.run("padding: 0.5rem 1rem;", shell=True)
    subprocess.run("border: none;", shell=True)
    subprocess.run("border-radius: var(--radius-md);", shell=True)
    subprocess.run("font-weight: 500;", shell=True)
    subprocess.run("cursor: pointer;", shell=True)
    subprocess.run("transition: all 0.2s;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run(".btn-primary {", shell=True)
    subprocess.run("background-color: var(--primary-color);", shell=True)
    subprocess.run("color: white;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run(".btn-primary:hover {", shell=True)
    subprocess.run("background-color: var(--primary-hover);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run(".card {", shell=True)
    subprocess.run("background-color: var(--surface-color);", shell=True)
    subprocess.run("border-radius: var(--radius-lg);", shell=True)
    subprocess.run("padding: 1.5rem;", shell=True)
    subprocess.run("box-shadow: var(--shadow-md);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("EOF", shell=True)
    # Create React entry point
    subprocess.run("cat > src/client/index.tsx << 'EOF'", shell=True)
    subprocess.run("import React from 'react';", shell=True)
    subprocess.run("import ReactDOM from 'react-dom/client';", shell=True)
    subprocess.run("import { App } from './App';", shell=True)
    subprocess.run("const root = ReactDOM.createRoot(", shell=True)
    subprocess.run("document.getElementById('root') as HTMLElement", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("root.render(", shell=True)
    subprocess.run("<React.StrictMode>", shell=True)
    subprocess.run("<App />", shell=True)
    subprocess.run("</React.StrictMode>", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("EOF", shell=True)
    # Create main App component
    subprocess.run("cat > src/client/App.tsx << 'EOF'", shell=True)
    subprocess.run("import React from 'react';", shell=True)
    subprocess.run("import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';", shell=True)
    subprocess.run("import { LoginScreen } from './screens/LoginScreen';", shell=True)
    subprocess.run("import { DealerDashboard } from './screens/DealerDashboard';", shell=True)
    subprocess.run("import { CustomerDashboard } from './screens/CustomerDashboard';", shell=True)
    os.environ["const App: React.FC "] = " () => {"
    subprocess.run("return (", shell=True)
    subprocess.run("<Router>", shell=True)
    subprocess.run("<div className="app">", shell=True)
    subprocess.run("<Routes>", shell=True)
    subprocess.run("<Route path="/" element={<LoginScreen />} />", shell=True)
    subprocess.run("<Route path="/dealer/dashboard" element={<DealerDashboard />} />", shell=True)
    subprocess.run("<Route path="/customer/dashboard" element={<CustomerDashboard />} />", shell=True)
    subprocess.run("</Routes>", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run("</Router>", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("EOF", shell=True)
    # Create Login Screen
    subprocess.run("cat > src/client/screens/LoginScreen.tsx << 'EOF'", shell=True)
    subprocess.run("import React, { useState } from 'react';", shell=True)
    subprocess.run("import { useNavigate } from 'react-router-dom';", shell=True)
    os.environ["const LoginScreen: React.FC "] = " () => {"
    subprocess.run("const [userType, setUserType] = useState<'dealer' | 'customer'>('customer');", shell=True)
    subprocess.run("const [email, setEmail] = useState('');", shell=True)
    subprocess.run("const [password, setPassword] = useState('');", shell=True)
    subprocess.run("const navigate = useNavigate();", shell=True)
    subprocess.run("const handleLogin = async (e: React.FormEvent) => {", shell=True)
    subprocess.run("e.preventDefault();", shell=True)
    subprocess.run("// TODO: Implement actual login", shell=True)
    subprocess.run("if (userType === 'dealer') {", shell=True)
    subprocess.run("navigate('/dealer/dashboard');", shell=True)
    subprocess.run("} else {", shell=True)
    subprocess.run("navigate('/customer/dashboard');", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("return (", shell=True)
    subprocess.run("<div className="container" style={{ marginTop: '4rem' }}>", shell=True)
    subprocess.run("<div className="card" style={{ maxWidth: '400px', margin: '0 auto' }}>", shell=True)
    subprocess.run("<h1>Mate Dealer Login</h1>", shell=True)
    subprocess.run("<form onSubmit={handleLogin}>", shell=True)
    subprocess.run("<div style={{ marginTop: '1rem' }}>", shell=True)
    subprocess.run("<label>", shell=True)
    subprocess.run("<input", shell=True)
    subprocess.run("type="radio"", shell=True)
    subprocess.run("value="customer"", shell=True)
    subprocess.run("checked={userType === 'customer'}", shell=True)
    subprocess.run("onChange={() => setUserType('customer')}", shell=True)
    subprocess.run("/>", shell=True)
    subprocess.run("Customer", shell=True)
    subprocess.run("</label>", shell=True)
    subprocess.run("<label style={{ marginLeft: '1rem' }}>", shell=True)
    subprocess.run("<input", shell=True)
    subprocess.run("type="radio"", shell=True)
    subprocess.run("value="dealer"", shell=True)
    subprocess.run("checked={userType === 'dealer'}", shell=True)
    subprocess.run("onChange={() => setUserType('dealer')}", shell=True)
    subprocess.run("/>", shell=True)
    subprocess.run("Dealer", shell=True)
    subprocess.run("</label>", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run("<div style={{ marginTop: '1rem' }}>", shell=True)
    subprocess.run("<input", shell=True)
    subprocess.run("type="email"", shell=True)
    subprocess.run("placeholder="Email"", shell=True)
    subprocess.run("value={email}", shell=True)
    subprocess.run("onChange={(e) => setEmail(e.target.value)}", shell=True)
    subprocess.run("style={{ width: '100%', padding: '0.5rem' }}", shell=True)
    subprocess.run("required", shell=True)
    subprocess.run("/>", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run("<div style={{ marginTop: '1rem' }}>", shell=True)
    subprocess.run("<input", shell=True)
    subprocess.run("type="password"", shell=True)
    subprocess.run("placeholder="Password"", shell=True)
    subprocess.run("value={password}", shell=True)
    subprocess.run("onChange={(e) => setPassword(e.target.value)}", shell=True)
    subprocess.run("style={{ width: '100%', padding: '0.5rem' }}", shell=True)
    subprocess.run("required", shell=True)
    subprocess.run("/>", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run("<button type="submit" className="btn btn-primary" style={{ marginTop: '1rem', width: '100%' }}>", shell=True)
    subprocess.run("Login as {userType}", shell=True)
    subprocess.run("</button>", shell=True)
    subprocess.run("</form>", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("EOF", shell=True)
    # Create Dealer Dashboard
    subprocess.run("cat > src/client/screens/DealerDashboard.tsx << 'EOF'", shell=True)
    subprocess.run("import React from 'react';", shell=True)
    os.environ["const DealerDashboard: React.FC "] = " () => {"
    subprocess.run("return (", shell=True)
    subprocess.run("<div className="container">", shell=True)
    subprocess.run("<h1>Dealer Dashboard</h1>", shell=True)
    subprocess.run("<div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: '1rem', marginTop: '2rem' }}>", shell=True)
    subprocess.run("<div className="card">", shell=True)
    subprocess.run("<h3>Total Customers</h3>", shell=True)
    subprocess.run("<p style={{ fontSize: '2rem', fontWeight: 'bold' }}>24</p>", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run("<div className="card">", shell=True)
    subprocess.run("<h3>Active Orders</h3>", shell=True)
    subprocess.run("<p style={{ fontSize: '2rem', fontWeight: 'bold' }}>5</p>", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run("<div className="card">", shell=True)
    subprocess.run("<h3>Revenue This Month</h3>", shell=True)
    subprocess.run("<p style={{ fontSize: '2rem', fontWeight: 'bold' }}>$3,450</p>", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run("<div className="card" style={{ marginTop: '2rem' }}>", shell=True)
    subprocess.run("<h3>Recent Orders</h3>", shell=True)
    subprocess.run("<p>Order management coming soon...</p>", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("EOF", shell=True)
    # Create Customer Dashboard
    subprocess.run("cat > src/client/screens/CustomerDashboard.tsx << 'EOF'", shell=True)
    subprocess.run("import React from 'react';", shell=True)
    os.environ["const CustomerDashboard: React.FC "] = " () => {"
    subprocess.run("return (", shell=True)
    subprocess.run("<div className="container">", shell=True)
    subprocess.run("<h1>Find Your Mate Dealer</h1>", shell=True)
    subprocess.run("<div className="card" style={{ marginTop: '2rem' }}>", shell=True)
    subprocess.run("<h3>Recommended Dealers</h3>", shell=True)
    subprocess.run("<div style={{ display: 'grid', gap: '1rem', marginTop: '1rem' }}>", shell=True)
    subprocess.run("<div style={{ border: '1px solid var(--border-color)', padding: '1rem', borderRadius: 'var(--radius-md)' }}>", shell=True)
    subprocess.run("<h4>Juan's Mate Shop</h4>", shell=True)
    subprocess.run("<p>Distance: 2.3 km</p>", shell=True)
    subprocess.run("<p>Rating: ⭐⭐⭐⭐⭐</p>", shell=True)
    subprocess.run("<button className="btn btn-primary" style={{ marginTop: '0.5rem' }}>View Profile</button>", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run("<div style={{ border: '1px solid var(--border-color)', padding: '1rem', borderRadius: 'var(--radius-md)' }}>", shell=True)
    subprocess.run("<h4>Maria's Traditional Mate</h4>", shell=True)
    subprocess.run("<p>Distance: 3.1 km</p>", shell=True)
    subprocess.run("<p>Rating: ⭐⭐⭐⭐</p>", shell=True)
    subprocess.run("<button className="btn btn-primary" style={{ marginTop: '0.5rem' }}>View Profile</button>", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("EOF", shell=True)
    # Create basic server
    subprocess.run("cat > src/server.ts << 'EOF'", shell=True)
    subprocess.run("import express from 'express';", shell=True)
    subprocess.run("import cors from 'cors';", shell=True)
    subprocess.run("import path from 'path';", shell=True)
    subprocess.run("const app = express();", shell=True)
    subprocess.run("const PORT = process.env.PORT || 3311;", shell=True)
    subprocess.run("app.use(cors());", shell=True)
    subprocess.run("app.use(express.json());", shell=True)
    subprocess.run("// Serve static files", shell=True)
    subprocess.run("app.use(express.static(path.join(__dirname, 'public')));", shell=True)
    subprocess.run("// API routes", shell=True)
    subprocess.run("app.get('/api/health', (req, res) => {", shell=True)
    subprocess.run("res.json({ status: 'healthy', service: 'mate-dealer-demo' });", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("// Serve React app", shell=True)
    subprocess.run("app.get('*', (req, res) => {", shell=True)
    subprocess.run("res.sendFile(path.join(__dirname, 'public', 'index.html'));", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("app.listen(PORT, () => {", shell=True)
    subprocess.run("console.log(`Mate Dealer server running on port ${PORT}`);", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("EOF", shell=True)
    # Step 6: Create E2E test configuration
    print("Step 6: Setting up E2E tests...")
    # Create Playwright config
    subprocess.run("cat > playwright.config.ts << 'EOF'", shell=True)
    subprocess.run("import { defineConfig, devices } from '@playwright/test';", shell=True)
    subprocess.run("export default defineConfig({", shell=True)
    subprocess.run("testDir: './tests/e2e',", shell=True)
    subprocess.run("fullyParallel: true,", shell=True)
    subprocess.run("forbidOnly: !!process.env.CI,", shell=True)
    subprocess.run("retries: process.env.CI ? 2 : 0,", shell=True)
    subprocess.run("workers: process.env.CI ? 1 : undefined,", shell=True)
    subprocess.run("reporter: 'html',", shell=True)
    subprocess.run("use: {", shell=True)
    subprocess.run("baseURL: 'http://localhost:3310',", shell=True)
    subprocess.run("trace: 'on-first-retry',", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("projects: [", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run("name: 'chromium',", shell=True)
    subprocess.run("use: { ...devices['Desktop Chrome'] },", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("],", shell=True)
    subprocess.run("webServer: {", shell=True)
    subprocess.run("command: 'npm run dev',", shell=True)
    subprocess.run("port: 3310,", shell=True)
    subprocess.run("reuseExistingServer: !process.env.CI,", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("EOF", shell=True)
    # Create E2E test
    subprocess.run("cat > tests/e2e/mate-dealer.spec.ts << 'EOF'", shell=True)
    subprocess.run("import { test, expect } from '@playwright/test';", shell=True)
    subprocess.run("test.describe('Mate Dealer Demo', () => {", shell=True)
    subprocess.run("test('should load login page', async ({ page }) => {", shell=True)
    subprocess.run("await page.goto('/');", shell=True)
    subprocess.run("await expect(page.getByText('Mate Dealer Login')).toBeVisible();", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("test('should login as dealer', async ({ page }) => {", shell=True)
    subprocess.run("await page.goto('/');", shell=True)
    subprocess.run("// Select dealer option", shell=True)
    subprocess.run("await page.getByLabel('Dealer').click();", shell=True)
    subprocess.run("// Fill login form", shell=True)
    subprocess.run("await page.fill('input[type="email"]', 'dealer@example.com');", shell=True)
    subprocess.run("await page.fill('input[type="password"]', 'password123');", shell=True)
    subprocess.run("// Click login button", shell=True)
    subprocess.run("await page.getByRole('button', { name: 'Login as dealer' }).click();", shell=True)
    subprocess.run("// Should navigate to dealer dashboard", shell=True)
    subprocess.run("await expect(page).toHaveURL('/dealer/dashboard');", shell=True)
    subprocess.run("await expect(page.getByText('Dealer Dashboard')).toBeVisible();", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("test('should login as customer', async ({ page }) => {", shell=True)
    subprocess.run("await page.goto('/');", shell=True)
    subprocess.run("// Customer is selected by default", shell=True)
    subprocess.run("await page.fill('input[type="email"]', 'customer@example.com');", shell=True)
    subprocess.run("await page.fill('input[type="password"]', 'password123');", shell=True)
    subprocess.run("// Click login button", shell=True)
    subprocess.run("await page.getByRole('button', { name: 'Login as customer' }).click();", shell=True)
    subprocess.run("// Should navigate to customer dashboard", shell=True)
    subprocess.run("await expect(page).toHaveURL('/customer/dashboard');", shell=True)
    subprocess.run("await expect(page.getByText('Find Your Mate Dealer')).toBeVisible();", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("test('should show dealer recommendations', async ({ page }) => {", shell=True)
    subprocess.run("await page.goto('/customer/dashboard');", shell=True)
    subprocess.run("// Check for recommended dealers", shell=True)
    subprocess.run("await expect(page.getByText('Recommended Dealers')).toBeVisible();", shell=True)
    subprocess.run("await expect(page.getByText("Juan's Mate Shop")).toBeVisible();", shell=True)
    subprocess.run("await expect(page.getByText("Maria's Traditional Mate")).toBeVisible();", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("test('should show dealer metrics', async ({ page }) => {", shell=True)
    subprocess.run("await page.goto('/dealer/dashboard');", shell=True)
    subprocess.run("// Check for dashboard metrics", shell=True)
    subprocess.run("await expect(page.getByText('Total Customers')).toBeVisible();", shell=True)
    subprocess.run("await expect(page.getByText('24')).toBeVisible();", shell=True)
    subprocess.run("await expect(page.getByText('Active Orders')).toBeVisible();", shell=True)
    subprocess.run("await expect(page.getByText('5')).toBeVisible();", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("EOF", shell=True)
    # Step 7: Create GUI selector integration script
    print("Step 7: Creating GUI selector integration...")
    subprocess.run("cat > integrate-gui-selector.sh << 'EOF'", shell=True)
    # Script to demonstrate GUI selector integration with Mate Dealer
    print("=== GUI Selector Integration Demo ===")
    print("")
    # Start GUI selector server if not running
    subprocess.run("if ! curl -s http://localhost:3456/api/health > /dev/null; then", shell=True)
    print("Starting GUI selector server...")
    os.chdir("../../layer/themes/gui-selector/user-stories/023-gui-selector-server")
    subprocess.run("NODE_ENV=release npm start &", shell=True)
    time.sleep(5)
    os.chdir("-")
    # Use GUI selector to choose a template
    print("1. Opening GUI selector...")
    print("   Visit: http://localhost:3456")
    print("")
    print("2. Login with: admin / admin123")
    print("")
    print("3. Create new app: 'Mate Dealer Demo'")
    print("")
    print("4. Select a template from the 4 options:")
    print("   - Modern (recommended for marketplace)")
    print("   - Professional (for business focus)")
    print("   - Creative (for unique branding)")
    print("   - Accessible (for wider audience)")
    print("")
    print("5. The selected template will be applied to the Mate Dealer app")
    print("")
    print("Press Enter when you've selected a template...")
    subprocess.run("read", shell=True)
    print("Template selection complete!")
    print("The Mate Dealer demo now uses the selected GUI template.")
    subprocess.run("EOF", shell=True)
    subprocess.run("chmod +x integrate-gui-selector.sh", shell=True)
    # Step 8: Create README
    print("Step 8: Creating README...")
    subprocess.run("cat > README.md << 'EOF'", shell=True)
    # Mate Dealer Demo
    subprocess.run("A demonstration of the Mate Dealer marketplace application integrated with the GUI Selector from AI Dev Portal.", shell=True)
    # # Features
    subprocess.run("- Dual user roles (Dealer/Customer)", shell=True)
    subprocess.run("- Dealer dashboard with business metrics", shell=True)
    subprocess.run("- Customer dashboard with dealer recommendations", shell=True)
    subprocess.run("- GUI template selection via AI Dev Portal", shell=True)
    subprocess.run("- E2E tests with Playwright", shell=True)
    # # Quick Start
    subprocess.run("```bash", shell=True)
    # Install dependencies
    subprocess.run("npm install", shell=True)
    # Start development server
    subprocess.run("npm run dev", shell=True)
    # Run E2E tests
    subprocess.run("npm run test:e2e", shell=True)
    # Integrate with GUI selector
    subprocess.run("./integrate-gui-selector.sh", shell=True)
    subprocess.run("```", shell=True)
    # # Ports
    subprocess.run("- Frontend Dev Server: http://localhost:3310", shell=True)
    subprocess.run("- Backend API Server: http://localhost:3311", shell=True)
    subprocess.run("- GUI Selector: http://localhost:3456", shell=True)
    # # Testing
    subprocess.run("The demo includes E2E tests that simulate:", shell=True)
    subprocess.run("- User login (dealer and customer)", shell=True)
    subprocess.run("- Navigation between dashboards", shell=True)
    subprocess.run("- Viewing dealer recommendations", shell=True)
    subprocess.run("- Checking business metrics", shell=True)
    # # GUI Integration
    subprocess.run("This demo integrates with the AI Dev Portal's GUI Selector to allow dynamic template selection. You can choose from 4 different design templates to style the application.", shell=True)
    subprocess.run("EOF", shell=True)
    print("")
    print("=== Mate Dealer Demo Setup Complete ===")
    print("")
    print("Next steps:")
    print("1. cd $DEMO_DIR")
    print("2. npm install")
    print("3. npm run dev (starts frontend)")
    print("4. npm run server:dev (starts backend)")
    print("5. npm run test:e2e (run E2E tests)")
    print("")
    print("To integrate with GUI selector:")
    print("  ./integrate-gui-selector.sh")
    print("")
    print("Access the app at: http://localhost:3310")

if __name__ == "__main__":
    main()