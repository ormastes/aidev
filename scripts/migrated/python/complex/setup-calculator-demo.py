#!/usr/bin/env python3
"""
Migrated from: setup-calculator-demo.sh
Auto-generated Python - 2025-08-16T04:57:27.653Z
"""

import os
import sys
import subprocess
import shutil
import glob
from pathlib import Path

def main():
    # GUI Calculator Demo Setup Script
    # This script sets up a GUI calculator demo with AI Dev Portal theme integration
    subprocess.run("set -e", shell=True)
    subprocess.run("SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"", shell=True)
    subprocess.run("PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"", shell=True)
    subprocess.run("DEMO_NAME="gui-calculator"", shell=True)
    subprocess.run("DEMO_DIR="$PROJECT_ROOT/demo/$DEMO_NAME"", shell=True)
    print("=== GUI Calculator Demo Setup ===")
    print("Setting up GUI calculator demo with AI Dev Portal integration...")
    # Step 1: Create demo using the existing demo.py script
    print("Step 1: Creating demo project structure...")
    os.chdir(""$SCRIPT_DIR/setup"")
    subprocess.run("python3 demo.py "$DEMO_NAME" --language typescript", shell=True)
    # Step 2: Navigate to demo directory
    os.chdir(""$DEMO_DIR"")
    # Step 3: Update package.json with GUI dependencies
    print("Step 3: Adding GUI dependencies...")
    subprocess.run("npm install --save react react-dom @types/react @types/react-dom", shell=True)
    subprocess.run("npm install --save-dev webpack webpack-cli webpack-dev-server html-webpack-plugin css-loader style-loader ts-loader", shell=True)
    # Step 4: Create webpack configuration
    print("Step 4: Creating webpack configuration...")
    subprocess.run("cat > webpack.config.js << 'EOF'", shell=True)
    subprocess.run("const path = require('path');", shell=True)
    subprocess.run("const HtmlWebpackPlugin = require('html-webpack-plugin');", shell=True)
    subprocess.run("module.exports = {", shell=True)
    subprocess.run("mode: process.env.NODE_ENV || 'development',", shell=True)
    subprocess.run("entry: './src/client/index.tsx',", shell=True)
    subprocess.run("output: {", shell=True)
    subprocess.run("path: path.resolve(__dirname, 'dist/public'),", shell=True)
    subprocess.run("filename: 'bundle.js',", shell=True)
    subprocess.run("publicPath: '/'", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("resolve: {", shell=True)
    subprocess.run("extensions: ['.ts', '.tsx', '.js', '.jsx']", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("module: {", shell=True)
    subprocess.run("rules: [", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run("test: /\.tsx?$/,", shell=True)
    subprocess.run("use: 'ts-loader',", shell=True)
    subprocess.run("exclude: /node_modules/", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run("test: /\.css$/,", shell=True)
    subprocess.run("use: ['style-loader', 'css-loader']", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("]", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run("plugins: [", shell=True)
    subprocess.run("new HtmlWebpackPlugin({", shell=True)
    subprocess.run("template: './src/client/index.html',", shell=True)
    subprocess.run("title: 'GUI Calculator - AI Dev Portal'", shell=True)
    subprocess.run("})", shell=True)
    subprocess.run("],", shell=True)
    subprocess.run("devServer: {", shell=True)
    subprocess.run("port: 3310,", shell=True)
    subprocess.run("hot: true,", shell=True)
    subprocess.run("historyApiFallback: true,", shell=True)
    subprocess.run("proxy: {", shell=True)
    subprocess.run("'/api': 'http://localhost:3311'", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("EOF", shell=True)
    # Step 5: Create client directory structure
    print("Step 5: Creating client application...")
    Path("src/client/components src/client/styles").mkdir(parents=True, exist_ok=True)
    # Step 6: Create main React component
    subprocess.run("cat > src/client/components/Calculator.tsx << 'EOF'", shell=True)
    subprocess.run("import React, { useState } from 'react';", shell=True)
    subprocess.run("import '../styles/calculator.css';", shell=True)
    os.environ["const Calculator: React.FC "] = " () => {"
    subprocess.run("const [display, setDisplay] = useState('0');", shell=True)
    subprocess.run("const [previousValue, setPreviousValue] = useState<number | null>(null);", shell=True)
    subprocess.run("const [operation, setOperation] = useState<string | null>(null);", shell=True)
    subprocess.run("const [waitingForNewValue, setWaitingForNewValue] = useState(false);", shell=True)
    subprocess.run("const inputNumber = (num: string) => {", shell=True)
    subprocess.run("if (waitingForNewValue) {", shell=True)
    subprocess.run("setDisplay(num);", shell=True)
    subprocess.run("setWaitingForNewValue(false);", shell=True)
    subprocess.run("} else {", shell=True)
    subprocess.run("setDisplay(display === '0' ? num : display + num);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("const inputOperation = (nextOperation: string) => {", shell=True)
    subprocess.run("const inputValue = parseFloat(display);", shell=True)
    subprocess.run("if (previousValue === null) {", shell=True)
    subprocess.run("setPreviousValue(inputValue);", shell=True)
    subprocess.run("} else if (operation) {", shell=True)
    subprocess.run("const currentValue = previousValue || 0;", shell=True)
    subprocess.run("const newValue = calculate(currentValue, inputValue, operation);", shell=True)
    subprocess.run("setDisplay(String(newValue));", shell=True)
    subprocess.run("setPreviousValue(newValue);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("setWaitingForNewValue(true);", shell=True)
    subprocess.run("setOperation(nextOperation);", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("const calculate = (firstValue: number, secondValue: number, operation: string) => {", shell=True)
    subprocess.run("switch (operation) {", shell=True)
    subprocess.run("case '+': return firstValue + secondValue;", shell=True)
    subprocess.run("case '-': return firstValue - secondValue;", shell=True)
    subprocess.run("case '*': return firstValue * secondValue;", shell=True)
    subprocess.run("case '/': return firstValue / secondValue;", shell=True)
    subprocess.run("case '=': return secondValue;", shell=True)
    subprocess.run("default: return secondValue;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("const performCalculation = () => {", shell=True)
    subprocess.run("const inputValue = parseFloat(display);", shell=True)
    subprocess.run("if (previousValue !== null && operation) {", shell=True)
    subprocess.run("const newValue = calculate(previousValue, inputValue, operation);", shell=True)
    subprocess.run("setDisplay(String(newValue));", shell=True)
    subprocess.run("setPreviousValue(null);", shell=True)
    subprocess.run("setOperation(null);", shell=True)
    subprocess.run("setWaitingForNewValue(true);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("const clear = () => {", shell=True)
    subprocess.run("setDisplay('0');", shell=True)
    subprocess.run("setPreviousValue(null);", shell=True)
    subprocess.run("setOperation(null);", shell=True)
    subprocess.run("setWaitingForNewValue(false);", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("const buttons = [", shell=True)
    subprocess.run("['C', '+/-', '%', '÷'],", shell=True)
    subprocess.run("['7', '8', '9', '×'],", shell=True)
    subprocess.run("['4', '5', '6', '-'],", shell=True)
    subprocess.run("['1', '2', '3', '+'],", shell=True)
    subprocess.run("['0', '.', '=']", shell=True)
    subprocess.run("];", shell=True)
    subprocess.run("const handleButtonClick = (btn: string) => {", shell=True)
    subprocess.run("if (btn === 'C') {", shell=True)
    subprocess.run("clear();", shell=True)
    subprocess.run("} else if (btn === '=') {", shell=True)
    subprocess.run("performCalculation();", shell=True)
    subprocess.run("} else if (['+', '-', '×', '÷'].includes(btn)) {", shell=True)
    subprocess.run("const op = btn === '×' ? '*' : btn === '÷' ? '/' : btn;", shell=True)
    subprocess.run("inputOperation(op);", shell=True)
    subprocess.run("} else if (btn === '.') {", shell=True)
    subprocess.run("if (!display.includes('.')) {", shell=True)
    subprocess.run("setDisplay(display + '.');", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("} else if (btn === '+/-') {", shell=True)
    subprocess.run("setDisplay(String(parseFloat(display) * -1));", shell=True)
    subprocess.run("} else if (btn === '%') {", shell=True)
    subprocess.run("setDisplay(String(parseFloat(display) / 100));", shell=True)
    subprocess.run("} else {", shell=True)
    subprocess.run("inputNumber(btn);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("return (", shell=True)
    subprocess.run("<div className="calculator">", shell=True)
    subprocess.run("<div className="display">{display}</div>", shell=True)
    subprocess.run("<div className="buttons">", shell=True)
    subprocess.run("{buttons.map((row, i) => (", shell=True)
    subprocess.run("<div key={i} className="button-row">", shell=True)
    subprocess.run("{row.map((btn) => (", shell=True)
    subprocess.run("<button", shell=True)
    subprocess.run("key={btn}", shell=True)
    subprocess.run("className={`button ${btn === '0' ? 'button-wide' : ''} ${", shell=True)
    subprocess.run("['+', '-', '×', '÷', '='].includes(btn) ? 'button-operator' : ''", shell=True)
    subprocess.run("}`}", shell=True)
    subprocess.run("onClick={() => handleButtonClick(btn)}", shell=True)
    subprocess.run(">", shell=True)
    subprocess.run("{btn}", shell=True)
    subprocess.run("</button>", shell=True)
    subprocess.run("))}", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run("))}", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("EOF", shell=True)
    # Step 7: Create App component
    subprocess.run("cat > src/client/App.tsx << 'EOF'", shell=True)
    subprocess.run("import React from 'react';", shell=True)
    subprocess.run("import { Calculator } from './components/Calculator';", shell=True)
    subprocess.run("import './styles/aidev-theme.css';", shell=True)
    subprocess.run("import './styles/app.css';", shell=True)
    os.environ["const App: React.FC "] = " () => {"
    subprocess.run("return (", shell=True)
    subprocess.run("<div className="app-container">", shell=True)
    subprocess.run("<header className="app-header">", shell=True)
    subprocess.run("<h1>GUI Calculator</h1>", shell=True)
    subprocess.run("<p className="subtitle">AI Dev Portal Demo</p>", shell=True)
    subprocess.run("</header>", shell=True)
    subprocess.run("<main className="app-main">", shell=True)
    subprocess.run("<Calculator />", shell=True)
    subprocess.run("</main>", shell=True)
    subprocess.run("<footer className="app-footer">", shell=True)
    subprocess.run("<p>Built with AI Dev Portal Theme</p>", shell=True)
    subprocess.run("</footer>", shell=True)
    subprocess.run("</div>", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("EOF", shell=True)
    # Step 8: Create entry point
    subprocess.run("cat > src/client/index.tsx << 'EOF'", shell=True)
    subprocess.run("import React from 'react';", shell=True)
    subprocess.run("import ReactDOM from 'react-dom/client';", shell=True)
    subprocess.run("import { App } from './App';", shell=True)
    subprocess.run("const root = ReactDOM.createRoot(", shell=True)
    subprocess.run("document.getElementById('root') as HTMLElement", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("root.render(", shell=True)
    subprocess.run("<React.StrictMode>", shell=True)
    subprocess.run("<App />", shell=True)
    subprocess.run("</React.StrictMode>", shell=True)
    subprocess.run(");", shell=True)
    subprocess.run("EOF", shell=True)
    # Step 9: Create HTML template
    subprocess.run("cat > src/client/index.html << 'EOF'", shell=True)
    subprocess.run("<!DOCTYPE html>", shell=True)
    subprocess.run("<html lang="en">", shell=True)
    subprocess.run("<head>", shell=True)
    subprocess.run("<meta charset="UTF-8">", shell=True)
    subprocess.run("<meta name="viewport" content="width=device-width, initial-scale=1.0">", shell=True)
    subprocess.run("<title>GUI Calculator - AI Dev Portal</title>", shell=True)
    subprocess.run("</head>", shell=True)
    subprocess.run("<body>", shell=True)
    subprocess.run("<div id="root"></div>", shell=True)
    subprocess.run("</body>", shell=True)
    subprocess.run("</html>", shell=True)
    subprocess.run("EOF", shell=True)
    # Step 10: Create AI Dev Portal theme CSS
    subprocess.run("cat > src/client/styles/aidev-theme.css << 'EOF'", shell=True)
    subprocess.run(":root {", shell=True)
    subprocess.run("--primary-color: #2563eb;", shell=True)
    subprocess.run("--primary-hover: #1d4ed8;", shell=True)
    subprocess.run("--secondary-color: #10b981;", shell=True)
    subprocess.run("--accent-color: #8b5cf6;", shell=True)
    subprocess.run("--background-color: #f9fafb;", shell=True)
    subprocess.run("--surface-color: #ffffff;", shell=True)
    subprocess.run("--text-primary: #111827;", shell=True)
    subprocess.run("--text-secondary: #6b7280;", shell=True)
    subprocess.run("--border-color: #e5e7eb;", shell=True)
    subprocess.run("--shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);", shell=True)
    subprocess.run("--shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);", shell=True)
    subprocess.run("--shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);", shell=True)
    subprocess.run("--radius-sm: 0.375rem;", shell=True)
    subprocess.run("--radius-md: 0.5rem;", shell=True)
    subprocess.run("--radius-lg: 0.75rem;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("* {", shell=True)
    subprocess.run("margin: 0;", shell=True)
    subprocess.run("padding: 0;", shell=True)
    subprocess.run("box-sizing: border-box;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("body {", shell=True)
    subprocess.run("font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;", shell=True)
    subprocess.run("background-color: var(--background-color);", shell=True)
    subprocess.run("color: var(--text-primary);", shell=True)
    subprocess.run("line-height: 1.6;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("EOF", shell=True)
    # Step 11: Create app styles
    subprocess.run("cat > src/client/styles/app.css << 'EOF'", shell=True)
    subprocess.run(".app-container {", shell=True)
    subprocess.run("min-height: 100vh;", shell=True)
    subprocess.run("display: flex;", shell=True)
    subprocess.run("flex-direction: column;", shell=True)
    subprocess.run("align-items: center;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run(".app-header {", shell=True)
    subprocess.run("width: 100%;", shell=True)
    subprocess.run("background-color: var(--surface-color);", shell=True)
    subprocess.run("border-bottom: 1px solid var(--border-color);", shell=True)
    subprocess.run("padding: 2rem;", shell=True)
    subprocess.run("text-align: center;", shell=True)
    subprocess.run("box-shadow: var(--shadow-sm);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run(".app-header h1 {", shell=True)
    subprocess.run("color: var(--primary-color);", shell=True)
    subprocess.run("margin-bottom: 0.5rem;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run(".subtitle {", shell=True)
    subprocess.run("color: var(--text-secondary);", shell=True)
    subprocess.run("font-size: 0.875rem;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run(".app-main {", shell=True)
    subprocess.run("flex: 1;", shell=True)
    subprocess.run("padding: 2rem;", shell=True)
    subprocess.run("display: flex;", shell=True)
    subprocess.run("align-items: center;", shell=True)
    subprocess.run("justify-content: center;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run(".app-footer {", shell=True)
    subprocess.run("width: 100%;", shell=True)
    subprocess.run("padding: 1rem;", shell=True)
    subprocess.run("text-align: center;", shell=True)
    subprocess.run("color: var(--text-secondary);", shell=True)
    subprocess.run("font-size: 0.875rem;", shell=True)
    subprocess.run("border-top: 1px solid var(--border-color);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("EOF", shell=True)
    # Step 12: Create calculator styles
    subprocess.run("cat > src/client/styles/calculator.css << 'EOF'", shell=True)
    subprocess.run(".calculator {", shell=True)
    subprocess.run("background-color: var(--surface-color);", shell=True)
    subprocess.run("border-radius: var(--radius-lg);", shell=True)
    subprocess.run("box-shadow: var(--shadow-lg);", shell=True)
    subprocess.run("padding: 1.5rem;", shell=True)
    subprocess.run("max-width: 320px;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run(".display {", shell=True)
    subprocess.run("background-color: var(--background-color);", shell=True)
    subprocess.run("border: 1px solid var(--border-color);", shell=True)
    subprocess.run("border-radius: var(--radius-md);", shell=True)
    subprocess.run("padding: 1rem;", shell=True)
    subprocess.run("text-align: right;", shell=True)
    subprocess.run("font-size: 2rem;", shell=True)
    subprocess.run("font-weight: 500;", shell=True)
    subprocess.run("margin-bottom: 1rem;", shell=True)
    subprocess.run("min-height: 60px;", shell=True)
    subprocess.run("display: flex;", shell=True)
    subprocess.run("align-items: center;", shell=True)
    subprocess.run("justify-content: flex-end;", shell=True)
    subprocess.run("overflow: hidden;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run(".buttons {", shell=True)
    subprocess.run("display: flex;", shell=True)
    subprocess.run("flex-direction: column;", shell=True)
    subprocess.run("gap: 0.5rem;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run(".button-row {", shell=True)
    subprocess.run("display: flex;", shell=True)
    subprocess.run("gap: 0.5rem;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run(".button {", shell=True)
    subprocess.run("flex: 1;", shell=True)
    subprocess.run("padding: 1.25rem;", shell=True)
    subprocess.run("font-size: 1.25rem;", shell=True)
    subprocess.run("font-weight: 500;", shell=True)
    subprocess.run("border: none;", shell=True)
    subprocess.run("border-radius: var(--radius-md);", shell=True)
    subprocess.run("background-color: var(--background-color);", shell=True)
    subprocess.run("color: var(--text-primary);", shell=True)
    subprocess.run("cursor: pointer;", shell=True)
    subprocess.run("transition: all 0.2s;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run(".button:hover {", shell=True)
    subprocess.run("background-color: var(--border-color);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run(".button:active {", shell=True)
    subprocess.run("transform: scale(0.95);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run(".button-wide {", shell=True)
    subprocess.run("flex: 2.13;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run(".button-operator {", shell=True)
    subprocess.run("background-color: var(--primary-color);", shell=True)
    subprocess.run("color: white;", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run(".button-operator:hover {", shell=True)
    subprocess.run("background-color: var(--primary-hover);", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("EOF", shell=True)
    # Step 13: Update tsconfig for JSX
    print("Step 13: Updating TypeScript configuration...")
    subprocess.run("cat > tsconfig.json << 'EOF'", shell=True)
    subprocess.run("{", shell=True)
    subprocess.run(""compilerOptions": {", shell=True)
    subprocess.run(""target": "ES2020",", shell=True)
    subprocess.run(""module": "commonjs",", shell=True)
    subprocess.run(""lib": ["ES2020", "DOM"],", shell=True)
    subprocess.run(""jsx": "react",", shell=True)
    subprocess.run(""outDir": "./dist",", shell=True)
    subprocess.run(""strict": true,", shell=True)
    subprocess.run(""esModuleInterop": true,", shell=True)
    subprocess.run(""skipLibCheck": true,", shell=True)
    subprocess.run(""forceConsistentCasingInFileNames": true,", shell=True)
    subprocess.run(""resolveJsonModule": true,", shell=True)
    subprocess.run(""moduleResolution": "node"", shell=True)
    subprocess.run("},", shell=True)
    subprocess.run(""include": ["src/**/*"],", shell=True)
    subprocess.run(""exclude": ["node_modules", "dist"]", shell=True)
    subprocess.run("}", shell=True)
    subprocess.run("EOF", shell=True)
    # Step 14: Update package.json scripts
    print("Step 14: Updating package.json scripts...")
    subprocess.run("node -e "", shell=True)
    subprocess.run("const fs = require('fs');", shell=True)
    subprocess.run("const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));", shell=True)
    subprocess.run("pkg.scripts = {", shell=True)
    subprocess.run("...pkg.scripts,", shell=True)
    subprocess.run("'dev': 'webpack serve --mode development',", shell=True)
    subprocess.run("'build': 'webpack --mode production',", shell=True)
    subprocess.run("'start': 'npm run build && node dist/server.js',", shell=True)
    subprocess.run("'test': 'jest'", shell=True)
    subprocess.run("};", shell=True)
    subprocess.run("fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));", shell=True)
    subprocess.run(""", shell=True)
    # Step 15: Create a simple backend server
    print("Step 15: Creating backend server...")
    subprocess.run("cat > src/server.ts << 'EOF'", shell=True)
    subprocess.run("import express from 'express';", shell=True)
    subprocess.run("import path from 'path';", shell=True)
    subprocess.run("const app = express();", shell=True)
    subprocess.run("const PORT = process.env.PORT || 3311;", shell=True)
    subprocess.run("app.use(express.json());", shell=True)
    subprocess.run("app.use(express.static(path.join(__dirname, 'public')));", shell=True)
    subprocess.run("// API endpoint for calculator history (optional)", shell=True)
    subprocess.run("app.get('/api/health', (req, res) => {", shell=True)
    subprocess.run("res.json({ status: 'healthy', service: 'gui-calculator' });", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("app.get('*', (req, res) => {", shell=True)
    subprocess.run("res.sendFile(path.join(__dirname, 'public', 'index.html'));", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("app.listen(PORT, () => {", shell=True)
    subprocess.run("console.log(`GUI Calculator server running on port ${PORT}`);", shell=True)
    subprocess.run("});", shell=True)
    subprocess.run("EOF", shell=True)
    # Step 16: Install dependencies
    print("Step 16: Installing all dependencies...")
    subprocess.run("npm install", shell=True)
    # Step 17: Create README
    print("Step 17: Creating README...")
    subprocess.run("cat > README.md << 'EOF'", shell=True)
    # GUI Calculator Demo
    subprocess.run("A modern calculator application built with React and TypeScript, featuring the AI Dev Portal theme.", shell=True)
    # # Features
    subprocess.run("- Modern, responsive UI with AI Dev Portal theme", shell=True)
    subprocess.run("- Basic arithmetic operations (+, -, ×, ÷)", shell=True)
    subprocess.run("- Clear function", shell=True)
    subprocess.run("- Decimal point support", shell=True)
    subprocess.run("- Percentage calculation", shell=True)
    subprocess.run("- Sign toggle (+/-)", shell=True)
    # # Development
    subprocess.run("```bash", shell=True)
    # Install dependencies
    subprocess.run("npm install", shell=True)
    # Run development server
    subprocess.run("npm run dev", shell=True)
    # Build for production
    subprocess.run("npm run build", shell=True)
    # Start production server
    subprocess.run("npm start", shell=True)
    subprocess.run("```", shell=True)
    # # Ports
    subprocess.run("- Development: http://localhost:3310 (webpack-dev-server)", shell=True)
    subprocess.run("- Production: http://localhost:3311 (Express server)", shell=True)
    # # Integration with AI Dev Portal
    subprocess.run("This calculator demo uses the AI Dev Portal theme and can be integrated with:", shell=True)
    subprocess.run("- GUI Selector Server (port 3402)", shell=True)
    subprocess.run("- Story Reporter (port 3401)", shell=True)
    subprocess.run("- AI Dev Portal main app (port 3456)", shell=True)
    # # Testing
    subprocess.run("```bash", shell=True)
    subprocess.run("npm test", shell=True)
    subprocess.run("```", shell=True)
    subprocess.run("EOF", shell=True)
    print("=== Setup Complete ===")
    print("")
    print("GUI Calculator demo has been created at: $DEMO_DIR")
    print("")
    print("To start the development server:")
    print("  cd $DEMO_DIR")
    print("  npm run dev")
    print("")
    print("The calculator will be available at:")
    print("  - Development: http://localhost:3310")
    print("  - Production: http://localhost:3311")
    print("")
    print("To integrate with GUI Selector:")
    print("  1. Start the GUI Selector Server (port 3402)")
    print("  2. Navigate to the template selection page")
    print("  3. Select a template for your calculator UI")

if __name__ == "__main__":
    main()