import { path } from '../../layer/themes/infra_external-log-lib/src';
import * as fs from 'fs-extra';
import chalk from 'chalk';
import { ThemeSetupOptions, PORT_ALLOCATIONS } from '../types';
import { BaseSetup } from './base-setup';
import { ThemeRootConnector } from './theme-root-connector';

export class ThemeSetup extends BaseSetup {
  private themeName: string;
  private description: string;
  private epicId?: string;

  constructor(options: ThemeSetupOptions) {
    super(options, 'theme');
    this.themeName = options.themeName;
    this.description = options.description || `Agile theme: ${options.themeName}`;
    this.epicId = options.epicId;
  }

  getDeployDir(): string {
    return path.join(this.baseDir, 'scripts', 'setup', 'agile', 'themes', this.appName);
  }

  getDbPassword(): string {
    return 'theme_password_2024';
  }

  getEnvConfig(): string {
    const port = this.getPortAllocation();
    
    return `# Agile Theme Environment Configuration
# Auto-generated by aidev-setup
# Port Policy: Agile (Epic/Theme/Story) uses 3200-3299

# Database Configuration - SQLite for Agile
DB_TYPE=sqlite
SQLITE_PATH=./data/${this.appName}_theme.db

# Server Configuration
PORT=${port}
JWT_SECRET=theme-secret-key-${this.appName}

# Agile Configuration
AGILE_TYPE=theme
THEME_ID=${this.appName}
THEME_NAME="${this.themeName}"
${this.epicId ? `PARENT_EPIC=${this.epicId}` : '# No parent epic'}

# Environment
NODE_ENV=agile_theme

# Features
MODE=${this.mode.toUpperCase()}
`;
  }

  protected getPortAllocation(): number {
    // Use agile port range for themes
    const allocation = PORT_ALLOCATIONS['agile'];
    return allocation.main + 10; // Offset for themes
  }

  async createDeploymentConfig(): Promise<boolean> {
    try {
      // Create theme documentation
      await this.createThemeDocumentation();
      
      // Create theme structure
      await this.createThemeStructure();
      
      // Create package.json for theme
      await this.createThemePackageJson();
      
      // Create story templates
      await this.createStoryTemplates();
      
      // Connect theme to root project for unified testing and coverage
      await this.connectToRootProject();

      return true;
    } catch (error) {
      console.error(chalk.red(`Failed to create theme deployment config: ${error}`));
      return false;
    }
  }

  private async createThemeDocumentation(): Promise<void> {
    const themeDoc = `# Theme: ${this.themeName}

## Overview
${this.description}

## Theme Details
- **ID**: ${this.appName}
- **Name**: ${this.themeName}
${this.epicId ? `- **Parent Epic**: ${this.epicId}` : '- **Parent Epic**: None (standalone theme)'}
- **Created**: ${new Date().toISOString()}

## Theme Objectives
<!-- Define the main objectives of this theme -->
1. Objective 1
2. Objective 2
3. Objective 3

## User Stories
<!-- User stories under this theme will be listed here -->

## Success Criteria
- [ ] All user stories implemented
- [ ] Theme objectives met
- [ ] Quality standards achieved
- [ ] User acceptance completed

## Related Themes
<!-- List any related or dependent themes -->

## Design Decisions
<!-- Document key design decisions for this theme -->

## Technical Considerations
<!-- Note any technical constraints or considerations -->

## Progress
- [ ] Theme definition complete
- [ ] User stories created
- [ ] Development started
- [ ] Testing in progress
- [ ] Documentation updated
- [ ] Theme completed

---
*This theme is managed in ${this.mode.toUpperCase()} mode*
`;

    await fs.writeFile(path.join(this.deployDir, 'THEME.md'), themeDoc);
  }

  private async createThemeStructure(): Promise<void> {
    const dirs = [
      'stories',
      'designs',
      "documentation",
      'tests',
      "resources"
    ];

    for (const dir of dirs) {
      await fs.ensureDir(path.join(this.deployDir, dir));
    }

    // Create theme metadata
    const themeData = {
      theme: {
        id: this.appName,
        name: this.themeName,
        description: this.description,
        epicId: this.epicId,
        stories: [],
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        status: "planning"
      }
    };

    await fs.writeJson(
      path.join(this.deployDir, 'theme.json'),
      themeData,
      { spaces: 2 }
    );
  }

  private async createThemePackageJson(): Promise<void> {
    const packageJson = {
      name: `@agile/theme-${this.appName}`,
      version: '1.0.0',
      description: this.themeName,
      type: 'theme',
      scripts: {
        'status': 'node scripts/theme-status.js',
        'add:story': 'node scripts/add-story.js',
        'list:stories': 'node scripts/list-stories.js',
        'report': 'node scripts/generate-theme-report.js'
      },
      theme: {
        id: this.appName,
        name: this.themeName,
        epicId: this.epicId
      },
      devDependencies: {
        '@types/node': '^20.0.0',
        "typescript": '^5.0.0'
      }
    };

    await fs.writeJson(path.join(this.deployDir, 'package.json'), packageJson, { spaces: 2 });
  }

  private async createStoryTemplates(): Promise<void> {
    // Create story template
    const storyTemplate = `# User Story Template

## Story Title
[Brief descriptive title]

## User Story
As a [type of user]
I want [goal/desire]
So that [benefit/value]

## Acceptance Criteria
- [ ] Given [context], when [action], then [outcome]
- [ ] Given [context], when [action], then [outcome]
- [ ] Given [context], when [action], then [outcome]

## Technical Notes
<!-- Technical implementation details -->

## Design Notes
<!-- UI/UX considerations -->

## Dependencies
<!-- List any dependencies on other stories or systems -->

## Estimation
- Story Points: [1, 2, 3, 5, 8, 13]
- Priority: [High, Medium, Low]

## Tasks
- [ ] Task 1
- [ ] Task 2
- [ ] Task 3

---
*Template for stories under theme: ${this.themeName}*
`;

    await fs.writeFile(
      path.join(this.deployDir, 'stories', 'STORY_TEMPLATE.md'),
      storyTemplate
    );

    // Create theme backlog
    const backlogMd = `# ${this.themeName} - Story Backlog

## Theme Overview
${this.description}

## Story Backlog

### To Do
<!-- Stories not yet started -->

### In Progress
<!-- Stories currently being worked on -->

### In Review
<!-- Stories in review/testing -->

### Done
<!-- Completed stories -->

## Story Map
<!-- Visual or textual representation of story relationships -->

## Theme Metrics
- Total Stories: 0
- Completed: 0
- In Progress: 0
- Remaining: 0

---
*Last updated: ${new Date().toISOString()}*
`;

    await fs.writeFile(path.join(this.deployDir, 'STORY_BACKLOG.md'), backlogMd);
  }

  printSuccessMessage(): void {
    const port = this.getPortAllocation();
    
    console.log(chalk.green('\n' + '='.repeat(50)));
    console.log(chalk.green(`‚úÖ Agile theme setup completed successfully! (${this.mode.toUpperCase()} Mode)`));
    console.log(chalk.green('\nüéØ Theme Details:'));
    console.log(chalk.green(`   Name: ${this.themeName}`));
    console.log(chalk.green(`   ID: ${this.appName}`));
    if (this.epicId) {
      console.log(chalk.green(`   Parent Epic: ${this.epicId}`));
    }
    
    console.log(chalk.green('\nüìç Theme location: ' + this.deployDir));
    console.log(chalk.green(`üåê Port: ${port}`));
    
    if (this.mode === 'vf') {
      console.log(chalk.cyan('\nüîå VF Mode Configuration:'));
      console.log(chalk.cyan('   - Task Queue: TASK_QUEUE.vf.json'));
      console.log(chalk.cyan('   - Theme Data: theme.json'));
      console.log(chalk.cyan('   - MCP Config: config/mcp-agent.json'));
    }
    
    console.log(chalk.yellow('\nüöÄ Next Steps:'));
    console.log(chalk.yellow(`   1. cd ${this.deployDir}`));
    console.log(chalk.yellow('   2. Create user stories: aidev-setup story <name> --theme ' + this.appName));
    console.log(chalk.yellow('   3. Track progress: npm run status'));
    console.log(chalk.yellow('   4. List stories: npm run list:stories'));
    
    console.log(chalk.blue('\nüìä Files Created:'));
    console.log(chalk.blue('   - THEME.md - Theme documentation'));
    console.log(chalk.blue('   - STORY_BACKLOG.md - Story backlog'));
    console.log(chalk.blue('   - theme.json - Theme metadata'));
    console.log(chalk.blue('   - stories/STORY_TEMPLATE.md - Story template'));
  }

  private async connectToRootProject(): Promise<void> {
    const rootPath = path.resolve(this.baseDir);
    
    await ThemeRootConnector.connectThemeToRoot({
      themePath: this.deployDir,
      themeName: this.themeName,
      themeType: this.mode as 'demo' | 'release',
      rootPath: rootPath
    });

    // Also create connected Jest config
    await ThemeRootConnector.createConnectedJestConfig({
      themePath: this.deployDir,
      themeName: this.themeName,
      themeType: this.mode as 'demo' | 'release',
      rootPath: rootPath
    });
  }
}