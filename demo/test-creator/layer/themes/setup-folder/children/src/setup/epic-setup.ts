import { path } from '../../layer/themes/infra_external-log-lib/src';
import * as fs from 'fs-extra';
import chalk from 'chalk';
import { EpicSetupOptions, PORT_ALLOCATIONS } from '../types';
import { BaseSetup } from './base-setup';

export class EpicSetup extends BaseSetup {
  private title: string;
  private description: string;
  private themes: string[];
  private targetRelease?: string;
  private priority: string;
  private storyPoints: number;

  constructor(options: EpicSetupOptions) {
    super(options, 'epic');
    this.title = options.title;
    this.description = options.description;
    this.themes = options.themes || [];
    this.targetRelease = options.targetRelease;
    this.priority = options.priority || 'medium';
    this.storyPoints = options.storyPoints || 0;
  }

  getDeployDir(): string {
    return path.join(this.baseDir, 'scripts', 'setup', 'agile', 'epics', this.appName);
  }

  getDbPassword(): string {
    return 'epic_password_2024';
  }

  getEnvConfig(): string {
    const port = this.getPortAllocation();
    
    return `# Agile Epic Environment Configuration
# Auto-generated by aidev-setup
# Port Policy: Agile (Epic/Theme/Story) uses 3200-3299

# Database Configuration - SQLite for Agile
DB_TYPE=sqlite
SQLITE_PATH=./data/${this.appName}_epic.db

# Server Configuration
PORT=${port}
JWT_SECRET=epic-secret-key-${this.appName}

# Agile Configuration
AGILE_TYPE=epic
EPIC_ID=${this.appName}
EPIC_TITLE="${this.title}"
PRIORITY=${this.priority}
STORY_POINTS=${this.storyPoints}

# Environment
NODE_ENV=agile_epic

# Features
MODE=${this.mode.toUpperCase()}
`;
  }

  protected getPortAllocation(): number {
    // Use agile port range for epics
    const allocation = PORT_ALLOCATIONS['agile'];
    return allocation.main;
  }

  async createDeploymentConfig(): Promise<boolean> {
    try {
      // Create epic documentation
      await this.createEpicDocumentation();
      
      // Create epic structure
      await this.createEpicStructure();
      
      // Create package.json for epic tracking
      await this.createEpicPackageJson();
      
      // Create backlog structure
      await this.createBacklogStructure();

      return true;
    } catch (error) {
      console.error(chalk.red(`Failed to create epic deployment config: ${error}`));
      return false;
    }
  }

  private async createEpicDocumentation(): Promise<void> {
    const epicDoc = `# Epic: ${this.title}

## Overview
${this.description}

## Epic Details
- **ID**: ${this.appName}
- **Priority**: ${this.priority}
- **Story Points**: ${this.storyPoints}
- **Target Release**: ${this.targetRelease || 'TBD'}
- **Created**: ${new Date().toISOString()}

## Themes
${this.themes.length > 0 
  ? this.themes.map(theme => `- ${theme}`).join('\n')
  : '- No themes assigned yet'}

## User Stories
<!-- User stories will be linked here as they are created -->

## Acceptance Criteria
- [ ] All user stories completed
- [ ] Integration testing passed
- [ ] Documentation updated
- [ ] Performance benchmarks met

## Dependencies
<!-- List any dependencies on other epics or external systems -->

## Risks and Mitigation
<!-- Identify potential risks and mitigation strategies -->

## Progress Tracking
- [ ] Planning phase
- [ ] Development phase  
- [ ] Testing phase
- [ ] Documentation phase
- [ ] Release phase

## Notes
<!-- Additional notes and comments -->

---
*This epic is managed in ${this.mode.toUpperCase()} mode*
`;

    await fs.writeFile(path.join(this.deployDir, 'EPIC.md'), epicDoc);
  }

  private async createEpicStructure(): Promise<void> {
    const dirs = [
      'themes',
      'stories',
      "documentation",
      'designs',
      'tests',
      'metrics'
    ];

    for (const dir of dirs) {
      await fs.ensureDir(path.join(this.deployDir, dir));
    }

    // Create index files for tracking
    const indexContent = {
      epic: {
        id: this.appName,
        title: this.title,
        description: this.description,
        priority: this.priority,
        storyPoints: this.storyPoints,
        targetRelease: this.targetRelease,
        themes: this.themes,
        stories: [],
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        status: "planning"
      }
    };

    await fs.writeJson(
      path.join(this.deployDir, 'epic.json'),
      indexContent,
      { spaces: 2 }
    );
  }

  private async createEpicPackageJson(): Promise<void> {
    const packageJson = {
      name: `@agile/epic-${this.appName}`,
      version: '1.0.0',
      description: this.title,
      type: 'epic',
      scripts: {
        'status': 'node scripts/epic-status.js',
        'add:theme': 'node scripts/add-theme.js',
        'add:story': 'node scripts/add-story.js',
        'report': 'node scripts/generate-report.js',
        'sync': 'node scripts/sync-backlog.js'
      },
      epic: {
        id: this.appName,
        title: this.title,
        priority: this.priority,
        storyPoints: this.storyPoints,
        targetRelease: this.targetRelease
      },
      devDependencies: {
        '@types/node': '^20.0.0',
        "typescript": '^5.0.0'
      }
    };

    await fs.writeJson(path.join(this.deployDir, 'package.json'), packageJson, { spaces: 2 });
  }

  private async createBacklogStructure(): Promise<void> {
    // Create backlog template
    const backlogMd = `# ${this.title} - Backlog

## Epic Summary
${this.description}

## Themes Backlog
${this.themes.length > 0 
  ? this.themes.map(theme => `### ${theme}\n- [ ] Define theme scope\n- [ ] Create user stories\n- [ ] Estimate effort\n`).join('\n')
  : '### No themes defined yet\n'}

## User Stories Backlog
<!-- Stories will be added here -->

### To Do
- [ ] Epic planning and scoping
- [ ] Theme breakdown
- [ ] Initial user story creation

### In Progress

### Done

## Sprint Planning
<!-- Sprint planning notes -->

## Retrospectives
<!-- Sprint retrospective notes -->
`;

    await fs.writeFile(path.join(this.deployDir, 'BACKLOG.md'), backlogMd);

    // Create velocity tracking
    const velocityJson = {
      epic: this.appName,
      sprints: [],
      averageVelocity: 0,
      totalPointsCompleted: 0,
      totalPointsRemaining: this.storyPoints
    };

    await fs.writeJson(
      path.join(this.deployDir, 'metrics', 'velocity.json'),
      velocityJson,
      { spaces: 2 }
    );
  }

  printSuccessMessage(): void {
    const port = this.getPortAllocation();
    
    console.log(chalk.green('\n' + '='.repeat(50)));
    console.log(chalk.green(`✅ Epic setup completed successfully! (${this.mode.toUpperCase()} Mode)`));
    console.log(chalk.green('\n📚 Epic Details:'));
    console.log(chalk.green(`   Title: ${this.title}`));
    console.log(chalk.green(`   ID: ${this.appName}`));
    console.log(chalk.green(`   Priority: ${this.priority}`));
    console.log(chalk.green(`   Story Points: ${this.storyPoints}`));
    
    console.log(chalk.green('\n📍 Epic location: ' + this.deployDir));
    console.log(chalk.green(`🌐 Port: ${port}`));
    
    if (this.themes.length > 0) {
      console.log(chalk.cyan('\n🎯 Themes:'));
      this.themes.forEach(theme => {
        console.log(chalk.cyan(`   - ${theme}`));
      });
    }
    
    if (this.mode === 'vf') {
      console.log(chalk.cyan('\n🔌 VF Mode Configuration:'));
      console.log(chalk.cyan('   - Task Queue: TASK_QUEUE.vf.json'));
      console.log(chalk.cyan('   - Epic Data: epic.json'));
      console.log(chalk.cyan('   - MCP Config: config/mcp-agent.json'));
    }
    
    console.log(chalk.yellow('\n🚀 Next Steps:'));
    console.log(chalk.yellow(`   1. cd ${this.deployDir}`));
    console.log(chalk.yellow('   2. Create themes: aidev-setup theme <name> --epic ' + this.appName));
    console.log(chalk.yellow('   3. Create stories: aidev-setup story <name> --epic ' + this.appName));
    console.log(chalk.yellow('   4. Track progress: npm run status'));
    
    console.log(chalk.blue('\n📊 Files Created:'));
    console.log(chalk.blue('   - EPIC.md - Epic documentation'));
    console.log(chalk.blue('   - BACKLOG.md - Backlog tracking'));
    console.log(chalk.blue('   - epic.json - Epic metadata'));
    console.log(chalk.blue('   - metrics/velocity.json - Velocity tracking'));
  }
}