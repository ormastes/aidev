import { path } from '../../../../../../../../layer/themes/infra_external-log-lib/dist';
import * as fs from 'fs-extra';
import chalk from 'chalk';
import { DemoSetupOptions, SetupConfig } from '../types';
import { BaseSetup } from './base-setup';

export class DemoSetup extends BaseSetup {
  private language: string;
  private configFile?: string;
  private setupConfig: SetupConfig = {};

  constructor(options: DemoSetupOptions) {
    super(options, 'demo');
    this.language = options.language;
    this.configFile = options.configFile;
    
    if (this.configFile) {
      this.loadSetupConfig();
    }
  }

  private loadSetupConfig(): void {
    try {
      if (this.configFile) {
        this.setupConfig = fs.readJsonSync(this.configFile);
      }
    } catch (error) {
      console.warn(chalk.yellow(`Warning: Could not load config file: ${this.configFile}`));
    }
  }

  getDeployDir(): string {
    return path.join(this.baseDir, 'scripts', 'setup', 'demo', this.appName);
  }

  getDbPassword(): string {
    return 'demo_password_2024';
  }

  getEnvConfig(): string {
    const port = this.getPortAllocation();
    
    return `# Demo Environment Configuration
# Auto-generated by aidev-setup
# Port Policy: Demo uses 3300-3399

# Database Configuration - SQLite for Demo
DB_TYPE=sqlite
SQLITE_PATH=./data/${this.appName}_demo.db

# Server Configuration
PORT=${port}
JWT_SECRET=demo-secret-key-${this.appName}

# Environment
NODE_ENV=demo

# Features
MODE=${this.mode.toUpperCase()}
`;
  }

  async createDeploymentConfig(): Promise<boolean> {
    try {
      // Create package.json based on language
      if (this.language === 'typescript' || this.language === 'javascript') {
        await this.createNodeProject();
      } else if (this.language === 'python') {
        await this.createPythonProject();
      }

      // Create FEATURE.md
      await this.createFeatureMd();

      // Create README.md
      await this.createReadme();

      // Deploy CLAUDE.md and llm_rules if they exist
      await this.deployClaudeConfig();

      // Create MCP configuration for VF mode
      if (this.mode === 'vf') {
        await this.createMcpConfiguration();
      }

      return true;
    } catch (error) {
      console.error(chalk.red(`Failed to create deployment config: ${error}`));
      return false;
    }
  }

  private async createNodeProject(): Promise<void> {
    const packageJson = {
      name: this.appName,
      version: '1.0.0',
      description: this.setupConfig.description || `${this.appName} demo project`,
      main: this.language === 'typescript' ? 'dist/index.js' : 'src/index.js',
      scripts: {
        start: this.language === 'typescript' ? 'node dist/index.js' : 'node src/index.js',
        dev: this.language === 'typescript' ? 'ts-node src/index.ts' : 'node src/index.js',
        build: this.language === 'typescript' ? 'tsc' : 'echo "No build needed"',
        test: 'jest',
        lint: this.language === 'typescript' ? 'eslint src/**/*.ts' : 'eslint src/**/*.js',
        format: this.language === 'typescript' ? 'prettier --write src/**/*.ts' : 'prettier --write src/**/*.js'
      },
      keywords: this.setupConfig.keywords || [this.appName, 'demo'],
      author: this.setupConfig.author || 'AI Dev Portal',
      license: this.setupConfig.license || 'MIT',
      dependencies: this.setupConfig.dependencies || {},
      devDependencies: {
        jest: '^29.5.0',
        eslint: '^8.0.0',
        prettier: '^3.0.0'
      } as any
    };

    if (this.language === 'typescript') {
      packageJson.devDependencies = {
        ...packageJson.devDependencies,
        '@types/node': '^20.0.0',
        'typescript': '^5.0.0',
        'ts-node': '^10.9.0',
        '@types/jest': '^29.5.0',
        '@typescript-eslint/eslint-plugin': '^6.0.0',
        '@typescript-eslint/parser': '^6.0.0'
      };

      // Create tsconfig.json
      const tsConfig = {
        compilerOptions: {
          target: 'ES2022',
          module: 'commonjs',
          lib: ['ES2022'],
          outDir: './dist',
          rootDir: './src',
          strict: true,
          esModuleInterop: true,
          skipLibCheck: true,
          forceConsistentCasingInFileNames: true,
          resolveJsonModule: true,
          declaration: true,
          declarationMap: true,
          sourceMap: true
        },
        include: ['src/**/*'],
        exclude: ['node_modules', 'dist']
      };

      await fs.writeJson(path.join(this.deployDir, 'tsconfig.json'), tsConfig, { spaces: 2 });
    }

    await fs.writeJson(path.join(this.deployDir, 'package.json'), packageJson, { spaces: 2 });

    // Create .gitignore
    const gitignore = `node_modules/
dist/
*.log
.env
.env.local
.DS_Store
coverage/
*.swp
*.swo
`;
    await fs.writeFile(path.join(this.deployDir, '.gitignore'), gitignore);
  }

  private async createPythonProject(): Promise<void> {
    const setupPy = `from setuptools import setup, find_packages

setup(
    name="${this.appName}",
    version="1.0.0",
    description="${this.setupConfig.description || `${this.appName} demo project`}",
    author="${this.setupConfig.author || 'AI Dev Portal'}",
    packages=find_packages(),
    python_requires=">=3.8",
    install_requires=${JSON.stringify(this.setupConfig.dependencies || [])},
)`;

    await fs.writeFile(path.join(this.deployDir, 'setup.py'), setupPy);

    const deps = this.setupConfig.dependencies || [];
    const requirements = Array.isArray(deps) ? deps.join('\n') : '';
    await fs.writeFile(path.join(this.deployDir, 'requirements.txt'), requirements);

    // Create src directory
    const srcDir = path.join(this.deployDir, this.appName.replace(/-/g, '_'));
    await fs.ensureDir(srcDir);
    await fs.writeFile(path.join(srcDir, '__init__.py'), `"""${this.appName} package."""\n`);

    // Create .gitignore
    const gitignore = `__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
dist/
*.egg-info/
.env
.venv
venv/
.pytest_cache/
.coverage
htmlcov/
.mypy_cache/
`;
    await fs.writeFile(path.join(this.deployDir, '.gitignore'), gitignore);
  }

  private async createFeatureMd(): Promise<void> {
    const featureContent = `# ${this.appName.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())} - Feature Backlog

This file contains the feature backlog for ${this.appName}.

## User Stories

### Story 1: Basic Functionality
As a user
I want to use the ${this.appName} application
So that I can [benefit]

**Acceptance Criteria:**
- [ ] Application starts successfully
- [ ] Basic functionality works as expected
- [ ] Error handling is in place

### Story 2: [Next Feature]
As a [user type]
I want [feature]
So that [benefit]

**Acceptance Criteria:**
- [ ] Criteria 1
- [ ] Criteria 2

---

*Note: Update this file with actual user stories for your application.*
`;
    await fs.writeFile(path.join(this.deployDir, 'FEATURE.md'), featureContent);
  }

  private async createReadme(): Promise<void> {
    const title = this.appName.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
    
    let installCmd, runCmd, devCmd, testCmd;
    
    if (this.language === 'typescript' || this.language === 'javascript') {
      installCmd = 'npm install';
      runCmd = 'npm start';
      devCmd = 'npm run dev';
      testCmd = 'npm test';
    } else {
      installCmd = 'pip install -r requirements.txt';
      runCmd = `python -m ${this.appName.replace(/-/g, '_')}`;
      devCmd = runCmd;
      testCmd = 'pytest';
    }

    const readme = `# ${title}

${this.setupConfig.description || `${title} demo project`}

## Setup

1. Install dependencies:
   \`\`\`bash
   ${installCmd}
   \`\`\`

2. Run the application:
   \`\`\`bash
   ${runCmd}
   \`\`\`

## Development

Run in development mode:
\`\`\`bash
${devCmd}
\`\`\`

Run tests:
\`\`\`bash
${testCmd}
\`\`\`

## Project Structure

- \`${this.language === 'python' ? this.appName.replace(/-/g, '_') + '/' : 'src/'}\` - Source code
- \`FEATURE.md\` - Feature backlog
- \`TASK_QUEUE.${this.mode === 'vf' ? 'vf.json' : 'md'}\` - Task queue

## Configuration

${this.mode === 'vf' 
  ? 'This project uses VF mode with MCP integration. See config/mcp-agent.json for MCP configuration.'
  : 'This project uses traditional MD mode with TASK_QUEUE.md.'}

## License

${this.setupConfig.license || 'MIT'}
`;
    
    await fs.writeFile(path.join(this.deployDir, 'README.md'), readme);
  }

  private async deployClaudeConfig(): Promise<void> {
    const projectRoot = path.join(__dirname, '../../../../..');
    
    // Copy CLAUDE.md if it exists
    const claudeMdPath = path.join(projectRoot, 'CLAUDE.md');
    if (await fs.pathExists(claudeMdPath)) {
      await fs.copy(claudeMdPath, path.join(this.deployDir, 'CLAUDE.md'));
      console.log(chalk.green('   ✓ Deployed CLAUDE.md'));
    }
    
    // Copy llm_rules directory if it exists
    const llmRulesPath = path.join(projectRoot, 'llm_rules');
    if (await fs.pathExists(llmRulesPath)) {
      await fs.copy(llmRulesPath, path.join(this.deployDir, 'llm_rules'));
      console.log(chalk.green('   ✓ Deployed llm_rules/'));
    }
  }

  private async createMcpConfiguration(): Promise<void> {
    const mcpConfigDir = path.join(this.deployDir, 'config', 'mcp');
    await fs.ensureDir(mcpConfigDir);
    
    // Create MCP agent configuration
    const mcpAgentConfig = {
      agents: {
        architect: {
          description: "System architecture and design",
          capabilities: ["design", "architecture", "patterns"],
          tools: ["filesystem", "search", "edit"]
        },
        developer: {
          description: "Implementation and coding",
          capabilities: ["coding", "testing", "debugging"],
          tools: ["filesystem", "edit", "bash", "git"]
        },
        tester: {
          description: "Testing and quality assurance",
          capabilities: ["testing", "coverage", "e2e"],
          tools: ["filesystem", "bash", "playwright"]
        },
        gui: {
          description: "GUI design and implementation",
          capabilities: ["ui", "ux", "design"],
          tools: ["filesystem", "edit", "preview"]
        }
      }
    };
    
    await fs.writeJson(path.join(mcpConfigDir, 'mcp-agent.json'), mcpAgentConfig, { spaces: 2 });
    
    // Create MCP server setup script
    const setupShPath = path.join(this.deployDir, 'setup-mcp.sh');
    const setupScript = `#!/usr/bin/env bash
# Setup MCP server for ${this.appName}

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "\${BASH_SOURCE[0]}")" && pwd)"
AIDEV_PATH="$SCRIPT_DIR"

echo "Setting up MCP server for Claude Desktop..."

# Detect OS and Claude config directory
if [[ "$OSTYPE" == "darwin"* ]]; then
    CLAUDE_CONFIG_DIR="$HOME/Library/Application Support/Claude"
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    CLAUDE_CONFIG_DIR="$HOME/.config/Claude"
else
    echo "Unsupported OS: $OSTYPE"
    exit 1
fi

mkdir -p "$CLAUDE_CONFIG_DIR"

# Backup existing config
if [[ -f "$CLAUDE_CONFIG_DIR/claude_desktop_config.json" ]]; then
    cp "$CLAUDE_CONFIG_DIR/claude_desktop_config.json" "$CLAUDE_CONFIG_DIR/claude_desktop_config.json.backup"
fi

# Create MCP configuration
cat > "$CLAUDE_CONFIG_DIR/claude_desktop_config.json" << EOL
{
  "mcpServers": {
    "${this.appName}": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-filesystem", "$AIDEV_PATH"]
    }
  }
}
EOL

echo "✅ MCP configuration installed"
echo "✅ Restart Claude Desktop to use MCP with ${this.appName}"
`;
    
    await fs.writeFile(setupShPath, setupScript);
    await fs.chmod(setupShPath, 0o755);
    
    console.log(chalk.green('   ✓ Created MCP configuration'));
  }

  printSuccessMessage(): void {
    const port = this.getPortAllocation();
    
    console.log(chalk.green('\n' + '='.repeat(50)));
    console.log(chalk.green(`✅ Demo setup completed successfully! (${this.mode.toUpperCase()} Mode)`));
    console.log(chalk.green('\n📍 Demo location: ' + this.deployDir));
    console.log(chalk.green(`🌐 Port: ${port}`));
    console.log(chalk.green(`💻 Language: ${this.language}`));
    
    if (this.mode === 'vf') {
      console.log(chalk.cyan('\n🔌 VF Mode Configuration:'));
      console.log(chalk.cyan('   - Task Queue: TASK_QUEUE.vf.json'));
      console.log(chalk.cyan('   - MCP Config: config/mcp/mcp-agent.json'));
      console.log(chalk.cyan('   - MCP Setup: ./setup-mcp.sh'));
      console.log(chalk.cyan('   - Use MCP commands for task operations'));
    }
    
    console.log(chalk.yellow('\n🚀 To start the demo:'));
    console.log(chalk.yellow(`   cd ${this.deployDir}`));
    if (this.mode === 'vf') {
      console.log(chalk.yellow('   ./setup-mcp.sh  # Setup MCP for Claude Desktop'));
    }
    console.log(chalk.yellow(`   ${this.language === 'python' ? 'pip install -r requirements.txt' : 'npm install'}`));
    console.log(chalk.yellow(`   ${this.language === 'python' ? `python -m ${this.appName.replace(/-/g, '_')}` : 'npm run dev'}`));
    
    console.log(chalk.blue(`\n📱 Access at: http://localhost:${port}`));
  }
}