import { path } from '../../../../../../../../layer/themes/infra_external-log-lib/dist';
import * as fs from 'fs-extra';
import chalk from 'chalk';
import { StorySetupOptions, PORT_ALLOCATIONS } from '../types';
import { BaseSetup } from './base-setup';

export class StorySetup extends BaseSetup {
  private title: string;
  private description: string;
  private epicId?: string;
  private themeId?: string;
  private acceptanceCriteria: string[];
  private tasks: string[];
  private priority: string;
  private storyPoints: number;

  constructor(options: StorySetupOptions) {
    super(options, 'story');
    this.title = options.title;
    this.description = options.description;
    this.epicId = options.epicId;
    this.themeId = options.themeId;
    this.acceptanceCriteria = options.acceptanceCriteria || [];
    this.tasks = options.tasks || [];
    this.priority = options.priority || 'medium';
    this.storyPoints = options.storyPoints || 3;
  }

  getDeployDir(): string {
    return path.join(this.baseDir, 'scripts', 'setup', 'agile', 'stories', this.appName);
  }

  getDbPassword(): string {
    return 'story_password_2024';
  }

  getEnvConfig(): string {
    const port = this.getPortAllocation();
    
    return `# Agile User Story Environment Configuration
# Auto-generated by aidev-setup
# Port Policy: Agile (Epic/Theme/Story) uses 3200-3299

# Database Configuration - SQLite for Agile
DB_TYPE=sqlite
SQLITE_PATH=./data/${this.appName}_story.db

# Server Configuration
PORT=${port}
JWT_SECRET=story-secret-key-${this.appName}

# Agile Configuration
AGILE_TYPE=story
STORY_ID=${this.appName}
STORY_TITLE="${this.title}"
${this.epicId ? `PARENT_EPIC=${this.epicId}` : '# No parent epic'}
${this.themeId ? `PARENT_THEME=${this.themeId}` : '# No parent theme'}
PRIORITY=${this.priority}
STORY_POINTS=${this.storyPoints}

# Environment
NODE_ENV=agile_story

# Features
MODE=${this.mode.toUpperCase()}
`;
  }

  protected getPortAllocation(): number {
    // Use agile port range for stories
    const allocation = PORT_ALLOCATIONS['agile'];
    return allocation.main + 20; // Offset for stories
  }

  async createDeploymentConfig(): Promise<boolean> {
    try {
      // Create story documentation
      await this.createStoryDocumentation();
      
      // Create story structure
      await this.createStoryStructure();
      
      // Create package.json for story
      await this.createStoryPackageJson();
      
      // Create development artifacts
      await this.createDevelopmentArtifacts();

      return true;
    } catch (error) {
      console.error(chalk.red(`Failed to create story deployment config: ${error}`));
      return false;
    }
  }

  private async createStoryDocumentation(): Promise<void> {
    const storyDoc = `# User Story: ${this.title}

## Story Details
- **ID**: ${this.appName}
- **Title**: ${this.title}
${this.epicId ? `- **Epic**: ${this.epicId}` : ''}
${this.themeId ? `- **Theme**: ${this.themeId}` : ''}
- **Priority**: ${this.priority}
- **Story Points**: ${this.storyPoints}
- **Created**: ${new Date().toISOString()}

## User Story
${this.description}

## Acceptance Criteria
${this.acceptanceCriteria.length > 0 
  ? this.acceptanceCriteria.map((criteria, index) => `${index + 1}. [ ] ${criteria}`).join('\n')
  : '- [ ] Acceptance criteria to be defined'}

## Tasks
${this.tasks.length > 0 
  ? this.tasks.map(task => `- [ ] ${task}`).join('\n')
  : '- [ ] Break down story into tasks'}

## Definition of Done
- [ ] Code complete and reviewed
- [ ] Unit tests written and passing
- [ ] Integration tests passing
- [ ] Documentation updated
- [ ] Acceptance criteria met
- [ ] Product owner approval

## Technical Design
<!-- Technical implementation approach -->

## UI/UX Design
<!-- User interface and experience considerations -->

## Testing Strategy
<!-- How this story will be tested -->

## Dependencies
<!-- Dependencies on other stories or external systems -->

## Notes
<!-- Additional notes and considerations -->

---
*This story is managed in ${this.mode.toUpperCase()} mode*
`;

    await fs.writeFile(path.join(this.deployDir, 'STORY.md'), storyDoc);
  }

  private async createStoryStructure(): Promise<void> {
    const dirs = [
      'src',
      'tests',
      'docs',
      'assets',
      'mocks'
    ];

    for (const dir of dirs) {
      await fs.ensureDir(path.join(this.deployDir, dir));
    }

    // Create story metadata
    const storyData = {
      story: {
        id: this.appName,
        title: this.title,
        description: this.description,
        epicId: this.epicId,
        themeId: this.themeId,
        priority: this.priority,
        storyPoints: this.storyPoints,
        acceptanceCriteria: this.acceptanceCriteria,
        tasks: this.tasks.map((task, index) => ({
          id: `task-${index + 1}`,
          description: task,
          status: 'todo',
          assignee: null
        })),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        status: 'todo',
        assignee: null
      }
    };

    await fs.writeJson(
      path.join(this.deployDir, 'story.json'),
      storyData,
      { spaces: 2 }
    );
  }

  private async createStoryPackageJson(): Promise<void> {
    const packageJson = {
      name: `@agile/story-${this.appName}`,
      version: '1.0.0',
      description: this.title,
      type: 'story',
      scripts: {
        'dev': 'npm run watch',
        'build': 'tsc',
        'test': 'jest',
        'test:watch': 'jest --watch',
        'lint': 'eslint src/**/*.ts',
        'status': 'node scripts/story-status.js',
        'update:task': 'node scripts/update-task.js'
      },
      story: {
        id: this.appName,
        title: this.title,
        epicId: this.epicId,
        themeId: this.themeId,
        priority: this.priority,
        storyPoints: this.storyPoints
      },
      devDependencies: {
        '@types/node': '^20.0.0',
        'typescript': '^5.0.0',
        'jest': '^29.5.0',
        '@types/jest': '^29.5.0',
        'eslint': '^8.0.0'
      }
    };

    await fs.writeJson(path.join(this.deployDir, 'package.json'), packageJson, { spaces: 2 });
  }

  private async createDevelopmentArtifacts(): Promise<void> {
    // Create test file template
    const testTemplate = `import { describe, it, expect } from '@jest/globals';

describe('${this.title}', () => {
  describe('Acceptance Criteria Tests', () => {
${this.acceptanceCriteria.map((criteria, index) => `    it('should ${criteria.toLowerCase()}', () => {
      // TODO: Implement test for: ${criteria}
      expect(true).toBe(false);
    });`).join('\n\n')}
  });

  describe('Unit Tests', () => {
    it('should have unit tests', () => {
      // TODO: Add unit tests
      expect(true).toBe(false);
    });
  });
});
`;

    await fs.writeFile(
      path.join(this.deployDir, 'tests', `${this.appName}.test.ts`),
      testTemplate
    );

    // Create implementation stub
    const implementationStub = `/**
 * Implementation for: ${this.title}
 * 
 * User Story:
 * ${this.description.split('\n').join('\n * ')}
 */

export class ${this.appName.split(/[-_]/).map(part => part.charAt(0).toUpperCase() + part.slice(1)).join('')}Implementation {
  constructor() {
    // TODO: Initialize
  }

  // TODO: Implement story functionality
}

// Tasks:
${this.tasks.map((task, index) => `// ${index + 1}. TODO: ${task}`).join('\n')}
`;

    await fs.writeFile(
      path.join(this.deployDir, 'src', 'index.ts'),
      implementationStub
    );

    // Create task tracking
    const taskTracking = `# Task Tracking for ${this.title}

## Current Sprint
Sprint: _____
Start Date: _____
End Date: _____

## Tasks
${this.tasks.map((task, index) => `
### Task ${index + 1}: ${task}
- Status: TODO
- Assignee: 
- Started: 
- Completed: 
- Hours Estimated: 
- Hours Actual: 
- Notes: 
`).join('\n')}

## Daily Updates
<!-- Add daily progress updates here -->

### ${new Date().toISOString().split('T')[0]}
- Started story planning
- Created initial structure

## Blockers
<!-- List any blockers here -->

## Questions for PO
<!-- Questions requiring product owner clarification -->
`;

    await fs.writeFile(path.join(this.deployDir, 'TASKS.md'), taskTracking);

    // Create README
    const readme = `# ${this.title}

${this.description}

## Quick Start

\`\`\`bash
npm install
npm run dev
\`\`\`

## Running Tests

\`\`\`bash
npm test
\`\`\`

## Story Information

- **Priority**: ${this.priority}
- **Story Points**: ${this.storyPoints}
${this.epicId ? `- **Epic**: ${this.epicId}` : ''}
${this.themeId ? `- **Theme**: ${this.themeId}` : ''}

## Development Status

See [STORY.md](STORY.md) for detailed story information and acceptance criteria.
See [TASKS.md](TASKS.md) for task breakdown and tracking.

## Files

- \`src/\` - Implementation code
- \`tests/\` - Test files
- \`docs/\` - Documentation
- \`story.json\` - Story metadata
`;

    await fs.writeFile(path.join(this.deployDir, 'README.md'), readme);
  }

  printSuccessMessage(): void {
    const port = this.getPortAllocation();
    
    console.log(chalk.green('\n' + '='.repeat(50)));
    console.log(chalk.green(`✅ User story setup completed successfully! (${this.mode.toUpperCase()} Mode)`));
    console.log(chalk.green('\n📝 Story Details:'));
    console.log(chalk.green(`   Title: ${this.title}`));
    console.log(chalk.green(`   ID: ${this.appName}`));
    console.log(chalk.green(`   Priority: ${this.priority}`));
    console.log(chalk.green(`   Story Points: ${this.storyPoints}`));
    if (this.epicId) {
      console.log(chalk.green(`   Epic: ${this.epicId}`));
    }
    if (this.themeId) {
      console.log(chalk.green(`   Theme: ${this.themeId}`));
    }
    
    console.log(chalk.green('\n📍 Story location: ' + this.deployDir));
    console.log(chalk.green(`🌐 Port: ${port}`));
    
    if (this.acceptanceCriteria.length > 0) {
      console.log(chalk.cyan('\n✅ Acceptance Criteria:'));
      this.acceptanceCriteria.forEach((criteria, index) => {
        console.log(chalk.cyan(`   ${index + 1}. ${criteria}`));
      });
    }
    
    if (this.tasks.length > 0) {
      console.log(chalk.cyan('\n📋 Tasks:'));
      this.tasks.forEach((task, index) => {
        console.log(chalk.cyan(`   ${index + 1}. ${task}`));
      });
    }
    
    if (this.mode === 'vf') {
      console.log(chalk.cyan('\n🔌 VF Mode Configuration:'));
      console.log(chalk.cyan('   - Task Queue: TASK_QUEUE.vf.json'));
      console.log(chalk.cyan('   - Story Data: story.json'));
      console.log(chalk.cyan('   - MCP Config: config/mcp-agent.json'));
    }
    
    console.log(chalk.yellow('\n🚀 Next Steps:'));
    console.log(chalk.yellow(`   1. cd ${this.deployDir}`));
    console.log(chalk.yellow('   2. npm install'));
    console.log(chalk.yellow('   3. Start development: npm run dev'));
    console.log(chalk.yellow('   4. Run tests: npm test'));
    console.log(chalk.yellow('   5. Update task status: npm run update:task'));
    
    console.log(chalk.blue('\n📊 Files Created:'));
    console.log(chalk.blue('   - STORY.md - Story documentation'));
    console.log(chalk.blue('   - TASKS.md - Task tracking'));
    console.log(chalk.blue('   - story.json - Story metadata'));
    console.log(chalk.blue('   - src/index.ts - Implementation stub'));
    console.log(chalk.blue(`   - tests/${this.appName}.test.ts - Test template`));
  }
}